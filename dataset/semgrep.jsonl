{"id": "missing-pip-no-cache-dir", "rule": "rules:\n- id: missing-pip-no-cache-dir\n  severity: INFO\n  languages: [generic]\n  patterns:\n  - patterns:\n    - pattern: |\n        RUN ... $PIP install ... $SOMETHING\n    - pattern-not-inside: |\n        RUN ... $PIP install ... --no-cache-dir\n    - pattern-not-inside: |\n        RUN ... $PIP install . ... $SOMETHING\n  - metavariable-regex:\n      metavariable: $PIP\n      regex: (pip|pip3)\n  message: |\n    This '$PIP install' is missing '--no-cache-dir'. This prevents\n    unnecessary packages from being installed, thereby reducing image size. Add\n    '--no-cache-dir'.\n", "failed_tests": ["FROM python:3.7\n\nENV PIP_NO_CACHE_DIR=true\n\n# ok: missing-pip-no-cache-dir\nRUN pip install MySQL_python"], "failed_type": "fp", "testsuite_a": "FROM python\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip install MySQL_python\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip install MySQL_python semgrep\n\n# ok: missing-pip-no-cache-dir\nRUN pip install --no-cache-dir MySQL_python\n\n# ok: missing-pip-no-cache-dir\nRUN pip install --no-cache-dir MySQL_python semgrep\n\n# ok: missing-pip-no-cache-dir\nRUN pip install .\n\nFROM python:3.7\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip3 install MySQL_python\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip3 install MySQL_python semgrep\n\n# ok: missing-pip-no-cache-dir\nRUN pip3 install --no-cache-dir MySQL_python\n\n# ok: missing-pip-no-cache-dir\nRUN pip3 install --no-cache-dir MySQL_python semgrep\n", "testsuite_b": "FROM python\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip install MySQL_python\n\n# ruleid: missing-pip-no-cache-dir\nRUN python -m pip install MySQL_python\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip install MySQL_python semgrep\n\n# ok: missing-pip-no-cache-dir\nRUN pip install --no-cache-dir MySQL_python\n\n# ok: missing-pip-no-cache-dir\nRUN pip install --no-cache-dir MySQL_python semgrep\n\n# ok: missing-pip-no-cache-dir\nRUN pip install .\n\nFROM python:3.7\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip3 install MySQL_python\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip2 install MySQL_python\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip3 install MySQL_python semgrep\n\n# ok: missing-pip-no-cache-dir\nRUN pip3 install --no-cache-dir MySQL_python\n\n# ok: missing-pip-no-cache-dir\nRUN pip3 install --no-cache-dir MySQL_python semgrep\n\nFROM python:3.7\n\nENV PIP_NO_CACHE_DIR=true\n\n# ok: missing-pip-no-cache-dir\nRUN pip install MySQL_python\n", "ground_truth": "rules:\n- id: missing-pip-no-cache-dir\n  severity: INFO\n  languages: [generic]\n  patterns:\n  - patterns:\n    - pattern: |\n        RUN ... $PIP install ... $SOMETHING\n    - pattern-not-inside: |\n        RUN ... $PIP install ... --no-cache-dir\n    - pattern-not-inside: |\n        RUN ... $PIP install . ... $SOMETHING\n    - pattern-not-inside: |\n        ENV PIP_NO_CACHE_DIR=...\n        ...\n        ...\n        ...\n    - pattern-not-inside: |\n        ENV PIP_NO_CACHE_DIR ...\n        ...\n        ...\n        ...\n  - metavariable-regex:\n      metavariable: $PIP\n      regex: (pip|pip2|pip3|python -m pip)\n  message: |\n    This '$PIP install' is missing '--no-cache-dir'. This prevents\n    unnecessary packages from being installed, thereby reducing image size. Add\n    '--no-cache-dir'.\n  metadata:\n    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3042\n    references:\n    - https://github.com/hadolint/hadolint/wiki/DL3042\n  paths:\n    include:\n    - '*dockerfile*'\n    - '*Dockerfile*'\n", "rule_path": "extend_dataset/17add9ec/before/missing-pip-no-cache-dir.yaml", "test_path": "extend_dataset/17add9ec/after/missing-pip-no-cache-dir.dockerfile", "category": "historical", "splited_testsuite_b": ["FROM python\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip install MySQL_python", "FROM python\n\n# ruleid: missing-pip-no-cache-dir\nRUN python -m pip install MySQL_python", "FROM python\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip install MySQL_python semgrep", "FROM python\n\n# ok: missing-pip-no-cache-dir\nRUN pip install --no-cache-dir MySQL_python", "FROM python\n\n# ok: missing-pip-no-cache-dir\nRUN pip install --no-cache-dir MySQL_python semgrep", "FROM python\n\n# ok: missing-pip-no-cache-dir\nRUN pip install .", "FROM python:3.7\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip3 install MySQL_python", "FROM python:3.7\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip2 install MySQL_python", "FROM python:3.7\n\n# ruleid: missing-pip-no-cache-dir\nRUN pip3 install MySQL_python semgrep", "FROM python:3.7\n\n# ok: missing-pip-no-cache-dir\nRUN pip3 install --no-cache-dir MySQL_python", "FROM python:3.7\n\n# ok: missing-pip-no-cache-dir\nRUN pip3 install --no-cache-dir MySQL_python semgrep", "FROM python:3.7\n\nENV PIP_NO_CACHE_DIR=true\n\n# ok: missing-pip-no-cache-dir\nRUN pip install MySQL_python"], "actual": [true, true, true, false, false, false, true, true, true, false, false, true], "expected": [true, true, true, false, false, false, true, true, true, false, false, false], "index": 1, "commit_message": "Improve 'missing-pip-no-cache-dir' (#1204)", "commit_date_str": "2021-03-30 09:58:02 -0600", "leaf_count": 5, "line_count": 14}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >\n    Avoiding SQL string concatenation: untrusted input concatinated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complexe SQL composition, use SQL Expression\n    Langague or SQL Statements and Expressions API.\n  severity: ERROR\n  languages:\n  - python\n\n  pattern-either:\n\n  - pattern: |\n      $CONNECTION.execute( $SQL + ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...) )\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...) )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\")\n\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY)\n", "failed_tests": ["# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >\n    Avoiding SQL string concatenation: untrusted input concatinated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complexe SQL composition, use SQL Expression\n    Languague or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe: >\n      CWE-89: Improper Neutralization of Special Elements used in an SQL\n      Command ('SQL Injection')\n    owasp: 'A1: Injection'\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n  severity: ERROR\n  languages:\n  - python\n\n  pattern-either:\n\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/2cfcca81/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/2cfcca81/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)", "# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)", "# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)", "# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)", "# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)", "# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)", "# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)", "# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)", "# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)", "# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)"], "actual": [true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 2, "commit_message": "Modify rule patterns to take into consideration parameters for execute() (#1318)", "commit_date_str": "2021-06-04 07:41:34 -0600", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >\n    Avoiding SQL string concatenation: untrusted input concatinated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complexe SQL composition, use SQL Expression\n    Langague or SQL Statements and Expressions API.\n  severity: ERROR\n  languages:\n  - python\n\n  pattern-either:\n\n  - pattern: |\n      $CONNECTION.execute( $SQL + ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...) )\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...) )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\")\n\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY)\n", "failed_tests": ["# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >\n    Avoiding SQL string concatenation: untrusted input concatinated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complexe SQL composition, use SQL Expression\n    Languague or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe: >\n      CWE-89: Improper Neutralization of Special Elements used in an SQL\n      Command ('SQL Injection')\n    owasp: 'A1: Injection'\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n  severity: ERROR\n  languages:\n  - python\n\n  pattern-either:\n\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/2cfcca81/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/2cfcca81/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)", "# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)", "# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)", "# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)", "# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)", "# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)", "# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)", "# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)", "# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)", "# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)"], "actual": [true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 3, "commit_message": "Modify rule patterns to take into consideration parameters for execute() (#1318)", "commit_date_str": "2021-06-04 07:41:34 -0600", "leaf_count": 8, "line_count": 41}
{"id": "avoid-pyyaml-load", "rule": "rules:\n- id: avoid-pyyaml-load\n  languages:\n  - python\n  message: |\n    Avoid using `load()`. `PyYAML.load` can create arbitrary Python\n    objects. A malicious actor could exploit this to run arbitrary\n    code. Use `safe_load()` instead.\n  fix-regex:\n    regex: load\n    replacement: safe_load\n    count: 1\n  severity: ERROR\n  patterns:\n  - pattern-inside: |\n      import yaml\n      ...\n  - pattern-not-inside: |\n      $YAML = ruamel.yaml.YAML(...)\n      ...\n      $YAML.load(...)\n  - pattern: yaml.load(...)\n", "failed_tests": ["import yaml\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)"], "failed_type": "fp", "testsuite_a": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n", "testsuite_b": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n", "ground_truth": "rules:\n- id: avoid-pyyaml-load\n  metadata:\n    owasp: 'A8: Insecure Deserialization'\n    cwe: 'CWE-502: Deserialization of Untrusted Data'\n    references:\n    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation\n    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342\n  languages:\n  - python\n  message: |\n    Avoid using `load()`. `PyYAML.load` can create arbitrary Python\n    objects. A malicious actor could exploit this to run arbitrary\n    code. Use `safe_load()` instead.\n  fix-regex:\n    regex: load\n    replacement: safe_load\n    count: 1\n  severity: ERROR\n  patterns:\n  - pattern-inside: |\n      import yaml\n      ...\n  - pattern-not-inside: |\n      $YAML = ruamel.yaml.YAML(...)\n      ...\n      $YAML.load(...)\n  - pattern-not: yaml.load(..., Loader=yaml.CSafeLoader, ...)\n  - pattern-not: yaml.load(..., Loader=yaml.SafeLoader, ...)\n  - pattern: yaml.load(...)\n", "rule_path": "extend_dataset/718b0090/before/avoid-pyyaml-load.yaml", "test_path": "extend_dataset/718b0090/after/avoid-pyyaml-load.py", "category": "historical", "splited_testsuite_b": ["import yaml\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")", "import yaml\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)", "import yaml\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")", "import yaml\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)"], "actual": [true, true, false, true], "expected": [true, true, false, false], "index": 4, "commit_message": "New Published Rules - python.lang.security.deserialization.avoid-pyyaml-load (#1142)", "commit_date_str": "2021-03-08 17:25:22 +0100", "leaf_count": 3, "line_count": 14}
{"id": "avoid-pyyaml-load", "rule": "rules:\n- id: avoid-pyyaml-load\n  languages:\n  - python\n  message: |\n    Avoid using `load()`. `PyYAML.load` can create arbitrary Python\n    objects. A malicious actor could exploit this to run arbitrary\n    code. Use `safe_load()` instead.\n  fix-regex:\n    regex: load\n    replacement: safe_load\n    count: 1\n  severity: ERROR\n  patterns:\n  - pattern-inside: |\n      import yaml\n      ...\n  - pattern-not-inside: |\n      $YAML = ruamel.yaml.YAML(...)\n      ...\n      $YAML.load(...)\n  - pattern: yaml.load(...)\n", "failed_tests": ["import yaml\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)"], "failed_type": "fp", "testsuite_a": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n", "testsuite_b": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n", "ground_truth": "rules:\n- id: avoid-pyyaml-load\n  metadata:\n    owasp: 'A8: Insecure Deserialization'\n    cwe: 'CWE-502: Deserialization of Untrusted Data'\n    references:\n    - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation\n    - https://nvd.nist.gov/vuln/detail/CVE-2017-18342\n  languages:\n  - python\n  message: |\n    Avoid using `load()`. `PyYAML.load` can create arbitrary Python\n    objects. A malicious actor could exploit this to run arbitrary\n    code. Use `safe_load()` instead.\n  fix-regex:\n    regex: load\n    replacement: safe_load\n    count: 1\n  severity: ERROR\n  patterns:\n  - pattern-inside: |\n      import yaml\n      ...\n  - pattern-not-inside: |\n      $YAML = ruamel.yaml.YAML(...)\n      ...\n      $YAML.load(...)\n  - pattern-not: yaml.load(..., Loader=yaml.CSafeLoader, ...)\n  - pattern-not: yaml.load(..., Loader=yaml.SafeLoader, ...)\n  - pattern: yaml.load(...)\n", "rule_path": "extend_dataset/718b0090/before/avoid-pyyaml-load.yaml", "test_path": "extend_dataset/718b0090/after/avoid-pyyaml-load.py", "category": "historical", "splited_testsuite_b": ["import yaml\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")", "import yaml\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)", "import yaml\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")", "import yaml\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)"], "actual": [true, true, false, true], "expected": [true, true, false, false], "index": 5, "commit_message": "New Published Rules - python.lang.security.deserialization.avoid-pyyaml-load (#1142)", "commit_date_str": "2021-03-08 17:25:22 +0100", "leaf_count": 3, "line_count": 14}
{"id": "detect-non-literal-fs-filename", "rule": "rules:\n- id: detect-non-literal-fs-filename\n  patterns:\n  - pattern-not: $FS.$METHOD(\"...\", ...)\n  - pattern-either:\n    - pattern: $FS.appendFile(...)\n    - pattern: $FS.appendFileSync(...)\n    - pattern: $FS.chmod(...)\n    - pattern: $FS.chmodSync(...)\n    - pattern: $FS.chown(...)\n    - pattern: $FS.chownSync(...)\n    - pattern: $FS.createReadStream(...)\n    - pattern: $FS.createWriteStream(...)\n    - pattern: $FS.exists(...)\n    - pattern: $FS.existsSync(...)\n    - pattern: $FS.lchmod(...)\n    - pattern: $FS.lchmodSync(...)\n    - pattern: $FS.lchown(...)\n    - pattern: $FS.lchownSync(...)\n    - pattern: $FS.link(...)\n    - pattern: $FS.linkSync(...)\n    - pattern: $FS.lstat(...)\n    - pattern: $FS.lstatSync(...)\n    - pattern: $FS.mkdir(...)\n    - pattern: $FS.mkdirSync(...)\n    - pattern: $FS.open(...)\n    - pattern: $FS.openSync(...)\n    - pattern: $FS.readdir(...)\n    - pattern: $FS.readdirSync(...)\n    - pattern: $FS.readFile(...)\n    - pattern: $FS.readFileSync(...)\n    - pattern: $FS.readlink(...)\n    - pattern: $FS.readlinkSync(...)\n    - pattern: $FS.realpath(...)\n    - pattern: $FS.realpathSync(...)\n    - pattern: $FS.rename(...)\n    - pattern: $FS.renameSync(...)\n    - pattern: $FS.rmdir(...)\n    - pattern: $FS.rmdirSync(...)\n    - pattern: $FS.stat(...)\n    - pattern: $FS.statSync(...)\n    - pattern: $FS.symlink(...)\n    - pattern: $FS.symlinkSync(...)\n    - pattern: $FS.truncate(...)\n    - pattern: $FS.truncateSync(...)\n    - pattern: $FS.unlink(...)\n    - pattern: $FS.unlinkSync(...)\n    - pattern: $FS.unwatchFile(...)\n    - pattern: $FS.utimes(...)\n    - pattern: $FS.utimesSync(...)\n    - pattern: $FS.watch(...)\n    - pattern: $FS.watchFile(...)\n    - pattern: $FS.writeFile(...)\n    - pattern: $FS.writeFileSync(...)\n  message: >-\n    A variable is present in the filename argument of fs calls, this might allow an\n    attacker to access anything on your system.\n  languages:\n  - typescript\n  - javascript\n  severity: WARNING\n", "failed_tests": ["const {readFile} = require('fs')\nconst fs = require('fs')\n\nasync function okTest3() {\n  let filehandle;\n  try {\n    // ok:detect-non-literal-fs-filename\n    filehandle = await this.open();\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}"], "failed_type": "fp", "testsuite_a": "const {readFile} = require('fs')\nconst fs = require('fs')\n\nfunction test1(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  readFile(fileName)\n    .then((resolve, reject) => {\n      foobar()\n    })\n}\n\nasync function test2(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  const data = await fs.promises.mkdir(fileName, {})\n  foobar(data)\n}\n\nfunction test3(fileName) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ruleid:detect-non-literal-fs-filename\n  fs.writeFile(fileName, data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}\n\nfunction okTest1(data) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ok:detect-non-literal-fs-filename\n  fs.writeFile('message.txt', data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}\n\nasync function okTest2() {\n  let filehandle;\n  try {\n    // ok:detect-non-literal-fs-filename\n    filehandle = await fs.promises.open('thefile.txt', 'r');\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}\n", "testsuite_b": "const {readFile} = require('fs')\nconst fs = require('fs')\n\nfunction test1(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  readFile(fileName)\n    .then((resolve, reject) => {\n      foobar()\n    })\n}\n\nasync function test2(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  const data = await fs.promises.mkdir(fileName, {})\n  foobar(data)\n}\n\nfunction test3(fileName) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ruleid:detect-non-literal-fs-filename\n  fs.writeFile(fileName, data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}\n\nfunction okTest1(data) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ok:detect-non-literal-fs-filename\n  fs.writeFile('message.txt', data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}\n\nasync function okTest2() {\n  let filehandle;\n  try {\n    // ok:detect-non-literal-fs-filename\n    filehandle = await fs.promises.open('thefile.txt', 'r');\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}\n\nasync function okTest3() {\n  let filehandle;\n  try {\n    // ok:detect-non-literal-fs-filename\n    filehandle = await this.open();\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}\n", "ground_truth": "rules:\n- id: detect-non-literal-fs-filename\n  patterns:\n  - pattern-inside: |\n      $X = require('fs')\n      ...\n  - pattern-not: $FS.$METHOD(\"...\", ...)\n  - pattern-either:\n    - pattern: $FS.appendFile($FILE,...)\n    - pattern: $FS.appendFileSync($FILE,...)\n    - pattern: $FS.chmod($FILE,...)\n    - pattern: $FS.chmodSync($FILE,...)\n    - pattern: $FS.chown($FILE,...)\n    - pattern: $FS.chownSync($FILE,...)\n    - pattern: $FS.createReadStream($FILE,...)\n    - pattern: $FS.createWriteStream($FILE,...)\n    - pattern: $FS.exists($FILE,...)\n    - pattern: $FS.existsSync($FILE,...)\n    - pattern: $FS.lchmod($FILE,...)\n    - pattern: $FS.lchmodSync($FILE,...)\n    - pattern: $FS.lchown($FILE,...)\n    - pattern: $FS.lchownSync($FILE,...)\n    - pattern: $FS.link($FILE,...)\n    - pattern: $FS.linkSync($FILE,...)\n    - pattern: $FS.lstat($FILE,...)\n    - pattern: $FS.lstatSync($FILE,...)\n    - pattern: $FS.mkdir($FILE,...)\n    - pattern: $FS.mkdirSync($FILE,...)\n    - pattern: $FS.open($FILE,...)\n    - pattern: $FS.openSync($FILE,...)\n    - pattern: $FS.readdir($FILE,...)\n    - pattern: $FS.readdirSync($FILE,...)\n    - pattern: $FS.readFile($FILE,...)\n    - pattern: $FS.readFileSync($FILE,...)\n    - pattern: $FS.readlink($FILE,...)\n    - pattern: $FS.readlinkSync($FILE,...)\n    - pattern: $FS.realpath($FILE,...)\n    - pattern: $FS.realpathSync($FILE,...)\n    - pattern: $FS.rename($FILE,...)\n    - pattern: $FS.renameSync($FILE,...)\n    - pattern: $FS.rmdir($FILE,...)\n    - pattern: $FS.rmdirSync($FILE,...)\n    - pattern: $FS.stat($FILE,...)\n    - pattern: $FS.statSync($FILE,...)\n    - pattern: $FS.symlink($FILE,...)\n    - pattern: $FS.symlinkSync($FILE,...)\n    - pattern: $FS.truncate($FILE,...)\n    - pattern: $FS.truncateSync($FILE,...)\n    - pattern: $FS.unlink($FILE,...)\n    - pattern: $FS.unlinkSync($FILE,...)\n    - pattern: $FS.unwatchFile($FILE,...)\n    - pattern: $FS.utimes($FILE,...)\n    - pattern: $FS.utimesSync($FILE,...)\n    - pattern: $FS.watch($FILE,...)\n    - pattern: $FS.watchFile($FILE,...)\n    - pattern: $FS.writeFile($FILE,...)\n    - pattern: $FS.writeFileSync($FILE,...)\n  message: >-\n    A variable is present in the filename argument of fs calls, this might allow an attacker to access anything on your system.\n  languages:\n  - typescript\n  - javascript\n  severity: WARNING\n  metadata:\n    cwe: \"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"\n    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-fs-filename.js\n    category: security\n", "rule_path": "extend_dataset/0a151eef/before/detect-non-literal-fs-filename.yaml", "test_path": "extend_dataset/0a151eef/after/detect-non-literal-fs-filename.js", "category": "historical", "splited_testsuite_b": ["const {readFile} = require('fs')\nconst fs = require('fs')\n\nfunction test1(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  readFile(fileName)\n    .then((resolve, reject) => {\n      foobar()\n    })\n}", "const {readFile} = require('fs')\nconst fs = require('fs')\n\nasync function test2(fileName) {\n  // ruleid:detect-non-literal-fs-filename\n  const data = await fs.promises.mkdir(fileName, {})\n  foobar(data)\n}", "const {readFile} = require('fs')\nconst fs = require('fs')\n\nfunction test3(fileName) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ruleid:detect-non-literal-fs-filename\n  fs.writeFile(fileName, data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}", "const {readFile} = require('fs')\nconst fs = require('fs')\n\nfunction okTest1(data) {\n  const data = new Uint8Array(Buffer.from('Hello Node.js'));\n  // ok:detect-non-literal-fs-filename\n  fs.writeFile('message.txt', data, (err) => {\n    if (err) throw err;\n    console.log('The file has been saved!');\n  });\n}", "const {readFile} = require('fs')\nconst fs = require('fs')\n\nasync function okTest2() {\n  let filehandle;\n  try {\n    // ok:detect-non-literal-fs-filename\n    filehandle = await fs.promises.open('thefile.txt', 'r');\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}", "const {readFile} = require('fs')\nconst fs = require('fs')\n\nasync function okTest3() {\n  let filehandle;\n  try {\n    // ok:detect-non-literal-fs-filename\n    filehandle = await this.open();\n  } finally {\n    if (filehandle !== undefined)\n      await filehandle.close();\n  }\n}"], "actual": [true, true, true, false, false, true], "expected": [true, true, true, false, false, false], "index": 6, "commit_message": "update detect-non-literal-fs-filename rule (#1469)", "commit_date_str": "2021-09-14 22:27:15 -0500", "leaf_count": 50, "line_count": 52}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages:\n  - ruby\n  severity: ERROR\n  message: Detected user input used to manually construct a SQL string. This is usually\n    bad practice because manual construction could accidentally result in a SQL injection.\n    An attacker could use a SQL injection to steal or modify contents of the database.\n    Instead, use a parameterized query which is available by default in most database\n    engines. Alternatively, consider using an object-relational mapper (ORM) such\n    as ActiveRecord which will protect your queries.\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: params\n      - pattern: request\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              $RECORD.where($X,...)\n          - pattern: |\n              $RECORD.find(..., :conditions => $X,...)\n        - focus-metavariable: $X\n      - patterns:\n        - pattern: |\n            \"$SQLVERB#{$EXPR}...\"\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $SQLVERB\n        - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n      - patterns:\n        - pattern-either:\n          - pattern: Kernel::sprintf(\"$SQLSTR\", $EXPR)\n          - pattern: |\n              \"$SQLSTR\" + $EXPR\n          - pattern: |\n              \"$SQLSTR\" % $EXPR\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $EXPR\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "failed_tests": ["class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test6\n    # ok:tainted-sql-string\n    user = User.where(user_id: params[:user_id])[0]\n    # ok:tainted-sql-string\n    user = User.where(params.slice(:user_id))[0]\n  end\nend"], "failed_type": "fp", "testsuite_a": "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\n\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\n\n\nend\n", "testsuite_b": "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\n\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\n\n  def ok_test6\n    # ok:tainted-sql-string\n    user = User.where(user_id: params[:user_id])[0]\n    # ok:tainted-sql-string\n    user = User.where(params.slice(:user_id))[0]\n  end\n\nend\n\n", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages:\n  - ruby\n  severity: ERROR\n  message: Detected user input used to manually construct a SQL string. This is usually bad practice because\n    manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection\n    to steal or modify contents of the database. Instead, use a parameterized query which is available\n    by default in most database engines. Alternatively, consider using an object-relational mapper (ORM)\n    such as ActiveRecord which will protect your queries.\n  metadata:\n    cwe:\n    - \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp:\n    - A07:2017 - Cross-Site Scripting (XSS)\n    - A03:2021 - Injection\n    category: security\n    technology:\n    - rails\n    references:\n    - https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: HIGH\n    confidence: MEDIUM\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: params\n      - pattern: request\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - patterns:\n            - pattern: |\n                $RECORD.where($X,...)\n            - pattern-not: |\n                $RECORD.where($PARAMS.slice(...), ...)\n          - pattern: |\n              $RECORD.find(..., :conditions => $X,...)\n        - focus-metavariable: $X\n      - patterns:\n        - pattern: |\n            \"$SQLVERB#{$EXPR}...\"\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $SQLVERB\n        - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n      - patterns:\n        - pattern-either:\n          - pattern: Kernel::sprintf(\"$SQLSTR\", $EXPR)\n          - pattern: |\n              \"$SQLSTR\" + $EXPR\n          - pattern: |\n              \"$SQLSTR\" % $EXPR\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $EXPR\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "rule_path": "extend_dataset/f211cca2/before/tainted-sql-string.yaml", "test_path": "extend_dataset/f211cca2/after/tainted-sql-string.rb", "category": "historical", "splited_testsuite_b": ["class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test6\n    # ok:tainted-sql-string\n    user = User.where(user_id: params[:user_id])[0]\n    # ok:tainted-sql-string\n    user = User.where(params.slice(:user_id))[0]\n  end\nend"], "actual": [true, true, true, true, true, false, false, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false, false, false], "index": 7, "commit_message": "Merge pull request #2925 from returntocorp/ruby-sqli-bugfix", "commit_date_str": "2023-06-12 13:31:18 -0700", "leaf_count": 16, "line_count": 42}
{"id": "insecure-use-printf-fn", "rule": "rules:\n- id: insecure-use-printf-fn\n  message: >-\n    Avoid using user-controlled format strings passed into 'sprintf', 'printf' and\n    'vsprintf'.\n    These functions put you at risk of buffer overflow vulnerabilities through the\n    use of format string exploits.\n    Instead, use 'snprintf' and 'vsnprintf'.\n  languages: [c]\n  severity: WARNING\n  pattern-either:\n  - pattern: |\n      $FUNC($BUFFER, argv[$NUM], ...);\n      ...\n      vsprintf(..., $BUFFER, ...);\n  - pattern: vsprintf(..., argv[$NUM], ...)\n  - pattern: |\n      $FUNC($BUFFER, argv[$NUM], ...);\n      ...\n      sprintf(..., $BUFFER, ...);\n  - pattern: sprintf(...,argv[$NUM],...)\n  - pattern: |\n      $FUNC($BUFFER, argv[$NUM], ...);\n      ...\n      printf(..., $BUFFER, ...);\n  - pattern: printf(...,argv[$NUM],...)\n", "failed_tests": ["#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ok: insecure-use-printf-fn\n    vsprintf(\"%s\\n\",argv[0])\n}"], "failed_type": "fp", "testsuite_a": "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    strncpy(format, argv[1], 255);\n    char buffer[100];\n    vsprintf (buffer,format, args);\n\n    //ruleid: insecure-use-printf-fn\n    vsprintf(buffer, argv[1], args);\n\n    //ok: insecure-use-printf-fn\n    vsnprintf(buffer, format, args);\n}\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    char buffer[200];\n    sprintf(buffer, format, a, b, c);\n\n\n    char buffer[256];\n    int i = 3;\n    //ruleid: insecure-use-printf-fn\n    sprintf(buffer, argv[2], a, b, c);\n\n    //ok: insecure-use-printf-fn\n    snprintf(buffer, format, a,b,c);\n}\n\nvoid bad_printf() {\n    //ruleid: insecure-use-printf-fn\n    printf(argv[2], 1234);\n\n    char format[300];\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    printf(format, 1234);\n\n    //ok: insecure-use-printf-fn\n    printf(\"hello\");\n}\n\nint main() {\n    bad_vsprintf(NULL);\n    bad_sprintf();\n    bad_printf();\n    return 0;\n}\n", "testsuite_b": "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    strncpy(format, argv[1], 255);\n    char buffer[100];\n    vsprintf (buffer,format, args);\n\n    //ruleid: insecure-use-printf-fn\n    vsprintf(buffer, argv[1], args);\n\n    //ok: insecure-use-printf-fn\n    vsprintf(\"%s\\n\",argv[0])\n\n    //ok: insecure-use-printf-fn\n    vsnprintf(buffer, format, args);\n}\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    char buffer[200];\n    sprintf(buffer, format, a, b, c);\n\n\n    char buffer[256];\n    int i = 3;\n    //ruleid: insecure-use-printf-fn\n    sprintf(buffer, argv[2], a, b, c);\n\n    //ok: insecure-use-printf-fn\n    sprintf(\"%s\\n\",argv[0])\n\n    //ok: insecure-use-printf-fn\n    snprintf(buffer, format, a,b,c);\n}\n\nvoid bad_printf() {\n    //ruleid: insecure-use-printf-fn\n    printf(argv[2], 1234);\n\n    char format[300];\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    printf(format, 1234);\n\n    //ok: insecure-use-printf-fn\n    printf(\"hello\");\n\n    //ok: insecure-use-printf-fn\n    printf(\"%s\\n\",argv[0])\n}\n\nint main() {\n    bad_vsprintf(NULL);\n    bad_sprintf();\n    bad_printf();\n    return 0;\n}\n", "ground_truth": "rules:\n- id: insecure-use-printf-fn\n  message: >-\n    Avoid using user-controlled format strings passed into 'sprintf', 'printf' and\n    'vsprintf'.\n    These functions put you at risk of buffer overflow vulnerabilities through the\n    use of format string exploits.\n    Instead, use 'snprintf' and 'vsnprintf'.\n  metadata:\n    cwe:\n    - 'CWE-134: Use of Externally-Controlled Format String'\n    references:\n    - https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions\n    - https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html\n    category: security\n    technology:\n    - c\n    confidence: MEDIUM\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: HIGH\n  languages: [c]\n  severity: WARNING\n  patterns:\n  - pattern-either:\n    - pattern: |\n        $FUNC($BUFFER, argv[$NUM], ...);\n        ...\n        vsprintf(..., $BUFFER, ...);\n    - pattern: vsprintf(..., argv[$NUM], ...)\n    - pattern: |\n        $FUNC($BUFFER, argv[$NUM], ...);\n        ...\n        sprintf(..., $BUFFER, ...);\n    - pattern: sprintf(...,argv[$NUM],...)\n    - pattern: |\n        $FUNC($BUFFER, argv[$NUM], ...);\n        ...\n        printf(..., $BUFFER, ...);\n    - pattern: printf(...,argv[$NUM],...)\n  - metavariable-comparison:\n      metavariable: $NUM\n      comparison: int($NUM) > 0\n", "rule_path": "extend_dataset/6deeda1f/before/insecure-use-printf-fn.yaml", "test_path": "extend_dataset/6deeda1f/after/insecure-use-printf-fn.c", "category": "historical", "splited_testsuite_b": ["#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    strncpy(format, argv[1], 255);\n    char buffer[100];\n    vsprintf (buffer,format, args);\n}", "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    vsprintf(buffer, argv[1], args);\n}", "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ok: insecure-use-printf-fn\n    vsnprintf(buffer, format, args);\n}", "#include <stdio.h>\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    char buffer[200];\n    sprintf(buffer, format, a, b, c);\n}", "#include <stdio.h>\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    char buffer[256];\n    int i = 3;\n    //ruleid: insecure-use-printf-fn\n    sprintf(buffer, argv[2], a, b, c);\n}", "#include <stdio.h>\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ok: insecure-use-printf-fn\n    snprintf(buffer, format, a,b,c);\n}", "#include <stdio.h>\n\nvoid bad_printf() {\n    //ruleid: insecure-use-printf-fn\n    printf(argv[2], 1234);\n}", "#include <stdio.h>\n\nvoid bad_printf() {\n    char format[300];\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    printf(format, 1234);\n}", "#include <stdio.h>\n\nvoid bad_printf() {\n    //ok: insecure-use-printf-fn\n    printf(\"hello\");\n}", "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ok: insecure-use-printf-fn\n    vsprintf(\"%s\\n\",argv[0])\n}"], "actual": [true, true, false, true, true, false, true, true, false, true], "expected": [true, true, false, true, true, false, true, true, false, false], "index": 8, "commit_message": "Merge pull request #2668 from returntocorp/kb/c-argv-comparison", "commit_date_str": "2023-01-20 16:04:43 -0800", "leaf_count": 6, "line_count": 25}
{"id": "insecure-use-printf-fn", "rule": "rules:\n- id: insecure-use-printf-fn\n  message: >-\n    Avoid using user-controlled format strings passed into 'sprintf', 'printf' and\n    'vsprintf'.\n    These functions put you at risk of buffer overflow vulnerabilities through the\n    use of format string exploits.\n    Instead, use 'snprintf' and 'vsnprintf'.\n  languages: [c]\n  severity: WARNING\n  pattern-either:\n  - pattern: |\n      $FUNC($BUFFER, argv[$NUM], ...);\n      ...\n      vsprintf(..., $BUFFER, ...);\n  - pattern: vsprintf(..., argv[$NUM], ...)\n  - pattern: |\n      $FUNC($BUFFER, argv[$NUM], ...);\n      ...\n      sprintf(..., $BUFFER, ...);\n  - pattern: sprintf(...,argv[$NUM],...)\n  - pattern: |\n      $FUNC($BUFFER, argv[$NUM], ...);\n      ...\n      printf(..., $BUFFER, ...);\n  - pattern: printf(...,argv[$NUM],...)\n", "failed_tests": ["#include <stdio.h>\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ok: insecure-use-printf-fn\n    sprintf(\"%s\\n\",argv[0])\n}"], "failed_type": "fp", "testsuite_a": "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    strncpy(format, argv[1], 255);\n    char buffer[100];\n    vsprintf (buffer,format, args);\n\n    //ruleid: insecure-use-printf-fn\n    vsprintf(buffer, argv[1], args);\n\n    //ok: insecure-use-printf-fn\n    vsnprintf(buffer, format, args);\n}\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    char buffer[200];\n    sprintf(buffer, format, a, b, c);\n\n\n    char buffer[256];\n    int i = 3;\n    //ruleid: insecure-use-printf-fn\n    sprintf(buffer, argv[2], a, b, c);\n\n    //ok: insecure-use-printf-fn\n    snprintf(buffer, format, a,b,c);\n}\n\nvoid bad_printf() {\n    //ruleid: insecure-use-printf-fn\n    printf(argv[2], 1234);\n\n    char format[300];\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    printf(format, 1234);\n\n    //ok: insecure-use-printf-fn\n    printf(\"hello\");\n}\n\nint main() {\n    bad_vsprintf(NULL);\n    bad_sprintf();\n    bad_printf();\n    return 0;\n}\n", "testsuite_b": "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    strncpy(format, argv[1], 255);\n    char buffer[100];\n    vsprintf (buffer,format, args);\n\n    //ruleid: insecure-use-printf-fn\n    vsprintf(buffer, argv[1], args);\n\n    //ok: insecure-use-printf-fn\n    vsprintf(\"%s\\n\",argv[0])\n\n    //ok: insecure-use-printf-fn\n    vsnprintf(buffer, format, args);\n}\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    char buffer[200];\n    sprintf(buffer, format, a, b, c);\n\n\n    char buffer[256];\n    int i = 3;\n    //ruleid: insecure-use-printf-fn\n    sprintf(buffer, argv[2], a, b, c);\n\n    //ok: insecure-use-printf-fn\n    sprintf(\"%s\\n\",argv[0])\n\n    //ok: insecure-use-printf-fn\n    snprintf(buffer, format, a,b,c);\n}\n\nvoid bad_printf() {\n    //ruleid: insecure-use-printf-fn\n    printf(argv[2], 1234);\n\n    char format[300];\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    printf(format, 1234);\n\n    //ok: insecure-use-printf-fn\n    printf(\"hello\");\n\n    //ok: insecure-use-printf-fn\n    printf(\"%s\\n\",argv[0])\n}\n\nint main() {\n    bad_vsprintf(NULL);\n    bad_sprintf();\n    bad_printf();\n    return 0;\n}\n", "ground_truth": "rules:\n- id: insecure-use-printf-fn\n  message: >-\n    Avoid using user-controlled format strings passed into 'sprintf', 'printf' and\n    'vsprintf'.\n    These functions put you at risk of buffer overflow vulnerabilities through the\n    use of format string exploits.\n    Instead, use 'snprintf' and 'vsnprintf'.\n  metadata:\n    cwe:\n    - 'CWE-134: Use of Externally-Controlled Format String'\n    references:\n    - https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions\n    - https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html\n    category: security\n    technology:\n    - c\n    confidence: MEDIUM\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: HIGH\n  languages: [c]\n  severity: WARNING\n  patterns:\n  - pattern-either:\n    - pattern: |\n        $FUNC($BUFFER, argv[$NUM], ...);\n        ...\n        vsprintf(..., $BUFFER, ...);\n    - pattern: vsprintf(..., argv[$NUM], ...)\n    - pattern: |\n        $FUNC($BUFFER, argv[$NUM], ...);\n        ...\n        sprintf(..., $BUFFER, ...);\n    - pattern: sprintf(...,argv[$NUM],...)\n    - pattern: |\n        $FUNC($BUFFER, argv[$NUM], ...);\n        ...\n        printf(..., $BUFFER, ...);\n    - pattern: printf(...,argv[$NUM],...)\n  - metavariable-comparison:\n      metavariable: $NUM\n      comparison: int($NUM) > 0\n", "rule_path": "extend_dataset/6deeda1f/before/insecure-use-printf-fn.yaml", "test_path": "extend_dataset/6deeda1f/after/insecure-use-printf-fn.c", "category": "historical", "splited_testsuite_b": ["#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    strncpy(format, argv[1], 255);\n    char buffer[100];\n    vsprintf (buffer,format, args);\n}", "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    vsprintf(buffer, argv[1], args);\n}", "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ok: insecure-use-printf-fn\n    vsnprintf(buffer, format, args);\n}", "#include <stdio.h>\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    char buffer[200];\n    sprintf(buffer, format, a, b, c);\n}", "#include <stdio.h>\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    char buffer[256];\n    int i = 3;\n    //ruleid: insecure-use-printf-fn\n    sprintf(buffer, argv[2], a, b, c);\n}", "#include <stdio.h>\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ok: insecure-use-printf-fn\n    snprintf(buffer, format, a,b,c);\n}", "#include <stdio.h>\n\nvoid bad_printf() {\n    //ruleid: insecure-use-printf-fn\n    printf(argv[2], 1234);\n}", "#include <stdio.h>\n\nvoid bad_printf() {\n    char format[300];\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    printf(format, 1234);\n}", "#include <stdio.h>\n\nvoid bad_printf() {\n    //ok: insecure-use-printf-fn\n    printf(\"hello\");\n}", "#include <stdio.h>\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ok: insecure-use-printf-fn\n    sprintf(\"%s\\n\",argv[0])\n}"], "actual": [true, true, false, true, true, false, true, true, false, true], "expected": [true, true, false, true, true, false, true, true, false, false], "index": 9, "commit_message": "Merge pull request #2668 from returntocorp/kb/c-argv-comparison", "commit_date_str": "2023-01-20 16:04:43 -0800", "leaf_count": 6, "line_count": 25}
{"id": "insecure-use-printf-fn", "rule": "rules:\n- id: insecure-use-printf-fn\n  message: >-\n    Avoid using user-controlled format strings passed into 'sprintf', 'printf' and\n    'vsprintf'.\n    These functions put you at risk of buffer overflow vulnerabilities through the\n    use of format string exploits.\n    Instead, use 'snprintf' and 'vsnprintf'.\n  languages: [c]\n  severity: WARNING\n  pattern-either:\n  - pattern: |\n      $FUNC($BUFFER, argv[$NUM], ...);\n      ...\n      vsprintf(..., $BUFFER, ...);\n  - pattern: vsprintf(..., argv[$NUM], ...)\n  - pattern: |\n      $FUNC($BUFFER, argv[$NUM], ...);\n      ...\n      sprintf(..., $BUFFER, ...);\n  - pattern: sprintf(...,argv[$NUM],...)\n  - pattern: |\n      $FUNC($BUFFER, argv[$NUM], ...);\n      ...\n      printf(..., $BUFFER, ...);\n  - pattern: printf(...,argv[$NUM],...)\n", "failed_tests": ["#include <stdio.h>\n\nvoid bad_printf() {\n    //ok: insecure-use-printf-fn\n    printf(\"%s\\n\",argv[0])\n}"], "failed_type": "fp", "testsuite_a": "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    strncpy(format, argv[1], 255);\n    char buffer[100];\n    vsprintf (buffer,format, args);\n\n    //ruleid: insecure-use-printf-fn\n    vsprintf(buffer, argv[1], args);\n\n    //ok: insecure-use-printf-fn\n    vsnprintf(buffer, format, args);\n}\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    char buffer[200];\n    sprintf(buffer, format, a, b, c);\n\n\n    char buffer[256];\n    int i = 3;\n    //ruleid: insecure-use-printf-fn\n    sprintf(buffer, argv[2], a, b, c);\n\n    //ok: insecure-use-printf-fn\n    snprintf(buffer, format, a,b,c);\n}\n\nvoid bad_printf() {\n    //ruleid: insecure-use-printf-fn\n    printf(argv[2], 1234);\n\n    char format[300];\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    printf(format, 1234);\n\n    //ok: insecure-use-printf-fn\n    printf(\"hello\");\n}\n\nint main() {\n    bad_vsprintf(NULL);\n    bad_sprintf();\n    bad_printf();\n    return 0;\n}\n", "testsuite_b": "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    strncpy(format, argv[1], 255);\n    char buffer[100];\n    vsprintf (buffer,format, args);\n\n    //ruleid: insecure-use-printf-fn\n    vsprintf(buffer, argv[1], args);\n\n    //ok: insecure-use-printf-fn\n    vsprintf(\"%s\\n\",argv[0])\n\n    //ok: insecure-use-printf-fn\n    vsnprintf(buffer, format, args);\n}\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    char buffer[200];\n    sprintf(buffer, format, a, b, c);\n\n\n    char buffer[256];\n    int i = 3;\n    //ruleid: insecure-use-printf-fn\n    sprintf(buffer, argv[2], a, b, c);\n\n    //ok: insecure-use-printf-fn\n    sprintf(\"%s\\n\",argv[0])\n\n    //ok: insecure-use-printf-fn\n    snprintf(buffer, format, a,b,c);\n}\n\nvoid bad_printf() {\n    //ruleid: insecure-use-printf-fn\n    printf(argv[2], 1234);\n\n    char format[300];\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    printf(format, 1234);\n\n    //ok: insecure-use-printf-fn\n    printf(\"hello\");\n\n    //ok: insecure-use-printf-fn\n    printf(\"%s\\n\",argv[0])\n}\n\nint main() {\n    bad_vsprintf(NULL);\n    bad_sprintf();\n    bad_printf();\n    return 0;\n}\n", "ground_truth": "rules:\n- id: insecure-use-printf-fn\n  message: >-\n    Avoid using user-controlled format strings passed into 'sprintf', 'printf' and\n    'vsprintf'.\n    These functions put you at risk of buffer overflow vulnerabilities through the\n    use of format string exploits.\n    Instead, use 'snprintf' and 'vsnprintf'.\n  metadata:\n    cwe:\n    - 'CWE-134: Use of Externally-Controlled Format String'\n    references:\n    - https://doc.castsoftware.com/display/SBX/Never+use+sprintf%28%29+or+vsprintf%28%29+functions\n    - https://www.cvedetails.com/cwe-details/134/Uncontrolled-Format-String.html\n    category: security\n    technology:\n    - c\n    confidence: MEDIUM\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: HIGH\n  languages: [c]\n  severity: WARNING\n  patterns:\n  - pattern-either:\n    - pattern: |\n        $FUNC($BUFFER, argv[$NUM], ...);\n        ...\n        vsprintf(..., $BUFFER, ...);\n    - pattern: vsprintf(..., argv[$NUM], ...)\n    - pattern: |\n        $FUNC($BUFFER, argv[$NUM], ...);\n        ...\n        sprintf(..., $BUFFER, ...);\n    - pattern: sprintf(...,argv[$NUM],...)\n    - pattern: |\n        $FUNC($BUFFER, argv[$NUM], ...);\n        ...\n        printf(..., $BUFFER, ...);\n    - pattern: printf(...,argv[$NUM],...)\n  - metavariable-comparison:\n      metavariable: $NUM\n      comparison: int($NUM) > 0\n", "rule_path": "extend_dataset/6deeda1f/before/insecure-use-printf-fn.yaml", "test_path": "extend_dataset/6deeda1f/after/insecure-use-printf-fn.c", "category": "historical", "splited_testsuite_b": ["#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    strncpy(format, argv[1], 255);\n    char buffer[100];\n    vsprintf (buffer,format, args);\n}", "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ruleid: insecure-use-printf-fn\n    vsprintf(buffer, argv[1], args);\n}", "#include <stdio.h>\n\nvoid bad_vsprintf(int argc, char **argv) {\n    char format[256];\n\n    //ok: insecure-use-printf-fn\n    vsnprintf(buffer, format, args);\n}", "#include <stdio.h>\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    char buffer[200];\n    sprintf(buffer, format, a, b, c);\n}", "#include <stdio.h>\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    char buffer[256];\n    int i = 3;\n    //ruleid: insecure-use-printf-fn\n    sprintf(buffer, argv[2], a, b, c);\n}", "#include <stdio.h>\n\nvoid bad_sprintf(int argc, char **argv) {\n    char format[256];\n\n    int a = 10, b = 20, c=30;\n    //ok: insecure-use-printf-fn\n    snprintf(buffer, format, a,b,c);\n}", "#include <stdio.h>\n\nvoid bad_printf() {\n    //ruleid: insecure-use-printf-fn\n    printf(argv[2], 1234);\n}", "#include <stdio.h>\n\nvoid bad_printf() {\n    char format[300];\n    //ruleid: insecure-use-printf-fn\n    strcpy(format, argv[1]);\n    printf(format, 1234);\n}", "#include <stdio.h>\n\nvoid bad_printf() {\n    //ok: insecure-use-printf-fn\n    printf(\"hello\");\n}", "#include <stdio.h>\n\nvoid bad_printf() {\n    //ok: insecure-use-printf-fn\n    printf(\"%s\\n\",argv[0])\n}"], "actual": [true, true, false, true, true, false, true, true, false, true], "expected": [true, true, false, true, true, false, true, true, false, false], "index": 10, "commit_message": "Merge pull request #2668 from returntocorp/kb/c-argv-comparison", "commit_date_str": "2023-01-20 16:04:43 -0800", "leaf_count": 6, "line_count": 25}
{"id": "dangerous-exec-command", "rule": "rules:\n- id: dangerous-exec-command\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            exec.Command($CMD,...)\n        - pattern: |\n            exec.CommandContext($CTX,$CMD,...)\n      - pattern-not: |\n          exec.Command(\"...\",...)\n      - pattern-not: |\n          exec.CommandContext($CTX,\"...\",...)\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            exec.Command(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n        - pattern: |\n            exec.CommandContext($CTX,\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n      - pattern-not: |\n          exec.Command(\"...\",\"...\",\"...\",...)\n      - pattern-not: |\n          exec.CommandContext($CTX,\"...\",\"...\",\"...\",...)\n  - pattern-inside: |\n      import \"os/exec\"\n      ...\n  - pattern-not-inside: |\n      $CMD,$ERR := exec.LookPath(\"...\");\n      ...\n  - pattern-not-inside: |\n      $CMD = \"...\";\n      ...\n  message: >-\n    Detected non-static command inside Command. Audit the input to 'exec.Command'.\n    If unverified user data can reach this call site, this is a code injection\n    vulnerability. A malicious actor can inject a malicious script to execute\n    arbitrary code.\n  severity: ERROR\n  languages: [go]\n", "failed_tests": ["package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runcommand5(s string) (string, error) {\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"/usr/bin/env\", \"bash\", \"-c\", s)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}"], "failed_type": "fn", "testsuite_a": "package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"os/exec\"\n)\n\nfunc runCommand1(userInput string) {\n  // ruleid:dangerous-exec-command\n  cmd := exec.Command( userInput, \"foobar\" )\n\n  cmd.Stdout = os.Stdout\n  cmd.Stderr = os.Stdout\n\n  if err := cmd.Run(); err != nil {\n      fmt.Println( \"Error:\", err )\n  }\n\n}\n\nfunc runCommand2(userInput string) {\n\n    execPath,_ := exec.LookPath(userInput)\n\n    // ruleid:dangerous-exec-command\n    cmd := exec.Command( execPath, \"foobar\" )\n\n    cmd.Stdout = os.Stdout\n    cmd.Stderr = os.Stdout\n\n    if err := cmd.Run(); err != nil {\n        fmt.Println( \"Error:\", err )\n    }\n\n}\n\nfunc runCommand3(userInput string) {\n  ctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n  defer cancel()\n\n  // ruleid:dangerous-exec-command\n  if err := exec.CommandContext(ctx, userInput, \"5\").Run(); err != nil {\n    fmt.Println( \"Error:\", err )\n  }\n\n}\n\nfunc runCommand4(userInput string) {\n\n    // ruleid:dangerous-exec-command\n    cmd := exec.Command( \"bash\", \"-c\", userInput )\n\n    cmd.Stdout = os.Stdout\n    cmd.Stderr = os.Stdout\n\n    if err := cmd.Run(); err != nil {\n        fmt.Println( \"Error:\", err )\n    }\n\n}\n\nfunc okCommand1(userInput string) {\n\n    goExec,_ := exec.LookPath(\"go\")\n\n    // ok:dangerous-exec-command\n    cmd := exec.Command( goExec, \"version\" )\n\n    cmd.Stdout = os.Stdout\n    cmd.Stderr = os.Stdout\n\n    if err := cmd.Run(); err != nil {\n        fmt.Println( \"Error:\", err )\n    }\n\n}\n\nfunc okCommand2(userInput string) {\n    // ok:dangerous-exec-command\n    cmd := exec.Command( \"go\", \"version\" )\n\n    cmd.Stdout = os.Stdout\n    cmd.Stderr = os.Stdout\n\n    if err := cmd.Run(); err != nil {\n        fmt.Println( \"Error:\", err )\n    }\n\n}\n", "testsuite_b": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runCommand1(userInput string) {\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(userInput, \"foobar\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc runCommand2(userInput string) {\n\n\texecPath, _ := exec.LookPath(userInput)\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(execPath, \"foobar\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc runCommand3(userInput string) {\n\tctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n\tdefer cancel()\n\n\t// ruleid:dangerous-exec-command\n\tif err := exec.CommandContext(ctx, userInput, \"5\").Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc runCommand4(userInput string) {\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"bash\", \"-c\", userInput)\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc runcommand5(s string) (string, error) {\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"/usr/bin/env\", \"bash\", \"-c\", s)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}\n\nfunc runcommand6(s string) (string, error) {\n\n\t// might not have user context\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"/bin/env\", \"bash\", \"-c\", s)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}\n\nfunc okCommand1(userInput string) {\n\n\tgoExec, _ := exec.LookPath(\"go\")\n\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(goExec, \"version\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc okCommand2(userInput string) {\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(\"go\", \"version\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc okCommand3(s string) (string, error) {\n\n\tsomeCommand := \"w\"\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(\"/usr/bin/env\", \"bash\", \"-c\", someCommand)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}\n", "ground_truth": "rules:\n- id: dangerous-exec-command\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            exec.Command($CMD,...)\n        - pattern: |\n            exec.CommandContext($CTX,$CMD,...)\n      - pattern-not: |\n          exec.Command(\"...\",...)\n      - pattern-not: |\n          exec.CommandContext($CTX,\"...\",...)\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            exec.Command(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n        - pattern: |\n            exec.CommandContext($CTX,\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n      - pattern-not: |\n          exec.Command(\"...\",\"...\",\"...\",...)\n      - pattern-not: |\n          exec.CommandContext($CTX,\"...\",\"...\",\"...\",...)\n    - pattern-either:\n        - pattern: |\n            exec.Command(\"=~/\\/bin\\/env/\",\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n        - pattern: |\n            exec.CommandContext($CTX,\"=~/bin/env\",\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n  - pattern-inside: |\n      import \"os/exec\"\n      ...\n  - pattern-not-inside: |\n      $CMD,$ERR := exec.LookPath(\"...\");\n      ...\n  - pattern-not-inside: |\n      $CMD = \"...\";\n      ...\n  message: >-\n    Detected non-static command inside Command. Audit the input to 'exec.Command'.\n    If unverified user data can reach this call site, this is a code injection\n    vulnerability. A malicious actor can inject a malicious script to execute\n    arbitrary code.\n  metadata:\n    cwe:\n    - \"CWE-94: Improper Control of Generation of Code ('Code Injection')\"\n    owasp:\n    - A03:2021 - Injection\n    category: security\n    technology:\n    - go\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A03_2021-Injection\n    cwe2022-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n  severity: ERROR\n  languages: [go]\n", "rule_path": "extend_dataset/b87f428e/before/dangerous-exec-command.yaml", "test_path": "extend_dataset/b87f428e/after/dangerous-exec-command.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runCommand1(userInput string) {\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(userInput, \"foobar\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runCommand2(userInput string) {\n\n\texecPath, _ := exec.LookPath(userInput)\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(execPath, \"foobar\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runCommand3(userInput string) {\n\tctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n\tdefer cancel()\n\n\t// ruleid:dangerous-exec-command\n\tif err := exec.CommandContext(ctx, userInput, \"5\").Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runCommand4(userInput string) {\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"bash\", \"-c\", userInput)\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc okCommand1(userInput string) {\n\n\tgoExec, _ := exec.LookPath(\"go\")\n\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(goExec, \"version\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc okCommand2(userInput string) {\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(\"go\", \"version\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc okCommand3(s string) (string, error) {\n\n\tsomeCommand := \"w\"\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(\"/usr/bin/env\", \"bash\", \"-c\", someCommand)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runcommand5(s string) (string, error) {\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"/usr/bin/env\", \"bash\", \"-c\", s)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}"], "actual": [true, true, true, true, false, false, false, false], "expected": [true, true, true, true, false, false, false, true], "index": 11, "commit_message": "support shebang contexts for finding dangerous execs", "commit_date_str": "2022-11-04 14:39:00 -0700", "leaf_count": 11, "line_count": 45}
{"id": "dangerous-exec-command", "rule": "rules:\n- id: dangerous-exec-command\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            exec.Command($CMD,...)\n        - pattern: |\n            exec.CommandContext($CTX,$CMD,...)\n      - pattern-not: |\n          exec.Command(\"...\",...)\n      - pattern-not: |\n          exec.CommandContext($CTX,\"...\",...)\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            exec.Command(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n        - pattern: |\n            exec.CommandContext($CTX,\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n      - pattern-not: |\n          exec.Command(\"...\",\"...\",\"...\",...)\n      - pattern-not: |\n          exec.CommandContext($CTX,\"...\",\"...\",\"...\",...)\n  - pattern-inside: |\n      import \"os/exec\"\n      ...\n  - pattern-not-inside: |\n      $CMD,$ERR := exec.LookPath(\"...\");\n      ...\n  - pattern-not-inside: |\n      $CMD = \"...\";\n      ...\n  message: >-\n    Detected non-static command inside Command. Audit the input to 'exec.Command'.\n    If unverified user data can reach this call site, this is a code injection\n    vulnerability. A malicious actor can inject a malicious script to execute\n    arbitrary code.\n  severity: ERROR\n  languages: [go]\n", "failed_tests": ["package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runcommand6(s string) (string, error) {\n\n\t// might not have user context\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"/bin/env\", \"bash\", \"-c\", s)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}"], "failed_type": "fn", "testsuite_a": "package main\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"os/exec\"\n)\n\nfunc runCommand1(userInput string) {\n  // ruleid:dangerous-exec-command\n  cmd := exec.Command( userInput, \"foobar\" )\n\n  cmd.Stdout = os.Stdout\n  cmd.Stderr = os.Stdout\n\n  if err := cmd.Run(); err != nil {\n      fmt.Println( \"Error:\", err )\n  }\n\n}\n\nfunc runCommand2(userInput string) {\n\n    execPath,_ := exec.LookPath(userInput)\n\n    // ruleid:dangerous-exec-command\n    cmd := exec.Command( execPath, \"foobar\" )\n\n    cmd.Stdout = os.Stdout\n    cmd.Stderr = os.Stdout\n\n    if err := cmd.Run(); err != nil {\n        fmt.Println( \"Error:\", err )\n    }\n\n}\n\nfunc runCommand3(userInput string) {\n  ctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n  defer cancel()\n\n  // ruleid:dangerous-exec-command\n  if err := exec.CommandContext(ctx, userInput, \"5\").Run(); err != nil {\n    fmt.Println( \"Error:\", err )\n  }\n\n}\n\nfunc runCommand4(userInput string) {\n\n    // ruleid:dangerous-exec-command\n    cmd := exec.Command( \"bash\", \"-c\", userInput )\n\n    cmd.Stdout = os.Stdout\n    cmd.Stderr = os.Stdout\n\n    if err := cmd.Run(); err != nil {\n        fmt.Println( \"Error:\", err )\n    }\n\n}\n\nfunc okCommand1(userInput string) {\n\n    goExec,_ := exec.LookPath(\"go\")\n\n    // ok:dangerous-exec-command\n    cmd := exec.Command( goExec, \"version\" )\n\n    cmd.Stdout = os.Stdout\n    cmd.Stderr = os.Stdout\n\n    if err := cmd.Run(); err != nil {\n        fmt.Println( \"Error:\", err )\n    }\n\n}\n\nfunc okCommand2(userInput string) {\n    // ok:dangerous-exec-command\n    cmd := exec.Command( \"go\", \"version\" )\n\n    cmd.Stdout = os.Stdout\n    cmd.Stderr = os.Stdout\n\n    if err := cmd.Run(); err != nil {\n        fmt.Println( \"Error:\", err )\n    }\n\n}\n", "testsuite_b": "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runCommand1(userInput string) {\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(userInput, \"foobar\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc runCommand2(userInput string) {\n\n\texecPath, _ := exec.LookPath(userInput)\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(execPath, \"foobar\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc runCommand3(userInput string) {\n\tctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n\tdefer cancel()\n\n\t// ruleid:dangerous-exec-command\n\tif err := exec.CommandContext(ctx, userInput, \"5\").Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc runCommand4(userInput string) {\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"bash\", \"-c\", userInput)\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc runcommand5(s string) (string, error) {\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"/usr/bin/env\", \"bash\", \"-c\", s)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}\n\nfunc runcommand6(s string) (string, error) {\n\n\t// might not have user context\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"/bin/env\", \"bash\", \"-c\", s)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}\n\nfunc okCommand1(userInput string) {\n\n\tgoExec, _ := exec.LookPath(\"go\")\n\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(goExec, \"version\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc okCommand2(userInput string) {\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(\"go\", \"version\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}\n\nfunc okCommand3(s string) (string, error) {\n\n\tsomeCommand := \"w\"\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(\"/usr/bin/env\", \"bash\", \"-c\", someCommand)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}\n", "ground_truth": "rules:\n- id: dangerous-exec-command\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            exec.Command($CMD,...)\n        - pattern: |\n            exec.CommandContext($CTX,$CMD,...)\n      - pattern-not: |\n          exec.Command(\"...\",...)\n      - pattern-not: |\n          exec.CommandContext($CTX,\"...\",...)\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            exec.Command(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n        - pattern: |\n            exec.CommandContext($CTX,\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n      - pattern-not: |\n          exec.Command(\"...\",\"...\",\"...\",...)\n      - pattern-not: |\n          exec.CommandContext($CTX,\"...\",\"...\",\"...\",...)\n    - pattern-either:\n        - pattern: |\n            exec.Command(\"=~/\\/bin\\/env/\",\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n        - pattern: |\n            exec.CommandContext($CTX,\"=~/bin/env\",\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$CMD,...)\n  - pattern-inside: |\n      import \"os/exec\"\n      ...\n  - pattern-not-inside: |\n      $CMD,$ERR := exec.LookPath(\"...\");\n      ...\n  - pattern-not-inside: |\n      $CMD = \"...\";\n      ...\n  message: >-\n    Detected non-static command inside Command. Audit the input to 'exec.Command'.\n    If unverified user data can reach this call site, this is a code injection\n    vulnerability. A malicious actor can inject a malicious script to execute\n    arbitrary code.\n  metadata:\n    cwe:\n    - \"CWE-94: Improper Control of Generation of Code ('Code Injection')\"\n    owasp:\n    - A03:2021 - Injection\n    category: security\n    technology:\n    - go\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A03_2021-Injection\n    cwe2022-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n  severity: ERROR\n  languages: [go]\n", "rule_path": "extend_dataset/b87f428e/before/dangerous-exec-command.yaml", "test_path": "extend_dataset/b87f428e/after/dangerous-exec-command.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runCommand1(userInput string) {\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(userInput, \"foobar\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runCommand2(userInput string) {\n\n\texecPath, _ := exec.LookPath(userInput)\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(execPath, \"foobar\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runCommand3(userInput string) {\n\tctx, cancel := context.WithTimeout(context.Background(), 100*time.Millisecond)\n\tdefer cancel()\n\n\t// ruleid:dangerous-exec-command\n\tif err := exec.CommandContext(ctx, userInput, \"5\").Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runCommand4(userInput string) {\n\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"bash\", \"-c\", userInput)\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc okCommand1(userInput string) {\n\n\tgoExec, _ := exec.LookPath(\"go\")\n\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(goExec, \"version\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc okCommand2(userInput string) {\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(\"go\", \"version\")\n\n\tcmd.Stdout = os.Stdout\n\tcmd.Stderr = os.Stdout\n\n\tif err := cmd.Run(); err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t}\n\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc okCommand3(s string) (string, error) {\n\n\tsomeCommand := \"w\"\n\t// ok:dangerous-exec-command\n\tcmd := exec.Command(\"/usr/bin/env\", \"bash\", \"-c\", someCommand)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}", "package main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"os\"\n\t\"os/exec\"\n\t\"time\"\n)\n\nfunc runcommand6(s string) (string, error) {\n\n\t// might not have user context\n\t// ruleid:dangerous-exec-command\n\tcmd := exec.Command(\"/bin/env\", \"bash\", \"-c\", s)\n\tstdoutStderr, err := cmd.CombinedOutput()\n\n\tif err != nil {\n\t\treturn \"\", fmt.Errorf(\"shellCommand: unexpected error: out = %s, error = %v\", stdoutStderr, err)\n\t}\n\n\treturn string(stdoutStderr), nil\n}"], "actual": [true, true, true, true, false, false, false, false], "expected": [true, true, true, true, false, false, false, true], "index": 12, "commit_message": "support shebang contexts for finding dangerous execs", "commit_date_str": "2022-11-04 14:39:00 -0700", "leaf_count": 11, "line_count": 45}
{"id": "pg-orm-sqli", "rule": "rules:\n- id: pg-orm-sqli\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern: $DB.$METHOD(...,$QUERY,...)\n      - pattern-either:\n        - pattern-inside: |\n            $QUERY = $X + $Y\n            ...\n        - pattern-inside: |\n            $QUERY += $X\n            ...\n        - pattern-inside: |\n            $QUERY = fmt.Sprintf(\"...\", $PARAM1, ...)\n            ...\n      - pattern-not-inside: |\n          $QUERY += \"...\"\n          ...\n      - pattern-not-inside: |\n          $QUERY = \"...\" + \"...\"\n          ...\n    - pattern: |\n        $DB.$INTFUNC1(...).$METHOD(..., $X + $Y, ...).$INTFUNC2(...)\n    - pattern: |\n        $DB.$METHOD(..., fmt.Sprintf(\"...\", $PARAM1, ...), ...)\n    - pattern-inside: |\n        $DB = pg.Connect(...)\n        ...\n    - pattern-inside: |\n        func $FUNCNAME(..., $DB *pg.DB, ...) {\n          ...\n        }\n  - pattern-not: |\n      $DB.$INTFUNC1(...).$METHOD(..., \"...\" + \"...\", ...).$INTFUNC2(...)\n  - pattern-not: path.Join(...)\n  - metavariable-regex:\n      metavariable: $METHOD\n      regex: ^(Where|WhereOr|Join|GroupExpr|OrderExpr|ColumnExpr)$\n  languages:\n  - go\n  message: >-\n    Detected string concatenation with a non-literal variable in a go-pg ORM\n    SQL statement. This could lead to SQL injection if the variable is user-controlled\n    and not properly sanitized. In order to prevent SQL injection,\n    do not use strings concatenated with user-controlled input.\n    Instead, use parameterized statements.\n  severity: ERROR\n", "failed_tests": ["package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok8() {\n    // ok: pg-orm-sqli\n    filepath.Join(\"foo\", fmt.Sprintf(\"%s.baz\", \"bar\"))\n}"], "failed_type": "fp", "testsuite_a": "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad1() {\n    db := pg.Connect(&pg.Options{\n        Addr:     \":5432\",\n        User:     \"user\",\n        Password: \"pass\",\n        Database: \"db_name\",\n    })\n    query = \"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n        Where(\"id > ?\", 100).\n        WhereOr(query).\n        Limit(1).\n        Select()\n}\n\nfunc bad2() {\n    db := pg.Connect(opt)\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    story := new(Story)\n    // ruleid: pg-orm-sqli\n    err = db.Model(story).\n        Relation(\"Author\").\n        From(\"Hello\").\n        Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n        Select()\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc bad3() {\n   opt, err := pg.ParseURL(\"postgres://user:pass@localhost:5432/db_name\")\n    if err != nil {\n        panic(err)\n    }\n\n    db := pg.Connect(opt)\n\n    query = \"SELECT name FROM users WHERE age=\"\n    query += req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n    Where(query).\n    WhereGroup(func(q *pg.Query) (*pg.Query, error) {\n        q = q.WhereOr(\"id = 1\").\n            WhereOr(\"id = 2\")\n        return q, nil\n    }).\n    Limit(1).\n    Select()\n}\n\nfunc bad4(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    // ruleid: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"author_id\").\n    ColumnExpr(query).\n    Group(\"author_id\").\n    Order(\"book_count DESC\").\n    Select(&res)\n}\n\nfunc bad5(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n    Select()\n}\n\nfunc bad6(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\",    email)).\n    Select()\n}\n\nfunc ok1(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\")\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}\n\nfunc ok2(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\" + \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    ColumnExpr(query).\n    Select()\n}\n\nfunc ok3(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\"\n    query += \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}\n\nfunc ok4(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"id = ?\", 1).\n    Select(&title, &text)\n}\n\nfunc ok5(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + \"3\").\n    Select(&title, &text)\n}\n\nfunc ok6(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model().\n    ColumnExpr(fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\"))\n}\n\nfunc ok7() {\n    // ok: pg-orm-sqli\n    path.Join(\"foo\", fmt.Sprintf(\"%s.baz\", \"bar\"))\n}\n", "testsuite_b": "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad1() {\n    db := pg.Connect(&pg.Options{\n        Addr:     \":5432\",\n        User:     \"user\",\n        Password: \"pass\",\n        Database: \"db_name\",\n    })\n    query = \"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n        Where(\"id > ?\", 100).\n        WhereOr(query).\n        Limit(1).\n        Select()\n}\n\nfunc bad2() {\n    db := pg.Connect(opt)\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    story := new(Story)\n    // ruleid: pg-orm-sqli\n    err = db.Model(story).\n        Relation(\"Author\").\n        From(\"Hello\").\n        Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n        Select()\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc bad3() {\n   opt, err := pg.ParseURL(\"postgres://user:pass@localhost:5432/db_name\")\n    if err != nil {\n        panic(err)\n    }\n\n    db := pg.Connect(opt)\n\n    query = \"SELECT name FROM users WHERE age=\"\n    query += req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n    Where(query).\n    WhereGroup(func(q *pg.Query) (*pg.Query, error) {\n        q = q.WhereOr(\"id = 1\").\n            WhereOr(\"id = 2\")\n        return q, nil\n    }).\n    Limit(1).\n    Select()\n}\n\nfunc bad4(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    // ruleid: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"author_id\").\n    ColumnExpr(query).\n    Group(\"author_id\").\n    Order(\"book_count DESC\").\n    Select(&res)\n}\n\nfunc bad5(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n    Select()\n}\n\nfunc bad6(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\",    email)).\n    Select()\n}\n\nfunc ok1(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\")\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}\n\nfunc ok2(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\" + \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    ColumnExpr(query).\n    Select()\n}\n\nfunc ok3(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\"\n    query += \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}\n\nfunc ok4(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"id = ?\", 1).\n    Select(&title, &text)\n}\n\nfunc ok5(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + \"3\").\n    Select(&title, &text)\n}\n\nfunc ok6(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model().\n    ColumnExpr(fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\"))\n}\n\nfunc ok7() {\n    // ok: pg-orm-sqli\n    path.Join(\"foo\", fmt.Sprintf(\"%s.baz\", \"bar\"))\n}\n\nfunc ok8() {\n    // ok: pg-orm-sqli\n    filepath.Join(\"foo\", fmt.Sprintf(\"%s.baz\", \"bar\"))\n}\n", "ground_truth": "rules:\n  - id: pg-orm-sqli\n    patterns:\n      - pattern-either:\n          - patterns:\n              - pattern: $DB.$METHOD(...,$QUERY,...)\n              - pattern-either:\n                  - pattern-inside: |\n                      $QUERY = $X + $Y\n                      ...\n                  - pattern-inside: |\n                      $QUERY += $X\n                      ...\n                  - pattern-inside: |\n                      $QUERY = fmt.Sprintf(\"...\", $PARAM1, ...)\n                      ...\n              - pattern-not-inside: |\n                  $QUERY += \"...\"\n                  ...\n              - pattern-not-inside: |\n                  $QUERY = \"...\" + \"...\"\n                  ...\n          - pattern: |\n              $DB.$INTFUNC1(...).$METHOD(..., $X + $Y, ...).$INTFUNC2(...)\n          - pattern: |\n              $DB.$METHOD(..., fmt.Sprintf(\"...\", $PARAM1, ...), ...)\n          - pattern-inside: |\n              $DB = pg.Connect(...)\n              ...\n          - pattern-inside: |\n              func $FUNCNAME(..., $DB *pg.DB, ...) {\n                ...\n              }\n      - pattern-not: |\n          $DB.$INTFUNC1(...).$METHOD(..., \"...\" + \"...\", ...).$INTFUNC2(...)\n      - pattern-not: path.Join(...)\n      - pattern-not: filepath.Join(...)\n      - metavariable-regex:\n          metavariable: $METHOD\n          regex: ^(Where|WhereOr|Join|GroupExpr|OrderExpr|ColumnExpr)$\n    languages:\n      - go\n    message: >-\n      Detected string concatenation with a non-literal variable in a go-pg ORM\n      SQL statement. This could lead to SQL injection if the variable is user-controlled\n      and not properly sanitized. In order to prevent SQL injection,\n      do not use strings concatenated with user-controlled input.\n      Instead, use parameterized statements.\n    metadata:\n      references:\n        - https://pg.uptrace.dev/queries/\n      category: security\n      technology:\n        - go-pg\n      confidence: MEDIUM\n    severity: ERROR\n", "rule_path": "extend_dataset/b0f2fc95/before/pg-orm-sqli.yaml", "test_path": "extend_dataset/b0f2fc95/after/pg-orm-sqli.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad1() {\n    db := pg.Connect(&pg.Options{\n        Addr:     \":5432\",\n        User:     \"user\",\n        Password: \"pass\",\n        Database: \"db_name\",\n    })\n    query = \"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n        Where(\"id > ?\", 100).\n        WhereOr(query).\n        Limit(1).\n        Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad2() {\n    db := pg.Connect(opt)\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    story := new(Story)\n    // ruleid: pg-orm-sqli\n    err = db.Model(story).\n        Relation(\"Author\").\n        From(\"Hello\").\n        Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n        Select()\n    if err != nil {\n        panic(err)\n    }\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad3() {\n   opt, err := pg.ParseURL(\"postgres://user:pass@localhost:5432/db_name\")\n    if err != nil {\n        panic(err)\n    }\n\n    db := pg.Connect(opt)\n\n    query = \"SELECT name FROM users WHERE age=\"\n    query += req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n    Where(query).\n    WhereGroup(func(q *pg.Query) (*pg.Query, error) {\n        q = q.WhereOr(\"id = 1\").\n            WhereOr(\"id = 2\")\n        return q, nil\n    }).\n    Limit(1).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad4(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    // ruleid: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"author_id\").\n    ColumnExpr(query).\n    Group(\"author_id\").\n    Order(\"book_count DESC\").\n    Select(&res)\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad5(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad6(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\",    email)).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok1(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\")\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok2(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\" + \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    ColumnExpr(query).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok3(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\"\n    query += \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok4(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"id = ?\", 1).\n    Select(&title, &text)\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok5(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + \"3\").\n    Select(&title, &text)\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok6(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model().\n    ColumnExpr(fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\"))\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok7() {\n    // ok: pg-orm-sqli\n    path.Join(\"foo\", fmt.Sprintf(\"%s.baz\", \"bar\"))\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok8() {\n    // ok: pg-orm-sqli\n    filepath.Join(\"foo\", fmt.Sprintf(\"%s.baz\", \"bar\"))\n}"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false, false], "index": 13, "commit_message": "fixed false positive for filepath.Join (#1909)", "commit_date_str": "2022-03-24 12:08:51 -0500", "leaf_count": 14, "line_count": 49}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: \n      ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):(?![\\x{2022}*]+?@)([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ok: detected-username-and-password-in-uri\nhttps://docker.ouroath.com:4443/paranoids/cameo@sha256:35f1ea3d0ae9dc9b058dd8d224f1bb7e053bc58615778f9317c27b73c86dd806"], "failed_type": "fp", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:***@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:passworD123*@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*D12@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:************@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:Sample%password12@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka-chakkaf:chakkA12+@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://username:f12*Password@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplEpassword12*@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user123:Password12^@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user123:passworD0+@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user123:passw0rD1&@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user123:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwdTest123+@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nhttps://docker.ouroath.com:4443/paranoids/cameo@sha256:35f1ea3d0ae9dc9b058dd8d224f1bb7e053bc58615778f9317c27b73c86dd806\n\n# ok: detected-username-and-password-in-uri\n[https://npm.vzbuilders.com/-/icon/@vzmi/navrail-utils/latest](http://npm.vzbuilders.com/-/package/@vzmi/navrail-utils)\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern: $PROTOCOL://$...USERNAME:$...PASSWORD@$END\n  - metavariable-regex:\n      metavariable: $...USERNAME\n      regex: ({?)([A-Za-z])([A-Za-z0-9_-]){5,31}(}?) #username must start with alphabet letters, be between 6-32 chars of alphanumeric/underscore/dash. Can optionally be surrounded by brackets\n  - metavariable-regex:\n      metavariable: $...PASSWORD\n      regex: (?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]){6,32} #password must have at least one number, one uppercase letter, one 'special character' defined by OWASP, be between 6-32 chars\n  - metavariable-regex:\n      metavariable: $PROTOCOL\n      regex: (.*http.*)|(.*sql.*)|(.*ftp.*)|(.*smtp.*)\n  languages:\n  - generic\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    owasp:\n    - A05:2021 - Security Misconfiguration\n    cwe: \"CWE-798: Use of Hard-coded Credentials\"\n    references:\n    - https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/93c13f90/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/93c13f90/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:passworD123*@example.com", "# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*D12@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ok: detected-username-and-password-in-uri\nhttps://username:************@example.com", "# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com", "# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:Sample%password12@merchantdb/collection", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka-chakkaf:chakkA12+@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\nsamp=http://username:f12*Password@totalsuccess@megafailure/yourname", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplEpassword12*@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user123:Password12^@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user123:passworD0+@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user123:passw0rD1&@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ok: detected-username-and-password-in-uri\nf\"https://user123:{_github_pat(github_secret_name)}@github.com/\"", "# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"", "# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwdTest123+@github.com/\"", "# ok: detected-username-and-password-in-uri\nhttps://docker.ouroath.com:4443/paranoids/cameo@sha256:35f1ea3d0ae9dc9b058dd8d224f1bb7e053bc58615778f9317c27b73c86dd806"], "actual": [true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true], "expected": [true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false], "index": 14, "commit_message": "Merge pull request #2206 from returntocorp/edit-uri-rule", "commit_date_str": "2022-07-08 11:05:48 -0700", "leaf_count": 1, "line_count": 2}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: \n      ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):(?![\\x{2022}*]+?@)([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ok: detected-username-and-password-in-uri\n[https://npm.vzbuilders.com/-/icon/@vzmi/navrail-utils/latest](http://npm.vzbuilders.com/-/package/@vzmi/navrail-utils)"], "failed_type": "fp", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:***@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:passworD123*@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*D12@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:************@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:Sample%password12@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka-chakkaf:chakkA12+@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://username:f12*Password@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplEpassword12*@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user123:Password12^@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user123:passworD0+@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user123:passw0rD1&@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user123:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwdTest123+@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nhttps://docker.ouroath.com:4443/paranoids/cameo@sha256:35f1ea3d0ae9dc9b058dd8d224f1bb7e053bc58615778f9317c27b73c86dd806\n\n# ok: detected-username-and-password-in-uri\n[https://npm.vzbuilders.com/-/icon/@vzmi/navrail-utils/latest](http://npm.vzbuilders.com/-/package/@vzmi/navrail-utils)\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern: $PROTOCOL://$...USERNAME:$...PASSWORD@$END\n  - metavariable-regex:\n      metavariable: $...USERNAME\n      regex: ({?)([A-Za-z])([A-Za-z0-9_-]){5,31}(}?) #username must start with alphabet letters, be between 6-32 chars of alphanumeric/underscore/dash. Can optionally be surrounded by brackets\n  - metavariable-regex:\n      metavariable: $...PASSWORD\n      regex: (?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]){6,32} #password must have at least one number, one uppercase letter, one 'special character' defined by OWASP, be between 6-32 chars\n  - metavariable-regex:\n      metavariable: $PROTOCOL\n      regex: (.*http.*)|(.*sql.*)|(.*ftp.*)|(.*smtp.*)\n  languages:\n  - generic\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    owasp:\n    - A05:2021 - Security Misconfiguration\n    cwe: \"CWE-798: Use of Hard-coded Credentials\"\n    references:\n    - https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/93c13f90/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/93c13f90/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:passworD123*@example.com", "# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*D12@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ok: detected-username-and-password-in-uri\nhttps://username:************@example.com", "# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com", "# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:Sample%password12@merchantdb/collection", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka-chakkaf:chakkA12+@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\nsamp=http://username:f12*Password@totalsuccess@megafailure/yourname", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplEpassword12*@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user123:Password12^@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user123:passworD0+@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user123:passw0rD1&@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ok: detected-username-and-password-in-uri\nf\"https://user123:{_github_pat(github_secret_name)}@github.com/\"", "# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"", "# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwdTest123+@github.com/\"", "# ok: detected-username-and-password-in-uri\n[https://npm.vzbuilders.com/-/icon/@vzmi/navrail-utils/latest](http://npm.vzbuilders.com/-/package/@vzmi/navrail-utils)"], "actual": [true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true], "expected": [true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false], "index": 15, "commit_message": "Merge pull request #2206 from returntocorp/edit-uri-rule", "commit_date_str": "2022-07-08 11:05:48 -0700", "leaf_count": 1, "line_count": 2}
{"id": "pprof", "rule": "rules:\n- id: pprof-debug-exposure\n  message: >-\n    The profiling 'pprof' endpoint is automatically exposed on /debug/pprof.\n    This could leak information about the server.\n    Instead, use `import \"net/http/pprof\"`. See\n    https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/\n    for more information and mitigation.\n  languages: [go]\n  severity: WARNING\n  patterns:\n  - pattern-inside: |\n      import _ \"net/http/pprof\"\n      ...\n  - pattern-inside: |\n      func $ANY(...) {\n        ...\n      }\n  - pattern-not: http.ListenAndServe(\"=~/^localhost.*/\", ...)\n  - pattern-not: http.ListenAndServe(\"=~/^127[.]0[.]0[.]1.*/\", ...)\n  - pattern: http.ListenAndServe(...)\n", "failed_tests": ["package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t_ \"net/http/pprof\"\n)\n\nfunc ok3() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n\n\tmux := http.NewServeMux()\n    // ok: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\":8080\", mux))\n}"], "failed_type": "fp", "testsuite_a": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t_ \"net/http/pprof\"\n)\n\nfunc ok() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n    // ok: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\"localhost:8080\", nil))\n}\n\nfunc ok2() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n    // ok: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\"127.0.0.1:8080\", nil))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n    // ruleid: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n", "testsuite_b": "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t_ \"net/http/pprof\"\n)\n\nfunc ok() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n    // ok: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\"localhost:8080\", nil))\n}\n\nfunc ok2() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n    // ok: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\"127.0.0.1:8080\", nil))\n}\n\nfunc ok3() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n\n\tmux := http.NewServeMux()\n    // ok: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\":8080\", mux))\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n    // ruleid: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n", "ground_truth": "rules:\n- id: pprof-debug-exposure\n  metadata:\n    cwe: 'CWE-489: Active Debug Code'\n    owasp: 'A6: Security Misconfiguration'\n    source-rule-url: https://github.com/securego/gosec#available-rules\n    references:\n    - https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/\n    category: security\n    technology:\n    - go\n  message: >-\n    The profiling 'pprof' endpoint is automatically exposed on /debug/pprof.\n    This could leak information about the server.\n    Instead, use `import \"net/http/pprof\"`. See\n    https://www.farsightsecurity.com/blog/txt-record/go-remote-profiling-20161028/\n    for more information and mitigation.\n  languages: [go]\n  severity: WARNING\n  patterns:\n  - pattern-inside: |\n      import _ \"net/http/pprof\"\n      ...\n  - pattern-inside: |\n      func $ANY(...) {\n        ...\n      }\n  - pattern-not-inside: |\n      $MUX = http.NewServeMux(...)\n      ...\n      http.ListenAndServe($ADDR, $MUX)\n  - pattern-not: http.ListenAndServe(\"=~/^localhost.*/\", ...)\n  - pattern-not: http.ListenAndServe(\"=~/^127[.]0[.]0[.]1.*/\", ...)\n  - pattern: http.ListenAndServe(...)\n", "rule_path": "extend_dataset/f826d467/before/pprof.yaml", "test_path": "extend_dataset/f826d467/after/pprof.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t_ \"net/http/pprof\"\n)\n\nfunc ok() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n    // ok: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\"localhost:8080\", nil))\n}", "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t_ \"net/http/pprof\"\n)\n\nfunc ok2() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n    // ok: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\"127.0.0.1:8080\", nil))\n}", "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t_ \"net/http/pprof\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n    // ruleid: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\":8080\", nil))\n}", "package main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\n\t_ \"net/http/pprof\"\n)\n\nfunc ok3() {\n\thttp.HandleFunc(\"/\", func(w http.ResponseWriter, r *http.Request) {\n\t\tfmt.Fprintf(w, \"Hello World!\")\n\t})\n\n\tmux := http.NewServeMux()\n    // ok: pprof-debug-exposure\n\tlog.Fatal(http.ListenAndServe(\":8080\", mux))\n}"], "actual": [false, false, true, true], "expected": [false, false, true, false], "index": 16, "commit_message": "Fix pprof (#1544)", "commit_date_str": "2021-11-03 11:25:29 -0700", "leaf_count": 5, "line_count": 10}
{"id": "string-formatted-query", "rule": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  patterns:\n  - pattern-either:\n    - pattern: $OBJ.Exec(\"...\" + $X)\n    - pattern: $OBJ.ExecContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Query(\"...\" + $X)\n    - pattern: $OBJ.QueryContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRow(\"...\" + $X)\n    - pattern: $OBJ.QueryRow($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRowContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "failed_tests": ["package main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, \" +\n    \" description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status)\" +\n    \" value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}"], "failed_type": "fp", "testsuite_a": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQuery(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\n\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n", "testsuite_b": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQuery(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\n\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\npackage main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, \" +\n    \" description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status)\" +\n    \" value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n\nfunc new2() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status) value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n", "ground_truth": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    source-rule-url: https://github.com/securego/gosec\n  patterns:\n  - pattern-not-inside: |\n      $VAR = \"...\" + \"...\"\n      ...\n      $OBJ.$SINK(..., $VAR, ...)\n  - pattern-either:\n    - pattern: $OBJ.Exec(\"...\" + $X)\n    - pattern: $OBJ.ExecContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Query(\"...\" + $X)\n    - pattern: $OBJ.QueryContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRow(\"...\" + $X)\n    - pattern: $OBJ.QueryRow($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRowContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "rule_path": "extend_dataset/828c1750/before/string-formatted-query.yaml", "test_path": "extend_dataset/828c1750/after/string-formatted-query.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}", "package main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new2() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status) value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}", "package main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, \" +\n    \" description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status)\" +\n    \" value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}"], "actual": [true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false, true], "expected": [true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false, false], "index": 17, "commit_message": "Filter string concat query when it's only string literals (#1250)", "commit_date_str": "2021-04-20 16:33:58 +0000", "leaf_count": 35, "line_count": 219}
{"id": "jwt-decode-without-verify", "rule": "rules:\n- id: jwt-decode-without-verify\n  message: >-\n    Detected the decoding of a JWT token without a verify step.\n    JWT tokens must be verified before use, otherwise the token's\n    integrity is unknown. This means a malicious actor could forge\n    a JWT token with any claims. Call '.verify()' before using the token.\n  languages: [javascript, typescript]\n  severity: WARNING\n  patterns:\n  - pattern-inside: |\n      $JWT = require('jsonwebtoken');\n      ...\n  - pattern-not-inside: |\n      $JWT.verify($TOKEN, ...)\n      ...\n  - pattern: $JWT.decode($TOKEN, ...)\n", "failed_tests": ["const jwt = require('jsonwebtoken');\n\nconst ok2 = (token, key) => {\n  // ok: jwt-decode-without-verify\n  const value = jwt.decode(token, key).param;\n  if (jwt.verify(token, true).param === true) {\n    console.log('token is valid');\n  }\n};"], "failed_type": "fp", "testsuite_a": "const { ok } = require('assert');\nconst jwt = require('jsonwebtoken');\n\n// ruleid: jwt-decode-without-verify\nif (jwt.decode(token, true).param === true) {\n  console.log('token is valid');\n}\n\nfunction ok(token, key) {\n  // ok: jwt-decode-without-verify\n  jwt.verify(token, key);\n  if (jwt.decode(token, true).param === true) {\n    console.log('token is valid');\n  }\n}\n\nconst ok2 = (token, key) => {\n  // ok: jwt-decode-without-verify\n  jwt.verify(token, key);\n  if (jwt.decode(token, true).param === true) {\n    console.log('token is valid');\n  }\n};\n", "testsuite_b": "const jwt = require('jsonwebtoken');\n\nfunction notOk(token) {\n  // ruleid: jwt-decode-without-verify\n  if (jwt.decode(token, true).param === true) {\n    console.log('token is valid');\n  }\n}\n\nfunction ok(token, key) {\n  // ok: jwt-decode-without-verify\n  jwt.verify(token, key);\n  if (jwt.decode(token, true).param === true) {\n    console.log('token is valid');\n  }\n}\n\nconst ok2 = (token, key) => {\n  // ok: jwt-decode-without-verify\n  const value = jwt.decode(token, key).param;\n  if (jwt.verify(token, true).param === true) {\n    console.log('token is valid');\n  }\n};\n", "ground_truth": "rules:\n- id: jwt-decode-without-verify\n  message: >-\n    Detected the decoding of a JWT token without a verify step.\n    JWT tokens must be verified before use, otherwise the token's\n    integrity is unknown. This means a malicious actor could forge\n    a JWT token with any claims. Call '.verify()' before using the token.\n  metadata:\n    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'\n    owasp: 'A2: Broken Authentication'\n    source-rule-url: https://r2c.dev/blog/2020/hardcoded-secrets-unverified-tokens-and-other-common-jwt-mistakes/\n    asvs:\n      section: 'V3: Session Management Verification Requirements'\n      control_id: 3.5.3 Insecue Stateless Session Tokens\n      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v35-token-based-session-management\n      version: '4'\n    category: security\n    technology:\n    - jwt\n  languages: [javascript, typescript]\n  severity: WARNING\n  patterns:\n  - pattern-inside: |\n      $JWT = require('jsonwebtoken');\n      ...\n  - pattern-not-inside: | # nosemgrep: slow-pattern-top-ellipsis\n      ...\n      $JWT.verify($TOKEN, ...)\n      ...\n  - pattern-not-inside: | # nosemgrep: slow-pattern-top-ellipsis\n      ...\n      if (<... $JWT.verify($TOKEN, ...) ...>) { ... }\n      ...\n  - pattern: $JWT.decode($TOKEN, ...)\n", "rule_path": "extend_dataset/e674fe96/before/jwt-decode-without-verify.yaml", "test_path": "extend_dataset/e674fe96/after/jwt-decode-without-verify.js", "category": "historical", "splited_testsuite_b": ["const jwt = require('jsonwebtoken');\n\nfunction notOk(token) {\n  // ruleid: jwt-decode-without-verify\n  if (jwt.decode(token, true).param === true) {\n    console.log('token is valid');\n  }\n}", "const jwt = require('jsonwebtoken');\n\nfunction ok(token, key) {\n  // ok: jwt-decode-without-verify\n  jwt.verify(token, key);\n  if (jwt.decode(token, true).param === true) {\n    console.log('token is valid');\n  }\n}", "const jwt = require('jsonwebtoken');\n\nconst ok2 = (token, key) => {\n  // ok: jwt-decode-without-verify\n  const value = jwt.decode(token, key).param;\n  if (jwt.verify(token, true).param === true) {\n    console.log('token is valid');\n  }\n};"], "actual": [true, false, true], "expected": [true, false, false], "index": 18, "commit_message": "update jwt-decode-without-verify rule (#1518)", "commit_date_str": "2021-10-08 00:17:45 -0500", "leaf_count": 3, "line_count": 12}
{"id": "missing-integrity", "rule": "rules:\n- id: missing-integrity\n  patterns:\n  - pattern-either:\n    - pattern: <script ... src= \"http:// ... \" > ... </script>\n    - pattern: <script ... src= \"https:// ... \" > ... </script>\n    - pattern: <script ... src= 'http:// ... ' > ... </script>\n    - pattern: <script ... src= 'https:// ... ' > ... </script>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"http:// ... \" ...>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"https:// ... \" ...>\n    - pattern: <link ... rel='stylesheet' ... href='http:// ... ' ...>\n    - pattern: <link ... rel='stylesheet' ... href='https:// ... ' ...>\n    - pattern: <link ... href=\"http:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href=\"https:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href='http:// ... ' ... rel='stylesheet' ...>\n    - pattern: <link ... href='https:// ... ' ... rel='stylesheet' ...>\n  - pattern-not: <script ... integrity= ...> ... </script>\n  - pattern-not: <link ... integrity= ...>\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute.\n    The 'integrity' attribute allows for the browser to verify that externally hosted\n    files (for example\n    from a CDN)\n    are delivered without unexpected manipulation. Without this attribute, if an attacker\n    can modify the\n    externally\n    hosted resource, this could lead to XSS and other types of attacks. To prevent\n    this, include the base64-encoded\n    cryptographic hash of the resource (file) you\u2019re telling the browser to fetch\n    in the 'integrity' attribute\n    for\n    all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n</head>\n<body>\n\n</body>\n</html>"], "failed_type": "fp", "testsuite_a": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>\n", "testsuite_b": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>\n", "ground_truth": "rules:\n- id: missing-integrity\n  metadata:\n    category: security\n    technology:\n    - html\n    cwe:\n    - 'CWE-353: Missing Support for Integrity Check'\n    owasp:\n    - A08:2021 - Software and Data Integrity Failures\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n  patterns:\n  - pattern-either:\n    - pattern: <script ... src= \"http:// ... \" > ... </script>\n    - pattern: <script ... src= \"https:// ... \" > ... </script>\n    - pattern: <script ... src= 'http:// ... ' > ... </script>\n    - pattern: <script ... src= 'https:// ... ' > ... </script>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"http:// ... \" ...>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"https:// ... \" ...>\n    - pattern: <link ... rel='stylesheet' ... href='http:// ... ' ...>\n    - pattern: <link ... rel='stylesheet' ... href='https:// ... ' ...>\n    - pattern: <link ... href=\"http:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href=\"https:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href='http:// ... ' ... rel='stylesheet' ...>\n    - pattern: <link ... href='https:// ... ' ... rel='stylesheet' ...>\n  - pattern-not: <script ... integrity= ...> ... </script>\n  - pattern-not: <link ... integrity= ...>\n  - pattern-not: <script ... src=\"... googletagmanager.com ...\" > ... </script>\n  - pattern-not: <link ... href=\"... fonts.googleapis.com ...\" >\n  paths:\n    include:\n    - '*.html'\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute.\n    The 'integrity' attribute allows for the browser to verify that externally hosted files (for example\n    from a CDN)\n    are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the\n    externally\n    hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded\n    cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute\n    for\n    all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "rule_path": "extend_dataset/70e94ea4/before/missing-integrity.yaml", "test_path": "extend_dataset/70e94ea4/after/missing-integrity.html", "category": "historical", "splited_testsuite_b": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n</head>\n<body>\n\n</body>\n</html>"], "actual": [true, false, false, false, true, false, false, true], "expected": [true, false, false, false, true, false, false, false], "index": 19, "commit_message": "add googleapis and fonts", "commit_date_str": "2022-10-24 12:29:07 -0700", "leaf_count": 14, "line_count": 16}
{"id": "missing-integrity", "rule": "rules:\n- id: missing-integrity\n  patterns:\n  - pattern-either:\n    - pattern: <script ... src= \"http:// ... \" > ... </script>\n    - pattern: <script ... src= \"https:// ... \" > ... </script>\n    - pattern: <script ... src= 'http:// ... ' > ... </script>\n    - pattern: <script ... src= 'https:// ... ' > ... </script>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"http:// ... \" ...>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"https:// ... \" ...>\n    - pattern: <link ... rel='stylesheet' ... href='http:// ... ' ...>\n    - pattern: <link ... rel='stylesheet' ... href='https:// ... ' ...>\n    - pattern: <link ... href=\"http:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href=\"https:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href='http:// ... ' ... rel='stylesheet' ...>\n    - pattern: <link ... href='https:// ... ' ... rel='stylesheet' ...>\n  - pattern-not: <script ... integrity= ...> ... </script>\n  - pattern-not: <link ... integrity= ...>\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute.\n    The 'integrity' attribute allows for the browser to verify that externally hosted\n    files (for example\n    from a CDN)\n    are delivered without unexpected manipulation. Without this attribute, if an attacker\n    can modify the\n    externally\n    hosted resource, this could lead to XSS and other types of attacks. To prevent\n    this, include the base64-encoded\n    cryptographic hash of the resource (file) you\u2019re telling the browser to fetch\n    in the 'integrity' attribute\n    for\n    all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>"], "failed_type": "fp", "testsuite_a": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>\n", "testsuite_b": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>\n", "ground_truth": "rules:\n- id: missing-integrity\n  metadata:\n    category: security\n    technology:\n    - html\n    cwe:\n    - 'CWE-353: Missing Support for Integrity Check'\n    owasp:\n    - A08:2021 - Software and Data Integrity Failures\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n  patterns:\n  - pattern-either:\n    - pattern: <script ... src= \"http:// ... \" > ... </script>\n    - pattern: <script ... src= \"https:// ... \" > ... </script>\n    - pattern: <script ... src= 'http:// ... ' > ... </script>\n    - pattern: <script ... src= 'https:// ... ' > ... </script>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"http:// ... \" ...>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"https:// ... \" ...>\n    - pattern: <link ... rel='stylesheet' ... href='http:// ... ' ...>\n    - pattern: <link ... rel='stylesheet' ... href='https:// ... ' ...>\n    - pattern: <link ... href=\"http:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href=\"https:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href='http:// ... ' ... rel='stylesheet' ...>\n    - pattern: <link ... href='https:// ... ' ... rel='stylesheet' ...>\n  - pattern-not: <script ... integrity= ...> ... </script>\n  - pattern-not: <link ... integrity= ...>\n  - pattern-not: <script ... src=\"... googletagmanager.com ...\" > ... </script>\n  - pattern-not: <link ... href=\"... fonts.googleapis.com ...\" >\n  paths:\n    include:\n    - '*.html'\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute.\n    The 'integrity' attribute allows for the browser to verify that externally hosted files (for example\n    from a CDN)\n    are delivered without unexpected manipulation. Without this attribute, if an attacker can modify the\n    externally\n    hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the base64-encoded\n    cryptographic hash of the resource (file) you\u2019re telling the browser to fetch in the 'integrity' attribute\n    for\n    all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "rule_path": "extend_dataset/70e94ea4/before/missing-integrity.yaml", "test_path": "extend_dataset/70e94ea4/after/missing-integrity.html", "category": "historical", "splited_testsuite_b": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>"], "actual": [true, false, false, false, true, false, false, true], "expected": [true, false, false, false, true, false, false, false], "index": 20, "commit_message": "add googleapis and fonts", "commit_date_str": "2022-10-24 12:29:07 -0700", "leaf_count": 14, "line_count": 16}
{"id": "open-redirect", "rule": "rules:\n- id: open-redirect\n  patterns:\n  - pattern-inside: |\n      @$APP.route(...)\n      def $X():\n        ...\n  - pattern-not-inside: |\n      ...\n      if <... werkzeug.urls.url_parse($V) ...>:\n        ...\n  - pattern-either:\n    - pattern: flask.redirect(<... flask.request.$W.get(...) ...>, ...)\n    - pattern: flask.redirect(<... flask.request.$W[...] ...>, ...)\n    - pattern: flask.redirect(<... flask.request.$W(...) ...>, ...)\n    - pattern: flask.redirect(<... flask.request.$W ...>, ...)\n    - pattern: |\n        $V = flask.request.$W.get(...)\n        ...\n        flask.redirect($V, ...)\n    - pattern: |\n        $V = flask.request.$W[...]\n        ...\n        flask.redirect($V, ...)\n    - pattern: |\n        $V = flask.request.$W(...)\n        ...\n        flask.redirect($V, ...)\n    - pattern: |\n        $V = flask.request.$W\n        ...\n        flask.redirect($V, ...)\n  message: |\n    Data from request is passed to redirect().\n    This is an open redirect and could be exploited.\n    See https://cwe.mitre.org/data/definitions/601.html\n  languages: [python]\n  severity: ERROR\n", "failed_tests": ["```python\nfrom flask import request, redirect\n\n# cf. https://github.com/mideind/Netskrafl/blob/2e1933ad0710a4425c319fde3b92b2a70729ed80/netskrafl.py#L1712\n@app.route(\"/userprefs\", methods=[\"GET\", \"POST\"])\n@auth_required()\ndef userprefs():\n    \"\"\" Handler for the user preferences page \"\"\"\n\n    user = current_user()\n\n    uf = UserForm()\n    err = dict()\n\n    # The URL to go back to, if not main.html\n    # ruleid: open-redirect\n    from_url = request.args.get(\"from\", None)\n\n    if request.method == \"GET\":\n        # Entering the form for the first time: load the user data\n        uf.init_from_user(user)\n    elif request.method == \"POST\":\n        # Attempting to submit modified data: retrieve it and validate\n        uf.init_from_form(request.form)\n        err = uf.validate()\n        if not err:\n            # All is fine: store the data back in the user entity\n            uf.store(user)\n            return redirect(from_url or url_for(\"main\"))\n\n    # Render the form with the current data and error messages, if any\n    return render_template(\"userprefs.html\", uf=uf, err=err, from_url=from_url)\n```"], "failed_type": "fn", "testsuite_a": "from flask import Flask, redirect, request, url_for\nfrom werkzeug.urls import url_parse\n\napp = Flask(__name__)\n\n@app.route(\"open_redirect/\")\ndef open_redirect():\n    # ruleid: open-redirect\n    url = request.args.get(\"url\")\n    print(\"something\")\n    return redirect(url)\n\n@app.route(\"not_open_redirect/\")\ndef not_open_redirect():\n    # ok\n    url = \"/about/\"\n    return redirect(url)\n\n@app.route(\"filter\")\ndef filter():\n    # ok\n    next_page = request.args.get('next')\n    if not next_page or url_parse(next_page).netloc != '':\n        next_page = url_for('main.index')\n    return redirect(next_page)", "testsuite_b": "from flask import Flask, redirect, request, url_for\nfrom werkzeug.urls import url_parse\n\napp = Flask(__name__)\n\n@app.route(\"open_redirect/\")\ndef open_redirect():\n    # ruleid: open-redirect\n    url = request.args.get(\"url\")\n    print(\"something\")\n    return redirect(url)\n\n@app.route(\"not_open_redirect/\")\ndef not_open_redirect():\n    # ok\n    url = \"/about/\"\n    return redirect(url)\n\n@app.route(\"filter\")\ndef filter():\n    # ok\n    next_page = request.args.get('next')\n    if not next_page or url_parse(next_page).netloc != '':\n        next_page = url_for('main.index')\n    return redirect(next_page)\n\nfrom flask import request, redirect\n\n# cf. https://github.com/mideind/Netskrafl/blob/2e1933ad0710a4425c319fde3b92b2a70729ed80/netskrafl.py#L1712\n@app.route(\"/userprefs\", methods=[\"GET\", \"POST\"])\n@auth_required()\ndef userprefs():\n    \"\"\" Handler for the user preferences page \"\"\"\n\n    user = current_user()\n\n    uf = UserForm()\n    err = dict()\n\n    # The URL to go back to, if not main.html\n    # ruleid: open-redirect\n    from_url = request.args.get(\"from\", None)\n\n    if request.method == \"GET\":\n        # Entering the form for the first time: load the user data\n        uf.init_from_user(user)\n    elif request.method == \"POST\":\n        # Attempting to submit modified data: retrieve it and validate\n        uf.init_from_form(request.form)\n        err = uf.validate()\n        if not err:\n            # All is fine: store the data back in the user entity\n            uf.store(user)\n            return redirect(from_url or url_for(\"main\"))\n\n    # Render the form with the current data and error messages, if any\n    return render_template(\"userprefs.html\", uf=uf, err=err, from_url=from_url)\n", "ground_truth": "rules:\n- id: open-redirect\n  patterns:\n  - pattern-inside: |\n      @$APP.route(...)\n      def $X():\n        ...\n  - pattern-not-inside: |\n      ...\n      if <... werkzeug.urls.url_parse($V) ...>:\n        ...\n  - pattern-either:\n    - pattern: flask.redirect(<... flask.request.$W.get(...) ...>, ...)\n    - pattern: flask.redirect(<... flask.request.$W[...] ...>, ...)\n    - pattern: flask.redirect(<... flask.request.$W(...) ...>, ...)\n    - pattern: flask.redirect(<... flask.request.$W ...>, ...)\n    - pattern: |\n        $V = flask.request.$W.get(...)\n        ...\n        flask.redirect(<... $V ...>, ...)\n    - pattern: |\n        $V = flask.request.$W[...]\n        ...\n        flask.redirect(<... $V ...>, ...)\n    - pattern: |\n        $V = flask.request.$W(...)\n        ...\n        flask.redirect(<... $V ...>, ...)\n    - pattern: |\n        $V = flask.request.$W\n        ...\n        flask.redirect(<... $V ...>, ...)\n  message: |\n    Data from request is passed to redirect().\n    This is an open redirect and could be exploited.\n    Consider using 'url_for()' to generate links to known locations.\n    If you must use a URL to unknown pages, consider using 'urlparse()'\n    or similar and checking if the 'netloc' property is the same as\n    your site's host name. See the references for more information.\n  metadata:\n    cwe: \"CWE-601: URL Redirection to Untrusted Site ('Open Redirect')\"\n    owasp: 'A1: Injection'\n    references:\n    - https://flask-login.readthedocs.io/en/latest/#login-example\n    - https://cheatsheetseries.owasp.org/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.html#dangerous-url-redirect-example-1\n    - https://docs.python.org/3/library/urllib.parse.html#url-parsing\n  languages: [python]\n  severity: ERROR\n", "rule_path": "extend_dataset/52b95aa1/before/open-redirect.yaml", "test_path": "extend_dataset/52b95aa1/after/open-redirect.py", "category": "historical", "splited_testsuite_b": ["```python\nfrom flask import Flask, redirect, request, url_for\nfrom werkzeug.urls import url_parse\n\napp = Flask(__name__)\n\n@app.route(\"open_redirect/\")\ndef open_redirect():\n    # ruleid: open-redirect\n    url = request.args.get(\"url\")\n    print(\"something\")\n    return redirect(url)\n```", "```python\nfrom flask import Flask, redirect, request, url_for\nfrom werkzeug.urls import url_parse\n\napp = Flask(__name__)\n\n@app.route(\"not_open_redirect/\")\ndef not_open_redirect():\n    # ok: open-redirect\n    url = \"/about/\"\n    return redirect(url)\n```", "```python\nfrom flask import Flask, redirect, request, url_for\nfrom werkzeug.urls import url_parse\n\napp = Flask(__name__)\n\n@app.route(\"filter\")\ndef filter():\n    # ok: open-redirect\n    next_page = request.args.get('next')\n    if not next_page or url_parse(next_page).netloc != '':\n        next_page = url_for('main.index')\n    return redirect(next_page)\n```", "```python\nfrom flask import request, redirect\n\n# cf. https://github.com/mideind/Netskrafl/blob/2e1933ad0710a4425c319fde3b92b2a70729ed80/netskrafl.py#L1712\n@app.route(\"/userprefs\", methods=[\"GET\", \"POST\"])\n@auth_required()\ndef userprefs():\n    \"\"\" Handler for the user preferences page \"\"\"\n\n    user = current_user()\n\n    uf = UserForm()\n    err = dict()\n\n    # The URL to go back to, if not main.html\n    # ruleid: open-redirect\n    from_url = request.args.get(\"from\", None)\n\n    if request.method == \"GET\":\n        # Entering the form for the first time: load the user data\n        uf.init_from_user(user)\n    elif request.method == \"POST\":\n        # Attempting to submit modified data: retrieve it and validate\n        uf.init_from_form(request.form)\n        err = uf.validate()\n        if not err:\n            # All is fine: store the data back in the user entity\n            uf.store(user)\n            return redirect(from_url or url_for(\"main\"))\n\n    # Render the form with the current data and error messages, if any\n    return render_template(\"userprefs.html\", uf=uf, err=err, from_url=from_url)\n```"], "actual": [true, false, false, false], "expected": [true, false, false, true], "index": 21, "commit_message": "Use deep expression operator to catch 'userdata or otherstuff()' or s\u2026 (#772)", "commit_date_str": "2020-08-11 11:11:04 -0700", "leaf_count": 10, "line_count": 36}
{"id": "detect-non-literal-regexp", "rule": "rules:\n- id: detect-non-literal-regexp\n  patterns:\n  - pattern-either:\n    - pattern: new RegExp($ARG, ...)\n    - pattern: RegExp($ARG, ...)\n  - pattern-not: RegExp(\"...\", ...)\n  - pattern-not: new RegExp(\"...\", ...)\n  message: >-\n    RegExp() called with a variable, this might allow an attacker to DOS your application\n    with a long-running regular expression.\n  languages:\n  - javascript\n  - typescript\n  severity: WARNING\n", "failed_tests": ["function jsliteral (name) {\n  const exp = /a.*/;\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(exp);\n  return reg.exec(name);\n}"], "failed_type": "fp", "testsuite_a": "function ok (name) {\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\")\n  return reg.exec(name)\n}\n\nfunction bad (name) {\n  //ruleid: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\" + name)\n  return reg.exec(name)\n}\n", "testsuite_b": "function ok (name) {\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\")\n  return reg.exec(name)\n}\n\nfunction bad (name) {\n  //ruleid: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\" + name)\n  return reg.exec(name)\n}\n\nfunction jsliteral (name) {\n  const exp = /a.*/;\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(exp);\n  return reg.exec(name);\n}\n", "ground_truth": "rules:\n- id: detect-non-literal-regexp\n  patterns:\n  - pattern-either:\n    - pattern: new RegExp($ARG, ...)\n    - pattern: RegExp($ARG, ...)\n  - pattern-not: RegExp(\"...\", ...)\n  - pattern-not: new RegExp(\"...\", ...)\n  - pattern-not: RegExp(/.../, ...)\n  - pattern-not: new RegExp(/.../, ...)\n  message: >-\n    RegExp() called with a variable, this might allow an attacker to DOS your application with a long-running regular expression.\n  languages:\n  - javascript\n  - typescript\n  severity: WARNING\n  metadata:\n    cwe: 'CWE-185: Incorrect Regular Expression'\n    source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-non-literal-regexp.js\n    category: security\n    technology:\n    - javascript\n", "rule_path": "extend_dataset/9ebfabf9/before/detect-non-literal-regexp.yaml", "test_path": "extend_dataset/9ebfabf9/after/detect-non-literal-regexp.js", "category": "historical", "splited_testsuite_b": ["function ok (name) {\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\")\n  return reg.exec(name)\n}", "function bad (name) {\n  //ruleid: detect-non-literal-regexp\n  const reg = new RegExp(\"\\\\w+\" + name)\n  return reg.exec(name)\n}", "function jsliteral (name) {\n  const exp = /a.*/;\n  //ok: detect-non-literal-regexp\n  const reg = new RegExp(exp);\n  return reg.exec(name);\n}"], "actual": [false, true, true], "expected": [false, true, false], "index": 22, "commit_message": "Filter JS regex literals from JS nonliteral RegExp rule (#1503)", "commit_date_str": "2021-10-01 12:15:10 +1000", "leaf_count": 4, "line_count": 6}
{"id": "check-regex-dos", "rule": "rules:\n- id: check-regex-dos\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $X\n        - pattern-inside: |\n            def $F(...,$X,...)\n              ...\n            end\n      - patterns:\n        - pattern: $X\n        - pattern-inside: |\n            params[...]\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            $RECORD.$Y\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            /...#{...}.../\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            Regexp.new(...)\n  message: >-\n    Found a potentially user-controllable argument in the construction of a regular\n    expressions.\n    This may result in excessive resource consumption when applied to certain inputs,\n    or when the user is allowed to control the match target.\n    Avoid allowing users to specify regular expressions processed by the server.\n    If you must support user-controllable input in a regular expression, use an allow-list\n    to restrict the expressions users may supply to limit catastrophic backtracking.\n  languages:\n  - ruby\n  severity: ERROR\n", "failed_tests": ["def some_rails_controller\n  foo = Record[something]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend"], "failed_type": "fn", "testsuite_a": "def some_func(arg1,arg2,arg3)\n    #ruleid: check-regex-dos\n    /#{arg1}/i =~ arg2\nend\n\ndef some_func2(arg1,arg2,arg3)\n    #ruleid: check-regex-dos\n    Regexp.new(arg3).match(\"some_string\")\nend\n\ndef some_rails_controller\n    foo = params[:some_regex]\n    #ruleid: check-regex-dos\n    Regexp.new(foo).match(\"some_string\")\nend\n\ndef use_params_in_regex\n  #ruleid: check-regex-dos\n  @x = something.match /#{params[:x]}/\nend\n\ndef regex_on_params\n  #ok: check-regex-dos\n  @x = params[:x].match /foo/\nend", "testsuite_b": "def some_rails_controller\n  foo = params[:some_regex]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef some_rails_controller\n  foo = Record[something]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef some_rails_controller\n  foo = Record.read_attribute(\"some_attribute\")\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef use_params_in_regex\n#ruleid: check-regex-dos\n@x = something.match /#{params[:x]}/\nend\n\ndef regex_on_params\n#ok: check-regex-dos\n@x = params[:x].match /foo/\nend", "ground_truth": "rules:\n- id: check-regex-dos\n  mode: taint\n  pattern-sources:\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            cookies[...]\n        - patterns:\n          - pattern: |\n              cookies. ... .$PROPERTY[...]\n          - metavariable-regex:\n              metavariable: $PROPERTY\n              regex: (?!signed|encrypted)\n        - pattern: |\n            params[...]\n        - pattern: |\n            request.env[...]\n        - patterns:\n          - pattern: $Y\n          - pattern-either:\n            - pattern-inside: |\n                $RECORD.read_attribute($Y)\n            - pattern-inside: |\n                $RECORD[$Y]\n          - metavariable-regex:\n              metavariable: $RECORD\n              regex: '[A-Z]\\w+'\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            /...#{...}.../\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            Regexp.new(...)\n  message: >-\n    Found a potentially user-controllable argument in the construction of a regular expressions.\n    This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target.\n    Avoid allowing users to specify regular expressions processed by the server.\n    If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking.\n  languages:\n  - ruby\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_regex_dos.rb\n    category: security\n    cwe: 'CWE-1333: Inefficient Regular Expression Complexity'\n    owasp:\n      - A09:2004 - Application Denial of Service\n    technology:\n    - ruby\n    - rails\n    references:\n    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n", "rule_path": "extend_dataset/ecc21325/before/check-regex-dos.yaml", "test_path": "extend_dataset/ecc21325/after/check-regex-dos.rb", "category": "historical", "splited_testsuite_b": ["def some_rails_controller\n  foo = params[:some_regex]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend", "def use_params_in_regex\n#ruleid: check-regex-dos\n@x = something.match /#{params[:x]}/\nend", "def regex_on_params\n#ok: check-regex-dos\n@x = params[:x].match /foo/\nend", "def some_rails_controller\n  foo = Record[something]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend"], "actual": [true, true, false, false], "expected": [true, true, false, true], "index": 23, "commit_message": "Merge pull request #2233 from returntocorp/kb/ruby-redos-narrow-scope", "commit_date_str": "2022-07-15 12:24:34 +1000", "leaf_count": 10, "line_count": 29}
{"id": "check-regex-dos", "rule": "rules:\n- id: check-regex-dos\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $X\n        - pattern-inside: |\n            def $F(...,$X,...)\n              ...\n            end\n      - patterns:\n        - pattern: $X\n        - pattern-inside: |\n            params[...]\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            $RECORD.$Y\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            /...#{...}.../\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            Regexp.new(...)\n  message: >-\n    Found a potentially user-controllable argument in the construction of a regular\n    expressions.\n    This may result in excessive resource consumption when applied to certain inputs,\n    or when the user is allowed to control the match target.\n    Avoid allowing users to specify regular expressions processed by the server.\n    If you must support user-controllable input in a regular expression, use an allow-list\n    to restrict the expressions users may supply to limit catastrophic backtracking.\n  languages:\n  - ruby\n  severity: ERROR\n", "failed_tests": ["def some_rails_controller\n  foo = Record.read_attribute(\"some_attribute\")\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend"], "failed_type": "fn", "testsuite_a": "def some_func(arg1,arg2,arg3)\n    #ruleid: check-regex-dos\n    /#{arg1}/i =~ arg2\nend\n\ndef some_func2(arg1,arg2,arg3)\n    #ruleid: check-regex-dos\n    Regexp.new(arg3).match(\"some_string\")\nend\n\ndef some_rails_controller\n    foo = params[:some_regex]\n    #ruleid: check-regex-dos\n    Regexp.new(foo).match(\"some_string\")\nend\n\ndef use_params_in_regex\n  #ruleid: check-regex-dos\n  @x = something.match /#{params[:x]}/\nend\n\ndef regex_on_params\n  #ok: check-regex-dos\n  @x = params[:x].match /foo/\nend", "testsuite_b": "def some_rails_controller\n  foo = params[:some_regex]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef some_rails_controller\n  foo = Record[something]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef some_rails_controller\n  foo = Record.read_attribute(\"some_attribute\")\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef use_params_in_regex\n#ruleid: check-regex-dos\n@x = something.match /#{params[:x]}/\nend\n\ndef regex_on_params\n#ok: check-regex-dos\n@x = params[:x].match /foo/\nend", "ground_truth": "rules:\n- id: check-regex-dos\n  mode: taint\n  pattern-sources:\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            cookies[...]\n        - patterns:\n          - pattern: |\n              cookies. ... .$PROPERTY[...]\n          - metavariable-regex:\n              metavariable: $PROPERTY\n              regex: (?!signed|encrypted)\n        - pattern: |\n            params[...]\n        - pattern: |\n            request.env[...]\n        - patterns:\n          - pattern: $Y\n          - pattern-either:\n            - pattern-inside: |\n                $RECORD.read_attribute($Y)\n            - pattern-inside: |\n                $RECORD[$Y]\n          - metavariable-regex:\n              metavariable: $RECORD\n              regex: '[A-Z]\\w+'\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            /...#{...}.../\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            Regexp.new(...)\n  message: >-\n    Found a potentially user-controllable argument in the construction of a regular expressions.\n    This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target.\n    Avoid allowing users to specify regular expressions processed by the server.\n    If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking.\n  languages:\n  - ruby\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_regex_dos.rb\n    category: security\n    cwe: 'CWE-1333: Inefficient Regular Expression Complexity'\n    owasp:\n      - A09:2004 - Application Denial of Service\n    technology:\n    - ruby\n    - rails\n    references:\n    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n", "rule_path": "extend_dataset/ecc21325/before/check-regex-dos.yaml", "test_path": "extend_dataset/ecc21325/after/check-regex-dos.rb", "category": "historical", "splited_testsuite_b": ["def some_rails_controller\n  foo = params[:some_regex]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend", "def use_params_in_regex\n#ruleid: check-regex-dos\n@x = something.match /#{params[:x]}/\nend", "def regex_on_params\n#ok: check-regex-dos\n@x = params[:x].match /foo/\nend", "def some_rails_controller\n  foo = Record.read_attribute(\"some_attribute\")\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend"], "actual": [true, true, false, false], "expected": [true, true, false, true], "index": 24, "commit_message": "Merge pull request #2233 from returntocorp/kb/ruby-redos-narrow-scope", "commit_date_str": "2022-07-15 12:24:34 +1000", "leaf_count": 10, "line_count": 29}
{"id": "missing-image-version", "rule": "rules:\n- id: missing-image-version\n  patterns:\n  - pattern-either:\n    - pattern: FROM $IMAGE\n  - pattern-not: FROM $IMAGE:$VERSION\n  - pattern-not: FROM $IMAGE@$DIGEST\n  - pattern-not: FROM $IMAGE:$VERSION@$DIGEST\n  message: >-\n    Images should be tagged with an explicit version to produce\n    deterministic container images.\n  severity: WARNING\n  languages: [dockerfile]\n", "failed_tests": ["# ok: missing-image-version\nFROM scratch"], "failed_type": "fp", "testsuite_a": "# ruleid: missing-image-version\nFROM debian\n\n# ruleid: missing-image-version\nFROM nixos/nix\n\n# ruleid: missing-image-version\nFROM debian AS blah\n\n# ruleid: missing-image-version\nFROM nixos/nix AS build\n\n# ruleid: missing-image-version\nFROM --platform=linux/amd64 debian\n\n# ruleid: missing-image-version\nFROM --platform=linux/amd64 debian as name\n\n\n# ok: missing-image-version\nFROM debian:jessie\n\n# ok: missing-image-version\nFROM nixos/nix:2.7.0\n\n# ok: missing-image-version\nFROM debian:jessie AS blah\n\n# ok: missing-image-version\nFROM nixos/nix:2.7.0 AS build\n\n# ok: missing-image-version\nFROM --platform=linux/amd64 debian:jessie\n\n# ok: missing-image-version\nFROM --platform=linux/amd64 debian:jessie as name\n\n# ok: missing-image-version\nFROM python:3.10.1-alpine3.15@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448\n\n# ok: missing-image-version\nFROM python@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448\n\n# ok: missing-image-version\nFROM python:3.10.1-alpine3.15@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 as name\n\n# ok: missing-image-version\nFROM python@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 AS name\n\n# ok: missing-image-version\nFROM --platform=linux/amd64 python:3.10.1-alpine3.15@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 as name\n\n# ok: missing-image-version\nFROM --platform=linux/amd64 python@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 AS name\n", "testsuite_b": "# ruleid: missing-image-version\nFROM debian\n\n# ruleid: missing-image-version\nFROM nixos/nix\n\n# ruleid: missing-image-version\nFROM debian AS blah\n\n# ruleid: missing-image-version\nFROM nixos/nix AS build\n\n# ruleid: missing-image-version\nFROM --platform=linux/amd64 debian\n\n# ruleid: missing-image-version\nFROM --platform=linux/amd64 debian as name\n\n\n# ok: missing-image-version\nFROM debian:jessie\n\n# ok: missing-image-version\nFROM nixos/nix:2.7.0\n\n# ok: missing-image-version\nFROM debian:jessie AS blah\n\n# ok: missing-image-version\nFROM nixos/nix:2.7.0 AS build\n\n# ok: missing-image-version\nFROM --platform=linux/amd64 debian:jessie\n\n# ok: missing-image-version\nFROM --platform=linux/amd64 debian:jessie as name\n\n# ok: missing-image-version\nFROM python:3.10.1-alpine3.15@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448\n\n# ok: missing-image-version\nFROM python@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448\n\n# ok: missing-image-version\nFROM python:3.10.1-alpine3.15@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 as name\n\n# ok: missing-image-version\nFROM python@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 AS name\n\n# ok: missing-image-version\nFROM --platform=linux/amd64 python:3.10.1-alpine3.15@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 as name\n\n# ok: missing-image-version\nFROM --platform=linux/amd64 python@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 AS name\n\n# ok: missing-image-version\nFROM scratch\n", "ground_truth": "rules:\n  - id: missing-image-version\n    patterns:\n      - pattern-either:\n          - pattern: FROM $IMAGE\n      - pattern-not: FROM $IMAGE:$VERSION\n      - pattern-not: FROM $IMAGE@$DIGEST\n      - pattern-not: FROM $IMAGE:$VERSION@$DIGEST\n      - pattern-not: FROM scratch\n    message: >-\n      Images should be tagged with an explicit version to produce\n      deterministic container images.\n    severity: WARNING\n    languages: [dockerfile]\n    metadata:\n      source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3006\n      references:\n        - https://github.com/hadolint/hadolint/wiki/DL3006\n      category: best-practice\n      technology:\n        - dockerfile\n", "rule_path": "extend_dataset/6b884ed4/before/missing-image-version.yaml", "test_path": "extend_dataset/6b884ed4/after/missing-image-version.dockerfile", "category": "historical", "splited_testsuite_b": ["# ruleid: missing-image-version\nFROM debian", "# ruleid: missing-image-version\nFROM nixos/nix", "# ruleid: missing-image-version\nFROM debian AS blah", "# ruleid: missing-image-version\nFROM nixos/nix AS build", "# ruleid: missing-image-version\nFROM --platform=linux/amd64 debian", "# ruleid: missing-image-version\nFROM --platform=linux/amd64 debian as name", "# ok: missing-image-version\nFROM debian:jessie", "# ok: missing-image-version\nFROM nixos/nix:2.7.0", "# ok: missing-image-version\nFROM debian:jessie AS blah", "# ok: missing-image-version\nFROM nixos/nix:2.7.0 AS build", "# ok: missing-image-version\nFROM --platform=linux/amd64 debian:jessie", "# ok: missing-image-version\nFROM --platform=linux/amd64 debian:jessie as name", "# ok: missing-image-version\nFROM python:3.10.1-alpine3.15@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448", "# ok: missing-image-version\nFROM python@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448", "# ok: missing-image-version\nFROM python:3.10.1-alpine3.15@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 as name", "# ok: missing-image-version\nFROM python@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 AS name", "# ok: missing-image-version\nFROM --platform=linux/amd64 python:3.10.1-alpine3.15@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 as name", "# ok: missing-image-version\nFROM --platform=linux/amd64 python@sha256:4be65b406f7402b5c4fd5df7173d2fd7ea3fdaa74d9c43b6ebd896197a45c448 AS name", "# ok: missing-image-version\nFROM scratch"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false], "index": 25, "commit_message": "Add `FROM scratch` as an exception to dockerfile.best-practice.missing-image-version.missing-image-version (#2112)", "commit_date_str": "2022-06-02 14:01:57 +0200", "leaf_count": 4, "line_count": 6}
{"id": "dangerous-spawn-process", "rule": "rules:\n- id: dangerous-spawn-process\n  message: |\n    Found dynamic content when spawning a process. This is dangerous if external\n    data can reach this function call because it allows a malicious actor to\n    execute commands. Ensure no external data reaches here.\n  languages: [python]\n  severity: WARNING\n  pattern-either:\n  - patterns:\n    - pattern-not: os.$METHOD(\"...\", ...)\n    - pattern: os.$METHOD(...)\n    - metavariable-regex:\n        metavariable: $METHOD\n        regex: (execl|execle|execlp|execlpe|execv|execve|execvp|execvpe|startfile)\n  - patterns:\n    - pattern-not: os.$METHOD(\"...\", [\"...\",\"...\",...],...)\n    - pattern: os.$METHOD(\"=~/(.*)(sh|bash|ksh|csh|tcsh|zsh)/\",[\"-c\",$CMD,...],...)\n    - metavariable-regex:\n        metavariable: $METHOD\n        regex: (execl|execle|execlp|execlpe|execv|execve|execvp|execvpe|startfile)\n  - patterns:\n    - pattern-not: os.$METHOD($MODE, \"...\", ...)\n    - pattern: os.$METHOD(...)\n    - metavariable-regex:\n        metavariable: $METHOD\n        regex: (spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe)\n  - patterns:\n    - pattern-not: os.$METHOD($MODE, \"...\", [\"...\",\"...\",...], ...)\n    - pattern: os.$METHOD($MODE,\"=~/(.*)(sh|bash|ksh|csh|tcsh|zsh)/\",[\"-c\",$CMD,...],...)\n    - metavariable-regex:\n        metavariable: $METHOD\n        regex: (spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe)\n", "failed_tests": ["import os\nimport shlex\nfrom somewhere import something\n\ndef run_payload(shell_command: str) -> None:\n    args = shlex.split(shell_command)\n    path = args[0]\n    # ruleid:dangerous-spawn-process\n    pid = os.posix_spawn(path, args, os.environ)\n    os.waitpid(pid, 0)"], "failed_type": "fn", "testsuite_a": "import os\n\n# ok:dangerous-spawn-process\nos.execl(\"ls\")\n\n# ok:dangerous-spawn-process\nos.spawnlp(os.P_WAIT, \"ls\")\n\n# ok:dangerous-spawn-process\nos.spawnlpe(os.P_WAIT, \"ls\")\n\n# ok:dangerous-spawn-process\nos.spawnv(os.P_WAIT, \"/bin/ls\")\n\n# ok:dangerous-spawn-process\nos.spawnve(os.P_WAIT, \"/bin/ls\", [\"-a\"], os.environ)\n\nfrom somewhere import something\n\n# ruleid:dangerous-spawn-process\nos.execl(something())\n\n# ruleid:dangerous-spawn-process\nos.execv('/bin/bash', ['-c', something()])\n\n# ruleid:dangerous-spawn-process\nos.spawnlp(os.P_WAIT, something())\n\n# ruleid:dangerous-spawn-process\nos.spawnlpe(os.P_WAIT, something())\n\n# ruleid:dangerous-spawn-process\nos.spawnv(os.P_WAIT, something())\n\n# ruleid:dangerous-spawn-process\nos.spawnve(os.P_WAIT, something(), [\"-a\"], os.environ)\n\n# ruleid:dangerous-spawn-process\nos.spawnve(os.P_WAIT, \"/bin/bash\", [\"-c\", something()], os.environ)\n", "testsuite_b": "import os\n\n# ok:dangerous-spawn-process\nos.execl(\"ls\")\n\n# ok:dangerous-spawn-process\nos.spawnlp(os.P_WAIT, \"ls\")\n\n# ok:dangerous-spawn-process\nos.spawnlpe(os.P_WAIT, \"ls\")\n\n# ok:dangerous-spawn-process\nos.spawnv(os.P_WAIT, \"/bin/ls\")\n\n# ok:dangerous-spawn-process\nos.spawnve(os.P_WAIT, \"/bin/ls\", [\"-a\"], os.environ)\n\nfrom somewhere import something\n\n# ruleid:dangerous-spawn-process\nos.execl(something())\n\n# ruleid:dangerous-spawn-process\nos.execv('/bin/bash', ['-c', something()])\n\n# ruleid:dangerous-spawn-process\nos.spawnlp(os.P_WAIT, something())\n\n# ruleid:dangerous-spawn-process\nos.spawnlpe(os.P_WAIT, something())\n\n# ruleid:dangerous-spawn-process\nos.spawnv(os.P_WAIT, something())\n\n# ruleid:dangerous-spawn-process\nos.spawnve(os.P_WAIT, something(), [\"-a\"], os.environ)\n\n# ruleid:dangerous-spawn-process\nos.spawnve(os.P_WAIT, \"/bin/bash\", [\"-c\", something()], os.environ)\n\ndef run_payload(shell_command: str) -> None:\n    args = shlex.split(shell_command)\n    path = args[0]\n    # ruleid:dangerous-spawn-process\n    pid = os.posix_spawn(path, args, os.environ)\n    os.waitpid(pid, 0)\n", "ground_truth": "rules:\n- id: dangerous-spawn-process\n  message: |\n    Found dynamic content when spawning a process. This is dangerous if external\n    data can reach this function call because it allows a malicious actor to\n    execute commands. Ensure no external data reaches here.\n  metadata:\n    cwe: \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    owasp: 'A1: Injection'\n    asvs:\n      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'\n      control_id: 5.3.8 OS Command Injection\n      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements\n      version: '4'\n    category: security\n    technology:\n    - pycryptodome\n  languages: [python]\n  severity: WARNING\n  pattern-either:\n  - patterns:\n    - pattern-not: os.$METHOD(\"...\", ...)\n    - pattern: os.$METHOD(...)\n    - metavariable-regex:\n        metavariable: $METHOD\n        regex: (execl|execle|execlp|execlpe|execv|execve|execvp|execvpe|startfile)\n  - patterns:\n    - pattern-not: os.$METHOD(\"...\", [\"...\",\"...\",...],...)\n    - pattern: os.$METHOD(\"=~/(.*)(sh|bash|ksh|csh|tcsh|zsh)/\",[\"-c\",$CMD,...],...)\n    - metavariable-regex:\n        metavariable: $METHOD\n        regex: (execl|execle|execlp|execlpe|execv|execve|execvp|execvpe|startfile)\n  - patterns:\n    - pattern-not: os.$METHOD($MODE, \"...\", ...)\n    - pattern: os.$METHOD(...)\n    - metavariable-regex:\n        metavariable: $METHOD\n        regex: (spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)\n  - patterns:\n    - pattern-not: os.$METHOD($MODE, \"...\", [\"...\",\"...\",...], ...)\n    - pattern: os.$METHOD($MODE,\"=~/(.*)(sh|bash|ksh|csh|tcsh|zsh)/\",[\"-c\",$CMD,...],...)\n    - metavariable-regex:\n        metavariable: $METHOD\n        regex: (spawnl|spawnle|spawnlp|spawnlpe|spawnv|spawnve|spawnvp|spawnvp|spawnvpe|posix_spawn|posix_spawnp)\n", "rule_path": "extend_dataset/5e40c942/before/dangerous-spawn-process.yaml", "test_path": "extend_dataset/5e40c942/after/dangerous-spawn-process.py", "category": "historical", "splited_testsuite_b": ["import os\n\n# ok:dangerous-spawn-process\nos.execl(\"ls\")", "import os\n\n# ok:dangerous-spawn-process\nos.spawnlp(os.P_WAIT, \"ls\")", "import os\n\n# ok:dangerous-spawn-process\nos.spawnlpe(os.P_WAIT, \"ls\")", "import os\n\n# ok:dangerous-spawn-process\nos.spawnv(os.P_WAIT, \"/bin/ls\")", "import os\n\n# ok:dangerous-spawn-process\nos.spawnve(os.P_WAIT, \"/bin/ls\", [\"-a\"], os.environ)", "import os\nfrom somewhere import something\n\n# ruleid:dangerous-spawn-process\nos.execl(something())", "import os\nfrom somewhere import something\n\n# ruleid:dangerous-spawn-process\nos.execv('/bin/bash', ['-c', something()])", "import os\nfrom somewhere import something\n\n# ruleid:dangerous-spawn-process\nos.spawnlp(os.P_WAIT, something())", "import os\nfrom somewhere import something\n\n# ruleid:dangerous-spawn-process\nos.spawnlpe(os.P_WAIT, something())", "import os\nfrom somewhere import something\n\n# ruleid:dangerous-spawn-process\nos.spawnv(os.P_WAIT, something())", "import os\nfrom somewhere import something\n\n# ruleid:dangerous-spawn-process\nos.spawnve(os.P_WAIT, something(), [\"-a\"], os.environ)", "import os\nfrom somewhere import something\n\n# ruleid:dangerous-spawn-process\nos.spawnve(os.P_WAIT, \"/bin/bash\", [\"-c\", something()], os.environ)", "import os\nimport shlex\nfrom somewhere import something\n\ndef run_payload(shell_command: str) -> None:\n    args = shlex.split(shell_command)\n    path = args[0]\n    # ruleid:dangerous-spawn-process\n    pid = os.posix_spawn(path, args, os.environ)\n    os.waitpid(pid, 0)"], "actual": [false, false, false, false, false, true, true, true, true, true, true, true, false], "expected": [false, false, false, false, false, true, true, true, true, true, true, true, true], "index": 26, "commit_message": "update dangerous-spawn-process rule (#1333)", "commit_date_str": "2021-06-11 07:01:32 -0600", "leaf_count": 16, "line_count": 25}
{"id": "nontext-field-must-set-null-true", "rule": "rules:\n- id: nontext-field-must-set-null-true\n  patterns:\n  - pattern-inside: |\n      class $M(...):\n        ...\n  - pattern-not: $F = django.db.models.CharField(...)\n  - pattern-not: $F = django.db.models.TextField(...)\n  - pattern-not: $F = django.db.models.SlugField(...)\n  - pattern-not: $F = django.db.models.EmailField(...)\n  - pattern-not: $F = django.db.models.UUIDField(...)\n  - pattern-not: $F = $X(..., null=True, blank=True, ...)\n  - pattern: $F = $X(..., blank=True, ...)\n  message: null=True should be set if blank=True is set on non-text fields.\n  languages: [python]\n  severity: ERROR\n\n\n", "failed_tests": ["```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n```"], "failed_type": "fp", "testsuite_a": "from django.db import models\nfrom django.db.models import Model, CharField, IntegerField\n\nclass FakeModel(Model):\n    # ok\n    fieldOne = CharField(\n        max_length=200,\n        blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldTwo = IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok\n    fieldThree = IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok\n    return fake(blank=True)\n", "testsuite_b": "from django.db import models\n\n\nclass FakeModel(models.Model):\n    # ok\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n    # ok\n    fieldText = models.TextField(blank=True)\n    # ok\n    fieldSlug = models.SlugField(blank=True)\n    # ok\n    fieldEmail = models.EmailField(blank=True)\n    # ok\n    fieldURL = models.URLField(blank=True)\n    # ok\n    fieldUUID = models.UUIDField(blank=True)\n    # ok\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok\n    return fake(blank=True)\n", "ground_truth": "rules:\n- id: nontext-field-must-set-null-true\n  patterns:\n  - pattern-inside: |\n      class $M(...):\n        ...\n  - pattern-not: $F = django.db.models.CharField(...)\n  - pattern-not: $F = django.db.models.TextField(...)\n  - pattern-not: $F = django.db.models.SlugField(...)\n  - pattern-not: $F = django.db.models.EmailField(...)\n  - pattern-not: $F = django.db.models.URLField(...)\n  - pattern-not: $F = django.db.models.UUIDField(...)\n  - pattern-not: $F = django.db.models.ManyToManyField(...)\n  - pattern-not: $F = $X(..., null=True, blank=True, ...)\n  - pattern: $F = $X(..., blank=True, ...)\n  message: null=True should be set if blank=True is set on non-text fields.\n  languages: [python]\n  severity: ERROR\n\n\n", "rule_path": "extend_dataset/c0c6def8/before/nontext-field-must-set-null-true.yaml", "test_path": "extend_dataset/c0c6def8/after/nontext-field-must-set-null-true.py", "category": "historical", "splited_testsuite_b": ["```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n```", "```python\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n```"], "actual": [false, false, false, false, false, true, false, false, true], "expected": [false, false, false, false, false, true, false, false, false], "index": 27, "commit_message": "Bugfix/django blank URLField and ManyToManyField (#745)", "commit_date_str": "2020-07-29 12:59:11 -0400", "leaf_count": 8, "line_count": 9}
{"id": "nontext-field-must-set-null-true", "rule": "rules:\n- id: nontext-field-must-set-null-true\n  patterns:\n  - pattern-inside: |\n      class $M(...):\n        ...\n  - pattern-not: $F = django.db.models.CharField(...)\n  - pattern-not: $F = django.db.models.TextField(...)\n  - pattern-not: $F = django.db.models.SlugField(...)\n  - pattern-not: $F = django.db.models.EmailField(...)\n  - pattern-not: $F = django.db.models.UUIDField(...)\n  - pattern-not: $F = $X(..., null=True, blank=True, ...)\n  - pattern: $F = $X(..., blank=True, ...)\n  message: null=True should be set if blank=True is set on non-text fields.\n  languages: [python]\n  severity: ERROR\n\n\n", "failed_tests": ["```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n```"], "failed_type": "fp", "testsuite_a": "from django.db import models\nfrom django.db.models import Model, CharField, IntegerField\n\nclass FakeModel(Model):\n    # ok\n    fieldOne = CharField(\n        max_length=200,\n        blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldTwo = IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok\n    fieldThree = IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok\n    return fake(blank=True)\n", "testsuite_b": "from django.db import models\n\n\nclass FakeModel(models.Model):\n    # ok\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n    # ok\n    fieldText = models.TextField(blank=True)\n    # ok\n    fieldSlug = models.SlugField(blank=True)\n    # ok\n    fieldEmail = models.EmailField(blank=True)\n    # ok\n    fieldURL = models.URLField(blank=True)\n    # ok\n    fieldUUID = models.UUIDField(blank=True)\n    # ok\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok\n    return fake(blank=True)\n", "ground_truth": "rules:\n- id: nontext-field-must-set-null-true\n  patterns:\n  - pattern-inside: |\n      class $M(...):\n        ...\n  - pattern-not: $F = django.db.models.CharField(...)\n  - pattern-not: $F = django.db.models.TextField(...)\n  - pattern-not: $F = django.db.models.SlugField(...)\n  - pattern-not: $F = django.db.models.EmailField(...)\n  - pattern-not: $F = django.db.models.URLField(...)\n  - pattern-not: $F = django.db.models.UUIDField(...)\n  - pattern-not: $F = django.db.models.ManyToManyField(...)\n  - pattern-not: $F = $X(..., null=True, blank=True, ...)\n  - pattern: $F = $X(..., blank=True, ...)\n  message: null=True should be set if blank=True is set on non-text fields.\n  languages: [python]\n  severity: ERROR\n\n\n", "rule_path": "extend_dataset/c0c6def8/before/nontext-field-must-set-null-true.yaml", "test_path": "extend_dataset/c0c6def8/after/nontext-field-must-set-null-true.py", "category": "historical", "splited_testsuite_b": ["```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n```", "```python\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n```"], "actual": [false, false, false, false, false, true, false, false, true], "expected": [false, false, false, false, false, true, false, false, false], "index": 28, "commit_message": "Bugfix/django blank URLField and ManyToManyField (#745)", "commit_date_str": "2020-07-29 12:59:11 -0400", "leaf_count": 8, "line_count": 9}
{"id": "insecure-load-balancer-tls-version", "rule": "rules:\n- id: insecure-load-balancer-tls-version\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern: ssl_policy = $ANYTHING\n      - pattern-not-inside: ssl_policy = \"ELBSecurityPolicy-FS-1-2-Res-2020-10\"\n      - pattern-not-inside: ssl_policy = \"ELBSecurityPolicy-FS-1-2-Res-2019-08\"\n      - pattern-not-inside: ssl_policy = \"ELBSecurityPolicy-FS-1-2-2019-08\"\n    - patterns:\n      - pattern: protocol = \"HTTP\"\n      - pattern-not-inside: |\n          resource $ANYTHING $NAME {\n            ...\n            default_action {\n              ...\n              redirect {\n                ...\n                protocol = \"HTTPS\"\n                ...\n              }\n              ...\n            }\n            ...\n          }\n  message: >-\n    Detected an AWS load balancer with an insecure TLS version.\n    TLS versions less than 1.2 are considered insecure because they\n    can be broken. To fix this, set your `ssl_policy` to\n    `\"ELBSecurityPolicy-FS-1-2-Res-2019-08\"`, or include a default action\n    to redirect to HTTPS.\n  languages: [hcl]\n  severity: WARNING\n", "failed_tests": ["# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_lb_target_group\" \"foo\" {\n    name = \"foo\"\n    port = 80\n    # ok: insecure-load-balancer-tls-version\n    protocol = \"HTTP\"\n    target_type = \"instance\"\n    vpc_id   = data.aws_vpc.bar\n    deregistration_delay = 60\n\n   health_check { \n     #....\n   }\n}"], "failed_type": "fp", "testsuite_a": "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_lb_listener\" \"http_redirect\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"HTTP\"\n  port              = \"80\"\n\n  default_action {\n    type = \"redirect\"\n\n    redirect {\n      port        = \"443\"\n      protocol    = \"HTTPS\"\n      status_code = \"HTTP_301\"\n    }\n  }\n}\n\nresource \"aws_lb_listener\" \"tcp\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"TCP\"\n  port              = \"8080\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"udp\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"UDP\"\n  port              = \"8080\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"tcp_udp\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"TCP_UDP\"\n  port              = \"8080\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"tls_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"TLS\"\n  port              = \"8080\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_alb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_alb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2020-10\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_alb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\n# failure\n\nresource \"aws_lb_listener\" \"http\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ruleid: insecure-load-balancer-tls-version\n  protocol          = \"HTTP\"\n  port              = \"80\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"https_2016\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ruleid: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-2016-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"tls_fs_1_1\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"TLS\"\n  port              = \"8080\"\n  # ruleid: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-1-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_alb_listener\" \"tls_fs_1_1\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"TLS\"\n  port              = \"8080\"\n  # ruleid: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-1-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n", "testsuite_b": "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_lb_listener\" \"http_redirect\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"HTTP\"\n  port              = \"80\"\n\n  default_action {\n    type = \"redirect\"\n\n    redirect {\n      port        = \"443\"\n      protocol    = \"HTTPS\"\n      status_code = \"HTTP_301\"\n    }\n  }\n}\n\nresource \"aws_lb_listener\" \"tcp\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"TCP\"\n  port              = \"8080\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"udp\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"UDP\"\n  port              = \"8080\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"tcp_udp\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"TCP_UDP\"\n  port              = \"8080\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"tls_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"TLS\"\n  port              = \"8080\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_alb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_alb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2020-10\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_alb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_target_group\" \"foo\" {\n    name = \"foo\"\n    port = 80\n    # ok: insecure-load-balancer-tls-version\n    protocol = \"HTTP\"\n    target_type = \"instance\"\n    vpc_id   = data.aws_vpc.bar\n    deregistration_delay = 60\n\n   health_check { \n     #....\n   }\n}\n\n# failure\n\nresource \"aws_lb_listener\" \"http\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ruleid: insecure-load-balancer-tls-version\n  protocol          = \"HTTP\"\n  port              = \"80\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"https_2016\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ruleid: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-2016-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_lb_listener\" \"tls_fs_1_1\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"TLS\"\n  port              = \"8080\"\n  # ruleid: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-1-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n\nresource \"aws_alb_listener\" \"tls_fs_1_1\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"TLS\"\n  port              = \"8080\"\n  # ruleid: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-1-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}\n", "ground_truth": "rules:\n- id: insecure-load-balancer-tls-version\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern: ssl_policy = $ANYTHING\n      - pattern-not-inside: ssl_policy = \"ELBSecurityPolicy-FS-1-2-Res-2020-10\"\n      - pattern-not-inside: ssl_policy = \"ELBSecurityPolicy-FS-1-2-Res-2019-08\"\n      - pattern-not-inside: ssl_policy = \"ELBSecurityPolicy-FS-1-2-2019-08\"\n    - patterns:\n      - pattern: protocol = \"HTTP\"\n      - pattern-not-inside: |\n          resource $ANYTHING $NAME {\n            ...\n            default_action {\n              ...\n              redirect {\n                ...\n                protocol = \"HTTPS\"\n                ...\n              }\n              ...\n            }\n            ...\n          }\n  - pattern-inside: |\n      resource $RESOURCE $X {\n        ...\n      }\n  - metavariable-pattern:\n      metavariable: $RESOURCE\n      patterns:\n      - pattern-either:\n          - pattern: |\n              \"aws_lb_listener\"\n          - pattern: |\n              \"aws_alb_listener\"\n  message: >-\n    Detected an AWS load balancer with an insecure TLS version.\n    TLS versions less than 1.2 are considered insecure because they\n    can be broken. To fix this, set your `ssl_policy` to\n    `\"ELBSecurityPolicy-FS-1-2-Res-2019-08\"`, or include a default action\n    to redirect to HTTPS.\n  metadata:\n    category: security\n    technology:\n    - terraform\n    - aws\n    owasp:\n    - A03:2017 - Sensitive Data Exposure\n    - A02:2021 - Cryptographic Failures\n    cwe:\n    - 'CWE-326: Inadequate Encryption Strength'\n    references:\n    - https://www.ietf.org/rfc/rfc5246.txt\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: MEDIUM\n    confidence: MEDIUM\n  languages: [hcl]\n  severity: WARNING\n", "rule_path": "extend_dataset/6cf702a6/before/insecure-load-balancer-tls-version.yaml", "test_path": "extend_dataset/6cf702a6/after/insecure-load-balancer-tls-version.tf", "category": "historical", "splited_testsuite_b": ["# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_lb_listener\" \"http_redirect\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"HTTP\"\n  port              = \"80\"\n\n  default_action {\n    type = \"redirect\"\n\n    redirect {\n      port        = \"443\"\n      protocol    = \"HTTPS\"\n      status_code = \"HTTP_301\"\n    }\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_lb_listener\" \"tcp\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"TCP\"\n  port              = \"8080\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_lb_listener\" \"udp\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"UDP\"\n  port              = \"8080\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_lb_listener\" \"tcp_udp\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ok: insecure-load-balancer-tls-version\n  protocol          = \"TCP_UDP\"\n  port              = \"8080\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_lb_listener\" \"tls_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"TLS\"\n  port              = \"8080\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_lb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_alb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_alb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-Res-2020-10\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_alb_listener\" \"https_fs_1_2\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ok: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-2-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# failure\n\nresource \"aws_lb_listener\" \"http\" {\n  load_balancer_arn = var.aws_lb_arn\n  # ruleid: insecure-load-balancer-tls-version\n  protocol          = \"HTTP\"\n  port              = \"80\"\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# failure\n\nresource \"aws_lb_listener\" \"https_2016\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"HTTPS\"\n  port              = \"443\"\n  # ruleid: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-2016-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# failure\n\nresource \"aws_lb_listener\" \"tls_fs_1_1\" {\n  load_balancer_arn = var.aws_lb_arn\n  protocol          = \"TLS\"\n  port              = \"8080\"\n  # ruleid: insecure-load-balancer-tls-version\n  ssl_policy        = \"ELBSecurityPolicy-FS-1-1-2019-08\"\n  certificate_arn   = var.certificate_arn\n\n  default_action {\n    type             = \"forward\"\n    target_group_arn = var.aws_lb_target_group_arn\n  }\n}", "# Copyright 2019 Bridgecrew\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\n# pass\n\nresource \"aws_lb_target_group\" \"foo\" {\n    name = \"foo\"\n    port = 80\n    # ok: insecure-load-balancer-tls-version\n    protocol = \"HTTP\"\n    target_type = \"instance\"\n    vpc_id   = data.aws_vpc.bar\n    deregistration_delay = 60\n\n   health_check { \n     #....\n   }\n}"], "actual": [false, false, false, false, false, false, false, false, false, true, true, true, true], "expected": [false, false, false, false, false, false, false, false, false, true, true, true, false], "index": 29, "commit_message": "update insecure-load-balancer-tls-version rule (#2713)", "commit_date_str": "2023-02-20 10:16:25 -0800", "leaf_count": 6, "line_count": 12}
{"id": "missing-assume-yes-switch", "rule": "rules:\n- id: missing-assume-yes-switch\n  patterns:\n  - pattern: |\n      RUN ... apt-get install ...\n  - pattern-not: |\n      RUN ... apt-get install ... -y ...\n  - pattern-not: |\n      RUN ... apt-get install ... --assume-yes ...\n  - pattern-not: |\n      RUN ... apt-get install ... --yes ...\n  languages: [dockerfile]\n  message: >-\n    This 'apt-get install' is missing the '-y' switch. This might stall\n    builds because it requires human intervention. Add the '-y' switch.\n  severity: WARNING\n", "failed_tests": ["#ok: missing-assume-yes-switch\nRUN apt-get install -qqy"], "failed_type": "fp", "testsuite_a": "FROM debian\n# ruleid: missing-assume-yes-switch\nRUN apt-get install semgrep=0.30.0\n\n# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7 semgrep\n\n# ok: missing-assume-yes-switch\nRUN apt-get install --no-install-recommends -y python=2.7 semgrep\n\n# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7\n\n# ok: missing-assume-yes-switch\nRUN apt-get install --yes python=2.7\n\n# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# ruleid: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --assume-yes --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n", "testsuite_b": "FROM debian\n# ruleid: missing-assume-yes-switch\nRUN apt-get install semgrep=0.30.0\n\n# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7 semgrep\n\n# ok: missing-assume-yes-switch\nRUN apt-get install --no-install-recommends -y python=2.7 semgrep\n\n# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7\n\n# ok: missing-assume-yes-switch\nRUN apt-get install --yes python=2.7\n\n#ok: missing-assume-yes-switch\nRUN apt-get install -qqy\n\n#ok: missing-assume-yes-switch\nRUN apt-get install -yqq\n\n# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# ruleid: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --assume-yes --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*", "ground_truth": "rules:\n- id: missing-assume-yes-switch\n  patterns:\n    - pattern: |\n        RUN ... apt-get install ... $MULTIFLAG ... \n    - pattern-not: |\n        RUN ... apt-get install ... --assume-yes ...\n    - pattern-not: |\n        RUN ... apt-get install ... --yes ...\n    - pattern-not: |\n        RUN ... apt-get install ... -y ...\n    - metavariable-regex:\n        metavariable: $MULTIFLAG\n        regex: (^([^-])|(-[^y]+)$)\n  languages:\n    - dockerfile\n  message: This 'apt-get install' is missing the '-y' switch. This might stall\n    builds because it requires human intervention. Add the '-y' switch.\n  severity: WARNING\n  metadata:\n    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3014\n    references:\n      - https://github.com/hadolint/hadolint/wiki/DL3014\n    category: correctness\n    confidence: MEDIUM\n    technology:\n      - dockerfile\n", "rule_path": "extend_dataset/106e4490/before/missing-assume-yes-switch.yaml", "test_path": "extend_dataset/106e4490/after/missing-assume-yes-switch.dockerfile", "category": "historical", "splited_testsuite_b": ["FROM debian\n# ruleid: missing-assume-yes-switch\nRUN apt-get install semgrep=0.30.0", "# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7 semgrep", "# ok: missing-assume-yes-switch\nRUN apt-get install --no-install-recommends -y python=2.7 semgrep", "# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7", "# ok: missing-assume-yes-switch\nRUN apt-get install --yes python=2.7", "# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*", "# ruleid: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*", "# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --assume-yes --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*", "#ok: missing-assume-yes-switch\nRUN apt-get install -qqy"], "actual": [true, false, false, false, false, false, true, false, true], "expected": [true, false, false, false, false, false, true, false, false], "index": 30, "commit_message": "Update missing-assume-yes-switch to work with multiflags (#2306)", "commit_date_str": "2022-08-12 11:31:04 -0500", "leaf_count": 4, "line_count": 13}
{"id": "missing-assume-yes-switch", "rule": "rules:\n- id: missing-assume-yes-switch\n  patterns:\n  - pattern: |\n      RUN ... apt-get install ...\n  - pattern-not: |\n      RUN ... apt-get install ... -y ...\n  - pattern-not: |\n      RUN ... apt-get install ... --assume-yes ...\n  - pattern-not: |\n      RUN ... apt-get install ... --yes ...\n  languages: [dockerfile]\n  message: >-\n    This 'apt-get install' is missing the '-y' switch. This might stall\n    builds because it requires human intervention. Add the '-y' switch.\n  severity: WARNING\n", "failed_tests": ["#ok: missing-assume-yes-switch\nRUN apt-get install -yqq"], "failed_type": "fp", "testsuite_a": "FROM debian\n# ruleid: missing-assume-yes-switch\nRUN apt-get install semgrep=0.30.0\n\n# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7 semgrep\n\n# ok: missing-assume-yes-switch\nRUN apt-get install --no-install-recommends -y python=2.7 semgrep\n\n# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7\n\n# ok: missing-assume-yes-switch\nRUN apt-get install --yes python=2.7\n\n# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# ruleid: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --assume-yes --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n", "testsuite_b": "FROM debian\n# ruleid: missing-assume-yes-switch\nRUN apt-get install semgrep=0.30.0\n\n# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7 semgrep\n\n# ok: missing-assume-yes-switch\nRUN apt-get install --no-install-recommends -y python=2.7 semgrep\n\n# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7\n\n# ok: missing-assume-yes-switch\nRUN apt-get install --yes python=2.7\n\n#ok: missing-assume-yes-switch\nRUN apt-get install -qqy\n\n#ok: missing-assume-yes-switch\nRUN apt-get install -yqq\n\n# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# ruleid: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*\n\n# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --assume-yes --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*", "ground_truth": "rules:\n- id: missing-assume-yes-switch\n  patterns:\n    - pattern: |\n        RUN ... apt-get install ... $MULTIFLAG ... \n    - pattern-not: |\n        RUN ... apt-get install ... --assume-yes ...\n    - pattern-not: |\n        RUN ... apt-get install ... --yes ...\n    - pattern-not: |\n        RUN ... apt-get install ... -y ...\n    - metavariable-regex:\n        metavariable: $MULTIFLAG\n        regex: (^([^-])|(-[^y]+)$)\n  languages:\n    - dockerfile\n  message: This 'apt-get install' is missing the '-y' switch. This might stall\n    builds because it requires human intervention. Add the '-y' switch.\n  severity: WARNING\n  metadata:\n    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3014\n    references:\n      - https://github.com/hadolint/hadolint/wiki/DL3014\n    category: correctness\n    confidence: MEDIUM\n    technology:\n      - dockerfile\n", "rule_path": "extend_dataset/106e4490/before/missing-assume-yes-switch.yaml", "test_path": "extend_dataset/106e4490/after/missing-assume-yes-switch.dockerfile", "category": "historical", "splited_testsuite_b": ["FROM debian\n# ruleid: missing-assume-yes-switch\nRUN apt-get install semgrep=0.30.0", "# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7 semgrep", "# ok: missing-assume-yes-switch\nRUN apt-get install --no-install-recommends -y python=2.7 semgrep", "# ok: missing-assume-yes-switch\nRUN apt-get install -y python=2.7", "# ok: missing-assume-yes-switch\nRUN apt-get install --yes python=2.7", "# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install -y --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*", "# ruleid: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*", "# ok: missing-assume-yes-switch\nRUN apt-get update \\\n    && apt-get install --assume-yes --no-install-recommends \\\n    python3 \\\n    python3-pip \\\n    python3-setuptools \\\n    libpython3-dev \\\n    python3-dev \\\n    git \\\n    ca-certificates \\\n    zip \\\n    jq \\\n    && apt-get clean \\\n    && rm -rf /var/lib/apt/lists/*", "#ok: missing-assume-yes-switch\nRUN apt-get install -yqq"], "actual": [true, false, false, false, false, false, true, false, true], "expected": [true, false, false, false, false, false, true, false, false], "index": 31, "commit_message": "Update missing-assume-yes-switch to work with multiflags (#2306)", "commit_date_str": "2022-08-12 11:31:04 -0500", "leaf_count": 4, "line_count": 13}
{"id": "dangerous-subprocess-use-audit", "rule": "rules:\n- id: dangerous-subprocess-use-audit\n  pattern-either:\n  - patterns:\n    - pattern-not: subprocess.$FUNC(\"...\", ...)\n    - pattern-not: subprocess.$FUNC([\"...\",...], ...)\n    - pattern-not: subprocess.$FUNC((\"...\",...), ...)\n    - pattern-not: subprocess.CalledProcessError(...)\n    - pattern-not: subprocess.SubprocessError(...)\n    - pattern: subprocess.$FUNC(...)\n  - patterns:\n    - pattern: subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...)\n    - pattern-not: subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...)\n  - patterns:\n    - pattern-either:\n      - pattern: subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...],...)\n      - pattern: subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...),...)\n    - pattern-not: subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...],...)\n    - pattern-not: subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...),...)\n  - patterns:\n    - pattern: subprocess.$FUNC(\"=~/(python)/\",...)\n    - pattern-not: subprocess.$FUNC(\"=~/(python)/\",\"...\",...)\n  - patterns:\n    - pattern-either:\n      - pattern: subprocess.$FUNC([\"=~/(python)/\",...],...)\n      - pattern: subprocess.$FUNC((\"=~/(python)/\",...),...)\n    - pattern-not: subprocess.$FUNC([\"=~/(python)/\",\"...\",...],...)\n    - pattern-not: subprocess.$FUNC((\"=~/(python)/\",\"...\",...),...)\n  message: >-\n    Detected subprocess function '$FUNC' without a static string. If this data can\n    be\n    controlled by a malicious actor, it may be an instance of command injection.\n    Audit the use of this call to ensure it is not controllable by an external resource.\n    You may consider using 'shlex.escape()'.\n  languages: [python]\n  severity: ERROR\n", "failed_tests": ["import subprocess\nimport sys\n\necho_cmd = [\"echo\", \"a\", \";\"]\n# ok:dangerous-subprocess-use-audit\nsubprocess.call([*echo_cmd, \"rm\", \"-rf\", \"/\"])"], "failed_type": "fp", "testsuite_a": "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use-audit\nsubprocess.call(\"echo 'hello'\")\n\n# ok:dangerous-subprocess-use-audit\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n# ok:dangerous-subprocess-use-audit\nsubprocess.call((\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"))\n\n# ok:dangerous-subprocess-use-audit\nraise subprocess.CalledProcessError(\"{}\".format(\"foo\"))\n\n# ok:dangerous-subprocess-use-audit\nraise subprocess.SubprocessError(\"{}\".format(\"foo\"))\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))\n\ndef foobar(user_input):\n  cmd = user_input.split()\n  # ruleid:dangerous-subprocess-use-audit\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.run([\"bash\", \"-c\", sys.argv[1]], shell=True)\n\ndef vuln_payload(payload: str) -> None:\n  with tempfile.TemporaryDirectory() as directory:\n    python_file = Path(directory) / \"hello_world.py\"\n    python_file.write_text(textwrap.dedent(\"\"\"\n        print(\"What is your name?\")\n        name = input()\n        print(\"Hello \" + name)\n    \"\"\"))\n    # ruleid:dangerous-subprocess-use-audit\n    program = subprocess.Popen(['python2', str(python_file)], stdin=subprocess.PIPE, text=True)\n    program.communicate(input=payload, timeout=1)\n", "testsuite_b": "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use-audit\nsubprocess.call(\"echo 'hello'\")\n\n# ok:dangerous-subprocess-use-audit\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n# ok:dangerous-subprocess-use-audit\nsubprocess.call((\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"))\n\n# ok:dangerous-subprocess-use-audit\nraise subprocess.CalledProcessError(\"{}\".format(\"foo\"))\n\n# ok:dangerous-subprocess-use-audit\nraise subprocess.SubprocessError(\"{}\".format(\"foo\"))\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))\n\ndef foobar(user_input):\n  cmd = user_input.split()\n  # ruleid:dangerous-subprocess-use-audit\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.run([\"bash\", \"-c\", sys.argv[1]], shell=True)\n\n# ok:dangerous-subprocess-use-audit\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\ncmd_cmd = [\"sh\", \"-c\"]\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.call([*cmd_cmd, \"rm\", \"-rf\", \"/\"])\n\necho_cmd = [\"echo\", \"a\", \";\"]\n# ok:dangerous-subprocess-use-audit\nsubprocess.call([*echo_cmd, \"rm\", \"-rf\", \"/\"])\n\ndef vuln_payload(payload: str) -> None:\n  with tempfile.TemporaryDirectory() as directory:\n    python_file = Path(directory) / \"hello_world.py\"\n    python_file.write_text(textwrap.dedent(\"\"\"\n        print(\"What is your name?\")\n        name = input()\n        print(\"Hello \" + name)\n    \"\"\"))\n    # ruleid:dangerous-subprocess-use-audit\n    program = subprocess.Popen(['python2', str(python_file)], stdin=subprocess.PIPE, text=True)\n    program.communicate(input=payload, timeout=1)\n\n", "ground_truth": "rules:\n- id: dangerous-subprocess-use-audit\n  pattern-either:\n  - patterns:\n    - pattern-not: subprocess.$FUNC(\"...\", ...)\n    - pattern-not: subprocess.$FUNC([\"...\",...], ...)\n    - pattern-not: subprocess.$FUNC((\"...\",...), ...)\n    - pattern-not:\n        patterns:\n        - pattern-not-inside: | # Double negative, so this creates findings when a shell array is present\n            $ARR = [\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", ...]\n            ...\n        - pattern-inside: | # Filter out safe non-shell arrays\n            $ARR = [...]\n            ...\n        - pattern-either:\n          - pattern: subprocess.$FUNC(*$ARR, ...)\n          - pattern: subprocess.$FUNC([*$ARR, ...])\n    - pattern-not: subprocess.CalledProcessError(...)\n    - pattern-not: subprocess.SubprocessError(...)\n    - pattern: subprocess.$FUNC(...)\n  - patterns:\n    - pattern: subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...)\n    - pattern-not: subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...)\n  - patterns:\n    - pattern-either:\n      - pattern: subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...],...)\n      - pattern: subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...),...)\n    - pattern-not: subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...],...)\n    - pattern-not: subprocess.$FUNC((\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",\"...\",...),...)\n  - patterns:\n    - pattern: subprocess.$FUNC(\"=~/(python)/\",...)\n    - pattern-not: subprocess.$FUNC(\"=~/(python)/\",\"...\",...)\n  - patterns:\n    - pattern-either:\n      - pattern: subprocess.$FUNC([\"=~/(python)/\",...],...)\n      - pattern: subprocess.$FUNC((\"=~/(python)/\",...),...)\n    - pattern-not: subprocess.$FUNC([\"=~/(python)/\",\"...\",...],...)\n    - pattern-not: subprocess.$FUNC((\"=~/(python)/\",\"...\",...),...)\n  message: >-\n    Detected subprocess function '$FUNC' without a static string. If this data can\n    be\n    controlled by a malicious actor, it may be an instance of command injection.\n    Audit the use of this call to ensure it is not controllable by an external resource.\n    You may consider using 'shlex.escape()'.\n  metadata:\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    asvs:\n      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'\n      control_id: 5.3.8 OS Command Injection\n      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements\n      version: '4'\n    references:\n    - https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess\n    - https://docs.python.org/3/library/subprocess.html\n    - https://docs.python.org/3/library/shlex.html\n    - https://semgrep.dev/docs/cheat-sheets/python-command-injection/\n    category: security\n    technology:\n    - python\n    confidence: LOW\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n  languages: [python]\n  severity: ERROR\n\n", "rule_path": "extend_dataset/3567f8dc/before/dangerous-subprocess-use-audit.yaml", "test_path": "extend_dataset/3567f8dc/after/dangerous-subprocess-use-audit.py", "category": "historical", "splited_testsuite_b": ["import subprocess\nimport sys\n\n# ok:dangerous-subprocess-use-audit\nsubprocess.call(\"echo 'hello'\")", "import subprocess\nimport sys\n\n# ok:dangerous-subprocess-use-audit\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])", "import subprocess\nimport sys\n\n# ok:dangerous-subprocess-use-audit\nsubprocess.call((\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"))", "import subprocess\nimport sys\n\n# ok:dangerous-subprocess-use-audit\nraise subprocess.CalledProcessError(\"{}\".format(\"foo\"))", "import subprocess\nimport sys\n\n# ok:dangerous-subprocess-use-audit\nraise subprocess.SubprocessError(\"{}\".format(\"foo\"))", "import subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))", "import subprocess\nimport sys\n\ndef foobar(user_input):\n  cmd = user_input.split()\n  # ruleid:dangerous-subprocess-use-audit\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])", "import subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)", "import subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")", "import subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)", "import subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.run([\"bash\", \"-c\", sys.argv[1]], shell=True)", "import subprocess\nimport sys\n\n# ok:dangerous-subprocess-use-audit\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])", "import subprocess\nimport sys\n\ncmd_cmd = [\"sh\", \"-c\"]\n# ruleid:dangerous-subprocess-use-audit\nsubprocess.call([*cmd_cmd, \"rm\", \"-rf\", \"/\"])", "import subprocess\nimport sys\nimport tempfile\nfrom pathlib import Path\nimport textwrap\n\ndef vuln_payload(payload: str) -> None:\n  with tempfile.TemporaryDirectory() as directory:\n    python_file = Path(directory) / \"hello_world.py\"\n    python_file.write_text(textwrap.dedent(\"\"\"\n        print(\"What is your name?\")\n        name = input()\n        print(\"Hello \" + name)\n    \"\"\"))\n    # ruleid:dangerous-subprocess-use-audit\n    program = subprocess.Popen(['python2', str(python_file)], stdin=subprocess.PIPE, text=True)\n    program.communicate(input=payload, timeout=1)", "import subprocess\nimport sys\n\necho_cmd = [\"echo\", \"a\", \";\"]\n# ok:dangerous-subprocess-use-audit\nsubprocess.call([*echo_cmd, \"rm\", \"-rf\", \"/\"])"], "actual": [false, false, false, false, false, true, true, true, true, true, true, false, true, true, true], "expected": [false, false, false, false, false, true, true, true, true, true, true, false, true, true, false], "index": 32, "commit_message": "Fixed false positive when unpacking safe array (#3079)", "commit_date_str": "2023-08-29 15:17:15 -0700", "leaf_count": 18, "line_count": 26}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages: [ruby]\n  severity: ERROR\n  message: >-\n    Detected user input used to manually construct a SQL string. This is usually\n    bad practice because manual construction could accidentally result in a SQL\n    injection. An attacker could use a SQL injection to steal or modify contents\n    of the database. Instead, use a parameterized query which is available\n    by default in most database engines. Alternatively, consider using an\n    object-relational mapper (ORM) such as ActiveRecord which will protect your queries.\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: params\n      - pattern: request\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: |\n            \"...#{...}...\"\n        - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\\b|\\w+\\s*!?[<>=].*\n      - patterns:\n        - pattern-either:\n          - pattern: Kernel::sprintf(\"$SQLSTR\", ...)\n          - pattern: |\n              \"$SQLSTR\" + $EXPR\n          - pattern: |\n              \"$SQLSTR\" % $EXPR\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "failed_tests": ["class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\nend"], "failed_type": "fp", "testsuite_a": "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\n\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\n\n\nend\n", "testsuite_b": "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\n\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\n\n\nend\n", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages:\n  - ruby\n  severity: ERROR\n  message: Detected user input used to manually construct a SQL string. This is usually\n    bad practice because manual construction could accidentally result in a SQL injection.\n    An attacker could use a SQL injection to steal or modify contents of the database.\n    Instead, use a parameterized query which is available by default in most database\n    engines. Alternatively, consider using an object-relational mapper (ORM) such\n    as ActiveRecord which will protect your queries.\n  metadata:\n    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command\n      (''SQL Injection'')\n\n      '\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    category: security\n    technology:\n    - rails\n    references:\n    - https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: params\n      - pattern: request\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: |\n            \"...#{$EXPR}...\"\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $EXPR\n        - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\\b|\\w+\\s*!?[<>=].*\n      - patterns:\n        - pattern-either:\n          - pattern: Kernel::sprintf(\"$SQLSTR\", $EXPR)\n          - pattern: |\n              \"$SQLSTR\" + $EXPR\n          - pattern: |\n              \"$SQLSTR\" % $EXPR\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $EXPR\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "rule_path": "extend_dataset/74b7adde/before/tainted-sql-string.yaml", "test_path": "extend_dataset/74b7adde/after/tainted-sql-string.rb", "category": "historical", "splited_testsuite_b": ["class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\nend"], "actual": [true, true, true, true, true, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false], "index": 33, "commit_message": "Remove FP case when parameterized statements are used with .where(...) methods (#2296)", "commit_date_str": "2022-08-08 18:05:56 -0500", "leaf_count": 9, "line_count": 25}
{"id": "var-in-href", "rule": "rules:\n- id: var-in-href\n  message: |\n    Detected a template variable used in an anchor tag with\n    the 'href' attribute. This allows a malicious actor to\n    input the 'javascript:' URI and is subject to cross-\n    site scripting (XSS) attacks. If using a relative URL,\n    start with a literal forward slash and concatenate the URL,\n    like this: href='/<%= link =>'. You may also consider setting\n    the Content Security Policy (CSP) header.\n  languages:\n  - none\n  severity: WARNING\n  pattern-regex: <a.*href\\s*=[^>]*?[^\\/&=]<%.*?%>.*?>\n", "failed_tests": ["<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <!-- ok: var-in-href -->\n    <a class=\"restore\" href=\"#\" style=\"display: none;\"><%= I18n.t(\"gws/reminder.links.restore_reminder\") %></a>\n</div>\n\n</html>"], "failed_type": "fp", "testsuite_a": "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ruleid: var-in-href -->\n    <a href=\"<%= link %>\" class=\"text-center\">Click me</a>\n    <!-- ok: var-in-href -->\n    <a href=\"/<%= link %>\" class=\"text-center\">Click me</a>\n\n    <!-- ok: var-in-href -->\n    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"> <%= current_user.name.pluralize %> Account <b class=\"caret\"></b></a>\n\n    <!-- ok: var-in-href -->\n    <div class=\"alert lead alert-<%= key %>\"><%= value %> </div>\n</div>\n\n</html>\n", "testsuite_b": "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ruleid: var-in-href -->\n    <a href=\"<%= link %>\" class=\"text-center\">Click me</a>\n    <!-- ok: var-in-href -->\n    <a href=\"/<%= link %>\" class=\"text-center\">Click me</a>\n\n    <!-- ok: var-in-href -->\n    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"> <%= current_user.name.pluralize %> Account <b class=\"caret\"></b></a>\n\n    <!-- ok: var-in-href -->\n    <div class=\"alert lead alert-<%= key %>\"><%= value %> </div>\n\n    <!-- ok: var-in-href -->\n    <a class=\"restore\" href=\"#\" style=\"display: none;\"><%= I18n.t(\"gws/reminder.links.restore_reminder\") %></a>\n</div>\n\n</html>\n", "ground_truth": "rules:\n- id: var-in-href\n  message: |\n    Detected a template variable used in an anchor tag with\n    the 'href' attribute. This allows a malicious actor to\n    input the 'javascript:' URI and is subject to cross-\n    site scripting (XSS) attacks. If using a relative URL,\n    start with a literal forward slash and concatenate the URL,\n    like this: href='/<%= link =>'. You may also consider setting\n    the Content Security Policy (CSP) header.\n  metadata:\n    cwe: \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp: 'A7: Cross-site Scripting (XSS)'\n    references:\n    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss#:~:text=javascript:%20URI\n    - https://github.com/pugjs/pug/issues/2952\n  languages:\n  - generic\n  paths:\n    include:\n    - '*.erb'\n  severity: WARNING\n  pattern-either:\n  - pattern: <a ... href = \"<%= ... %>\" ... >\n  - pattern: <a ... href = '<%= ... %>' ... >\n", "rule_path": "extend_dataset/8cc60f2d/before/var-in-href.yaml", "test_path": "extend_dataset/8cc60f2d/after/var-in-href.erb", "category": "historical", "splited_testsuite_b": ["<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ruleid: var-in-href -->\n    <a href=\"<%= link %>\" class=\"text-center\">Click me</a>\n</div>\n\n</html>", "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <!-- ok: var-in-href -->\n    <a href=\"/<%= link %>\" class=\"text-center\">Click me</a>\n</div>\n\n</html>", "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <!-- ok: var-in-href -->\n    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"> <%= current_user.name.pluralize %> Account <b class=\"caret\"></b></a>\n</div>\n\n</html>", "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <!-- ok: var-in-href -->\n    <div class=\"alert lead alert-<%= key %>\"><%= value %> </div>\n</div>\n\n</html>", "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <!-- ok: var-in-href -->\n    <a class=\"restore\" href=\"#\" style=\"display: none;\"><%= I18n.t(\"gws/reminder.links.restore_reminder\") %></a>\n</div>\n\n</html>"], "actual": [true, false, false, false, true], "expected": [true, false, false, false, false], "index": 34, "commit_message": "Fix FP for ruby on rails var-in-href rule. Switched to use generic instead of regex (#1061)", "commit_date_str": "2021-01-07 19:23:14 -0800", "leaf_count": 1, "line_count": 1}
{"id": "nontext-field-must-set-null-true", "rule": "rules:\n- id: nontext-field-must-set-null-true\n  patterns:\n  - pattern-inside: |\n      class $M(...):\n        ...\n  - pattern-not: $F = django.db.models.CharField(...)\n  - pattern-not: $F = django.db.models.TextField(...)\n  - pattern-not: $F = django.db.models.SlugField(...)\n  - pattern-not: $F = django.db.models.EmailField(...)\n  - pattern-not: $F = django.db.models.FileField(...)\n  - pattern-not: $F = django.db.models.ImageField(...)\n  - pattern-not: $F = django.db.models.URLField(...)\n  - pattern-not: $F = django.db.models.UUIDField(...)\n  - pattern-not: $F = django.db.models.ManyToManyField(...)\n  - pattern-not: $F = django.db.models.NullBooleanField(...)\n  - pattern-not: $F = phonenumber_field.modelfields.PhoneNumberField(...)\n  - pattern-not: $F = ckeditor.fields.RichTextField(...)\n  - pattern-not: $F = $X(..., null=True, blank=True, ...)\n  - pattern: $F = $X(..., blank=True, ...)\n  message: null=True should be set if blank=True is set on non-text fields.\n  languages: [python]\n  severity: ERROR\n", "failed_tests": ["def scoped():\n    from django.contrib.gis.db import models\n    class MyModel(models.Model):\n        shape = models.PolygonField(dim=3, srid=4326)\n        # ok: nontext-field-must-set-null-true\n        grouper_id = models.CharField(max_length=50, blank=True)"], "failed_type": "fp", "testsuite_a": "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldPhone = PhoneNumberField()\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldFile = models.FileField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldImage = models.ImageField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldCKEditorRichtext = RichTextField(blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n", "testsuite_b": "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\n\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldPhone = PhoneNumberField()\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldFile = models.FileField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldImage = models.ImageField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldCKEditorRichtext = RichTextField(blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n\ndef scoped():\n    from django.contrib.gis.db import models\n    class MyModel(models.Model):\n        shape = models.PolygonField(dim=3, srid=4326)\n        # ok: nontext-field-must-set-null-true\n        grouper_id = models.CharField(max_length=50, blank=True)\n\n", "ground_truth": "rules:\n  - id: nontext-field-must-set-null-true\n    patterns:\n      - pattern-inside: |\n          class $M(...):\n            ...\n      - pattern-not: $F = django.db.models.CharField(...)\n      - pattern-not: $F = django.db.models.TextField(...)\n      - pattern-not: $F = django.db.models.SlugField(...)\n      - pattern-not: $F = django.db.models.EmailField(...)\n      - pattern-not: $F = django.db.models.FileField(...)\n      - pattern-not: $F = django.db.models.ImageField(...)\n      - pattern-not: $F = django.db.models.URLField(...)\n      - pattern-not: $F = django.db.models.UUIDField(...)\n      - pattern-not: $F = django.db.models.ManyToManyField(...)\n      - pattern-not: $F = django.db.models.NullBooleanField(...)\n      - pattern-not: $F = django.contrib.gis.db.models.$MODEL(...)\n      - pattern-not: $F = phonenumber_field.modelfields.PhoneNumberField(...)\n      - pattern-not: $F = ckeditor.fields.RichTextField(...)\n      - pattern-not: $F = $X(..., null=True, blank=True, ...)\n      - pattern: $F = $X(..., blank=True, ...)\n    message: null=True should be set if blank=True is set on non-text fields.\n    languages:\n      - python\n    severity: ERROR\n    metadata:\n      category: correctness\n      references:\n        - https://docs.djangoproject.com/en/4.0/ref/models/fields/#null\n      technology:\n        - django\n", "rule_path": "extend_dataset/aafbf060/before/nontext-field-must-set-null-true.yaml", "test_path": "extend_dataset/aafbf060/after/nontext-field-must-set-null-true.py", "category": "historical", "splited_testsuite_b": ["from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldPhone = PhoneNumberField()", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldFile = models.FileField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldImage = models.ImageField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldCKEditorRichtext = RichTextField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )", "def fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)", "def scoped():\n    from django.contrib.gis.db import models\n    class MyModel(models.Model):\n        shape = models.PolygonField(dim=3, srid=4326)\n        # ok: nontext-field-must-set-null-true\n        grouper_id = models.CharField(max_length=50, blank=True)"], "actual": [false, false, false, false, false, false, false, false, false, false, false, true, false, false, true], "expected": [false, false, false, false, false, false, false, false, false, false, false, true, false, false, false], "index": 35, "commit_message": "Filter django.contrib.gis.db.models from results (#2086)", "commit_date_str": "2022-06-09 09:36:58 +0200", "leaf_count": 15, "line_count": 16}
{"id": "string-concat-in-list", "rule": "rules:\n- id: string-concat-in-list\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        [...]\n    - pattern-inside: |\n        {...}\n  - pattern: |\n      \"...\" \"...\"\n  - pattern-not-inside: |\n      f\"...\"\n  message: |\n    Detected strings that are implicitly concatenated inside a list.\n    Python will implicitly concatenate strings when not explicitly delimited.\n    Was this supposed to be individual elements of the list?\n  severity: WARNING\n  languages:\n  - python\n", "failed_tests": ["good = {\n    \"key1\": \"value1\",\n    # ok:string-concat-in-list\n    \"key2\": \"value2\"\n    \"value2 continuation\",\n    \"key3\": \"value3\",\n}"], "failed_type": "fp", "testsuite_a": "# ruleid:string-concat-in-list\nbad = [\"123\" \"456\" \"789\"]\n\n# ruleid:string-concat-in-list\nbad = [\"123\" f\"{456}\" \"789\"]\n\nbad = [\n# ruleid:string-concat-in-list\n    \"abc\"\n    \"cde\"\n    \"efg\",\n    \"hijk\"\n]\n\nbad = [\n    \"abc\",\n# ruleid:string-concat-in-list\n    \"cde\"\n    \"efg\"\n    \"hijk\"\n]\n\nbad = [\n    \"abc\",\n# ruleid:string-concat-in-list\n    \"cde\"\n    f\"efg\"\n    \"hijk\"\n]\n\nbad = {\n# ruleid:string-concat-in-list\n    \"abc\"\n    \"cde\"\n    \"efg\",\n    \"hijk\"\n}\n\ngood = [\"123\"]\ngood = [123, 456]\ngood = [\"123\", \"456\"]\ngood = [f\"123\"]\ngood = [f\"{123}\"]\ngood = [\"123\", f\"{456}\"]\n", "testsuite_b": "# ruleid:string-concat-in-list\nbad = [\"123\" \"456\" \"789\"]\n\n# ruleid:string-concat-in-list\nbad = [\"123\" f\"{456}\" \"789\"]\n\nbad = [\n    # ruleid:string-concat-in-list\n    \"abc\"\n    \"cde\"\n    \"efg\",\n    \"hijk\"\n]\n\nbad = [\n    \"abc\",\n    # ruleid:string-concat-in-list\n    \"cde\"\n    \"efg\"\n    \"hijk\"\n]\n\nbad = [\n    \"abc\",\n    # ruleid:string-concat-in-list\n    \"cde\"\n    f\"efg\"\n    \"hijk\"\n]\n\nbad = {\n    # ruleid:string-concat-in-list\n    \"abc\"\n    \"cde\"\n    \"efg\",\n    \"hijk\"\n}\n\ngood = {\n    \"key1\": \"value1\",\n    # ok:string-concat-in-list\n    \"key2\": \"value2\"\n    \"value2 continuation\",\n    \"key3\": \"value3\",\n}\n\ngood = {\n    \"key1\": \"value1\",\n    # ok:string-concat-in-list\n    \"key2\": \"value2 {}\"\n    .format(\"value2 continuation\"),\n    \"key3\": \"value3\",\n}\n\n# ok:string-concat-in-list\ngood = [\"123\"]\n\n# ok:string-concat-in-list\ngood = [123, 456]\n\n# ok:string-concat-in-list\ngood = [\"123\", \"456\"]\n\n# ok:string-concat-in-list\ngood = [f\"123\"]\n\n# ok:string-concat-in-list\ngood = [f\"{123}\"]\n\n# ok:string-concat-in-list\ngood = [\"123\", f\"{456}\"]\n", "ground_truth": "rules:\n- id: string-concat-in-list\n  patterns:\n  - pattern-either:\n    - pattern-inside: '[...]'\n    - pattern-inside: '{...}'\n  - pattern: '\"...\" \"...\"'\n  - pattern-not-inside: f\"...\"\n  - pattern-not-inside: '{..., $KEY: $VALUE, ...}'\n  message: |\n    Detected strings that are implicitly concatenated inside a list.\n    Python will implicitly concatenate strings when not explicitly delimited.\n    Was this supposed to be individual elements of the list?\n  severity: WARNING\n  languages:\n  - python\n", "rule_path": "extend_dataset/698b429d/before/string-concat-in-list.yaml", "test_path": "extend_dataset/698b429d/after/string-concat-in-list.py", "category": "historical", "splited_testsuite_b": ["# ruleid:string-concat-in-list\nbad = [\"123\" \"456\" \"789\"]", "# ruleid:string-concat-in-list\nbad = [\"123\" f\"{456}\" \"789\"]", "bad = [\n    # ruleid:string-concat-in-list\n    \"abc\"\n    \"cde\"\n    \"efg\",\n    \"hijk\"\n]", "bad = [\n    \"abc\",\n    # ruleid:string-concat-in-list\n    \"cde\"\n    \"efg\"\n    \"hijk\"\n]", "bad = [\n    \"abc\",\n    # ruleid:string-concat-in-list\n    \"cde\"\n    f\"efg\"\n    \"hijk\"\n]", "bad = {\n    # ruleid:string-concat-in-list\n    \"abc\"\n    \"cde\"\n    \"efg\",\n    \"hijk\"\n}", "good = {\n    \"key1\": \"value1\",\n    # ok:string-concat-in-list\n    \"key2\": \"value2 {}\"\n    .format(\"value2 continuation\"),\n    \"key3\": \"value3\",\n}", "# ok:string-concat-in-list\ngood = [\"123\"]", "# ok:string-concat-in-list\ngood = [123, 456]", "# ok:string-concat-in-list\ngood = [\"123\", \"456\"]", "# ok:string-concat-in-list\ngood = [f\"123\"]", "# ok:string-concat-in-list\ngood = [f\"{123}\"]", "# ok:string-concat-in-list\ngood = [\"123\", f\"{456}\"]", "good = {\n    \"key1\": \"value1\",\n    # ok:string-concat-in-list\n    \"key2\": \"value2\"\n    \"value2 continuation\",\n    \"key3\": \"value3\",\n}"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false, false], "index": 36, "commit_message": "Avoid running string concat rule in Python dict (#1129)", "commit_date_str": "2021-03-02 08:15:17 -0700", "leaf_count": 4, "line_count": 14}
{"id": "unquoted-attribute", "rule": "rules:\n- id: unquoted-attribute\n  message: >-\n    Detected a unquoted template variable as an attribute. If unquoted, a\n    malicious actor could inject custom JavaScript handlers. To fix this,\n    add quotes around the template expression, like this: \"<%= expr %>\".\n  languages:\n  - generic\n  severity: WARNING\n  patterns:\n  - pattern-inside: <$TAG ...>\n  - pattern-not-inside: =\"...\"\n  - pattern-not-inside: ='...'\n  - pattern: <%= ... %>\n  fix-regex:\n    regex: <%=(.*?)%>\n    replacement: '\"<%=\\1%>\"'\n", "failed_tests": ["<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ok: unquoted-attribute -->\n    <a href=\"<%= Foo::Bar::FooBar.frobnicate(\"#{event_id}\", @params) %>\" class=\"text-center\">Click me</a>\n</div>\n\n</html>"], "failed_type": "fp", "testsuite_a": "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ruleid: unquoted-attribute -->\n    <a href=<%= link %> class=\"text-center\">Click me</a>\n    <!-- ruleid: unquoted-attribute -->\n    <a href=/<%= link %> class=\"text-center\">Click me</a>\n    <!-- ok: unquoted-attribute -->\n    <a href=\"<%= link %>\" class=\"text-center\">Click me</a>\n    <!-- ok: unquoted-attribute -->\n    <a href='<%= link %>' class=\"text-center\">Click me</a>\n\n    <!-- ok: unquoted-attribute -->\n    <div class=\"alert lead alert-<%= key %>\"><%= value %> </div>\n\n    <!-- ok: unquoted-attribute -->\n    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"> <%= current_user.name.pluralize %> Account <b class=\"caret\"></b></a>\n</div>\n\n</html>\n", "testsuite_b": "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ruleid: unquoted-attribute -->\n    <a href=<%= link %> class=\"text-center\">Click me</a>\n    <!-- ruleid: unquoted-attribute -->\n    <a href=/<%= link %> class=\"text-center\">Click me</a>\n    <!-- ok: unquoted-attribute -->\n    <a href=\"<%= Foo::Bar::FooBar.frobnicate(\"#{event_id}\", @params) %>\" class=\"text-center\">Click me</a>\n    <!-- ok: unquoted-attribute -->\n    <a href='<%= link %>' class=\"text-center\">Click me</a>\n\n    <!-- ok: unquoted-attribute -->\n    <div class=\"alert lead alert-<%= key %>\"><%= value %> </div>\n\n    <!-- ok: unquoted-attribute -->\n    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"> <%= current_user.name.pluralize %> Account <b class=\"caret\"></b></a>\n</div>\n\n</html>\n", "ground_truth": "rules:\n- id: unquoted-attribute\n  message: 'Detected a unquoted template variable as an attribute. If unquoted, a\n    malicious actor could inject custom JavaScript handlers. To fix this, add quotes\n    around the template expression, like this: \"<%= expr %>\".'\n  metadata:\n    cwe: 'CWE-79: Improper Neutralization of Input During Web Page Generation (''Cross-site\n      Scripting'')'\n    owasp: 'A7: Cross-Site Scripting (XSS)'\n    references:\n    - https://brakemanpro.com/2017/09/08/cross-site-scripting-in-rails#unquoted-attributes\n    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss\n    category: security\n    technology:\n    - rails\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n  languages:\n  - generic\n  paths:\n    include:\n    - '*.erb'\n  severity: WARNING\n  patterns:\n  - pattern-inside: <$TAG ...>\n  - pattern-not-inside: =\"...\"\n  - pattern-not-inside: =\"<%= ... %>\"\n  - pattern-not-inside: ='...'\n  - pattern-not-inside: ='<%= ... %>'\n  - pattern: <%= ... %>\n  fix-regex:\n    regex: <%=(.*?)%>\n    replacement: '\"<%=\\1%>\"'\n", "rule_path": "extend_dataset/29c79ed4/before/unquoted-attribute.yaml", "test_path": "extend_dataset/29c79ed4/after/unquoted-attribute.erb", "category": "historical", "splited_testsuite_b": ["<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ruleid: unquoted-attribute -->\n    <a href=<%= link %> class=\"text-center\">Click me</a>\n</div>\n\n</html>", "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ruleid: unquoted-attribute -->\n    <a href=/<%= link %> class=\"text-center\">Click me</a>\n</div>\n\n</html>", "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ok: unquoted-attribute -->\n    <a href='<%= link %>' class=\"text-center\">Click me</a>\n</div>\n\n</html>", "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ok: unquoted-attribute -->\n    <div class=\"alert lead alert-<%= key %>\"><%= value %> </div>\n</div>\n\n</html>", "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ok: unquoted-attribute -->\n    <a href=\"#\" class=\"dropdown-toggle\" data-toggle=\"dropdown\"> <%= current_user.name.pluralize %> Account <b class=\"caret\"></b></a>\n</div>\n\n</html>", "<!-- cf. https://github.com/caiomartini/mustache-demo/blob/97b9200ebd2d27953febff23e6718aa1aa9ee44d/demo-mustache.html -->\n<!DOCTYPE HTML>\n<html>\n\n<div class=\"jumbotron text-center\">\n    <h1 class=\"display-4\">Oi, meu nome \u00e9 <%= nome %>!</h1>\n    <p class=\"lead\">Isso \u00e9 apenas uma demonstra\u00e7\u00e3o de como utilizar o Mustache.JS</p>\n    <!-- ok: unquoted-attribute -->\n    <a href=\"<%= Foo::Bar::FooBar.frobnicate(\"#{event_id}\", @params) %>\" class=\"text-center\">Click me</a>\n</div>\n\n</html>"], "actual": [true, true, false, false, false, true], "expected": [true, true, false, false, false, false], "index": 37, "commit_message": "New Published Rules - ruby.rails.security.audit.xss.templates.unquoted-attribute (#1865)", "commit_date_str": "2022-03-10 10:28:39 -0600", "leaf_count": 4, "line_count": 5}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  pattern-regex: |-\n    ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages: [regex]\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection"], "failed_type": "fn", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  pattern-regex: ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/9e8b1f1d/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/9e8b1f1d/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection"], "actual": [true, false, false, false, true, false, false, true, true, true, true, false], "expected": [true, false, false, false, true, false, false, true, true, true, true, true], "index": 38, "commit_message": "New Published Rules - generic.secrets.security.detected-username-and-password-in-uri (#1872)", "commit_date_str": "2022-03-09 12:03:33 -0600", "leaf_count": 1, "line_count": 1}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  pattern-regex: |-\n    ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages: [regex]\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname"], "failed_type": "fn", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  pattern-regex: ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/9e8b1f1d/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/9e8b1f1d/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname"], "actual": [true, false, false, false, true, false, false, true, true, true, true, false], "expected": [true, false, false, false, true, false, false, true, true, true, true, true], "index": 39, "commit_message": "New Published Rules - generic.secrets.security.detected-username-and-password-in-uri (#1872)", "commit_date_str": "2022-03-09 12:03:33 -0600", "leaf_count": 1, "line_count": 1}
{"id": "unquoted-csv-writer", "rule": "rules:\n- id: unquoted-csv-writer\n  patterns:\n  - pattern-not: csv.writer(..., quoting=csv.QUOTE_ALL, ...)\n  - pattern-not: csv.writer(..., quoting=1, ...)\n  - pattern: csv.writer(...)\n  message: Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\n  fix-regex:\n    regex: (.*)\\)\n    replacement: \\1, quoting=csv.QUOTE_ALL)\n  languages: [python]\n  severity: ERROR\n", "failed_tests": ["import csv\n\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, dialect='unix')"], "failed_type": "fp", "testsuite_a": "import csv\n\n# ruleid:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"')\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=csv.QUOTE_ALL)\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=1)\n", "testsuite_b": "import csv\n\n# ruleid:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"')\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=csv.QUOTE_ALL)\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=1)\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, dialect='unix')\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, dialect=csv.unix_dialect)\n", "ground_truth": "rules:\n  - id: unquoted-csv-writer\n    patterns:\n      - pattern-not: csv.writer(..., quoting=csv.QUOTE_ALL, ...)\n      - pattern-not: csv.writer(..., quoting=1, ...)\n      - pattern-not: csv.writer(..., dialect='unix', ...)\n      - pattern-not: csv.writer(..., dialect=csv.unix_dialect, ...)\n      - pattern: csv.writer(...)\n    message: Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\n    metadata:\n      cwe: \"CWE-1236: Improper Neutralization of Formula Elements in a CSV File\"\n      owasp: \"A1: Injection\"\n      references:\n        - https://affinity-it-security.com/how-to-prevent-csv-injection/\n      category: security\n      technology:\n        - python\n    fix-regex:\n      regex: (.*)\\)\n      replacement: \\1, quoting=csv.QUOTE_ALL)\n    languages: [python]\n    severity: ERROR\n", "rule_path": "extend_dataset/81b027c4/before/unquoted-csv-writer.yaml", "test_path": "extend_dataset/81b027c4/after/unquoted-csv-writer.py", "category": "historical", "splited_testsuite_b": ["import csv\n\n# ruleid:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"')", "import csv\n\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=csv.QUOTE_ALL)", "import csv\n\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=1)", "import csv\n\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, dialect='unix')"], "actual": [true, false, false, true], "expected": [true, false, false, false], "index": 40, "commit_message": "Filter out unix dialect from csvwriter rule (#1874)", "commit_date_str": "2022-03-09 12:03:13 -0600", "leaf_count": 3, "line_count": 4}
{"id": "unquoted-csv-writer", "rule": "rules:\n- id: unquoted-csv-writer\n  patterns:\n  - pattern-not: csv.writer(..., quoting=csv.QUOTE_ALL, ...)\n  - pattern-not: csv.writer(..., quoting=1, ...)\n  - pattern: csv.writer(...)\n  message: Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\n  fix-regex:\n    regex: (.*)\\)\n    replacement: \\1, quoting=csv.QUOTE_ALL)\n  languages: [python]\n  severity: ERROR\n", "failed_tests": ["import csv\n\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, dialect=csv.unix_dialect)"], "failed_type": "fp", "testsuite_a": "import csv\n\n# ruleid:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"')\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=csv.QUOTE_ALL)\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=1)\n", "testsuite_b": "import csv\n\n# ruleid:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"')\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=csv.QUOTE_ALL)\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=1)\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, dialect='unix')\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, dialect=csv.unix_dialect)\n", "ground_truth": "rules:\n  - id: unquoted-csv-writer\n    patterns:\n      - pattern-not: csv.writer(..., quoting=csv.QUOTE_ALL, ...)\n      - pattern-not: csv.writer(..., quoting=1, ...)\n      - pattern-not: csv.writer(..., dialect='unix', ...)\n      - pattern-not: csv.writer(..., dialect=csv.unix_dialect, ...)\n      - pattern: csv.writer(...)\n    message: Found an unquoted CSV writer. This is susceptible to injection. Use 'quoting=csv.QUOTE_ALL'.\n    metadata:\n      cwe: \"CWE-1236: Improper Neutralization of Formula Elements in a CSV File\"\n      owasp: \"A1: Injection\"\n      references:\n        - https://affinity-it-security.com/how-to-prevent-csv-injection/\n      category: security\n      technology:\n        - python\n    fix-regex:\n      regex: (.*)\\)\n      replacement: \\1, quoting=csv.QUOTE_ALL)\n    languages: [python]\n    severity: ERROR\n", "rule_path": "extend_dataset/81b027c4/before/unquoted-csv-writer.yaml", "test_path": "extend_dataset/81b027c4/after/unquoted-csv-writer.py", "category": "historical", "splited_testsuite_b": ["import csv\n\n# ruleid:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"')", "import csv\n\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=csv.QUOTE_ALL)", "import csv\n\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, delimiter=',', quotechar='\"', quoting=1)", "import csv\n\n# ok:unquoted-csv-writer\ncsv.writer(csvfile, dialect=csv.unix_dialect)"], "actual": [true, false, false, true], "expected": [true, false, false, false], "index": 41, "commit_message": "Filter out unix dialect from csvwriter rule (#1874)", "commit_date_str": "2022-03-09 12:03:13 -0600", "leaf_count": 3, "line_count": 4}
{"id": "alias-path-traversal", "rule": "rules:\n- id: alias-path-traversal\n  patterns:\n  - pattern: |\n      location ... {\n        ...\n        alias .../;\n        ...\n      }\n  - pattern-not-inside: location /.../ { ... ... }\n  fix-regex:\n    regex: location\\s+([A-Za-z0-9/-_\\.]+)\n    replacement: location \\1/\n  languages:\n  - generic\n  severity: WARNING\n  message: >-\n    The alias in this location block is subject to a path traversal\n    because the location path does not end in a path separator (e.g., '/').\n    To fix, add a path separator to the end of the path.\n", "failed_tests": ["server {\n  listen 80;\n\n  # ok: alias-path-traversal\n  location /fm/ {\n    alias /usr/local/web/fm/dist/;\n    index index.php;\n\n    location ~ /([^/]+\\.php)$ {\n      try_files     /$1 =404;\n      include       fastcgi_params;\n    }\n  }\n}"], "failed_type": "fp", "testsuite_a": "server {\n  listen 80;\n\n  # ruleid: alias-path-traversal\n  location /i {\n    alias /data/w3/images/;\n  }\n\n  # ok: alias-path-traversal\n  location /i/ {\n    alias /data/w3/images/;\n  }\n\n  # ok: alias-path-traversal\n  location /i {\n    alias /data/w3/images;\n  }\n}\n", "testsuite_b": "server {\n  listen 80;\n\n  # ruleid: alias-path-traversal\n  location /i {\n    alias /data/w3/images/;\n  }\n\n  # ok: alias-path-traversal\n  location /i/ {\n    alias /data/w3/images/;\n  }\n\n  # ok: alias-path-traversal\n  location /i {\n    alias /data/w3/images;\n  }\n\n  # ok: alias-path-traversal\n  location /fm/ {\n    alias /usr/local/web/fm/dist/;\n    index index.php;\n\n    location ~ /([^/]+\\.php)$ {\n      try_files     /$1 =404;\n      include       fastcgi_params;\n    }\n  }\n}\n", "ground_truth": "rules:\n- id: alias-path-traversal\n  patterns:\n     - pattern: |\n          location $...LOCATION {\n            ...\n            alias .../;\n            ...\n          }\n     - metavariable-pattern:\n        metavariable: $...LOCATION\n        pattern-regex: ^.*[^/]$\n  paths:\n    include:\n    - '*.conf'\n    - '*.vhost'\n    - sites-available/*\n    - sites-enabled/*\n  fix-regex:\n    regex: location\\s+([A-Za-z0-9/-_\\.]+)\n    replacement: location \\1/\n  languages:\n  - generic\n  severity: WARNING\n  message: >-\n    The alias in this location block is subject to a path traversal\n    because the location path does not end in a path separator (e.g., '/').\n    To fix, add a path separator to the end of the path.\n  metadata:\n    cwe:\n    - \"CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')\"\n    source-rule-url: https://github.com/yandex/gixy/blob/master/docs/en/plugins/aliastraversal.md\n    category: security\n    technology:\n    - nginx\n    confidence: LOW\n    owasp:\n    - A05:2017 - Broken Access Control\n    - A01:2021 - Broken Access Control\n    references:\n    - https://owasp.org/Top10/A01_2021-Broken_Access_Control\n    - https://www.acunetix.com/vulnerabilities/web/path-traversal-via-misconfigured-nginx-alias/\n    - https://www.youtube.com/watch?v=CIhHpkybYsY\n    - https://github.com/orangetw/My-Presentation-Slides/blob/main/data/2018-Breaking-Parser-Logic-Take-Your-Path-Normalization-Off-And-Pop-0days-Out.pdf\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n", "rule_path": "extend_dataset/bafd13e1/before/alias-path-traversal.yaml", "test_path": "extend_dataset/bafd13e1/after/alias-path-traversal.conf", "category": "historical", "splited_testsuite_b": ["server {\n  listen 80;\n\n  # ruleid: alias-path-traversal\n  location /i {\n    alias /data/w3/images/;\n  }\n}", "server {\n  listen 80;\n\n  # ok: alias-path-traversal\n  location /i/ {\n    alias /data/w3/images/;\n  }\n}", "server {\n  listen 80;\n\n  # ok: alias-path-traversal\n  location /i {\n    alias /data/w3/images;\n  }\n}", "server {\n  listen 80;\n\n  # ok: alias-path-traversal\n  location /fm/ {\n    alias /usr/local/web/fm/dist/;\n    index index.php;\n\n    location ~ /([^/]+\\.php)$ {\n      try_files     /$1 =404;\n      include       fastcgi_params;\n    }\n  }\n}"], "actual": [true, false, false, true], "expected": [true, false, false, false], "index": 42, "commit_message": "Fix alias path traversal rule (#3075)", "commit_date_str": "2023-08-30 11:59:44 -0700", "leaf_count": 2, "line_count": 3}
{"id": "preg-replace-eval", "rule": "rules:\n- id: preg-replace-eval\n  patterns:\n  - pattern: preg_replace(...);\n  - pattern-not: preg_replace(\"...\", ...);\n  message: >-\n    Calling preg_replace with user input in the pattern can lead to arbitrary\n    code execution. The eval modifier (`/e`) evaluates the replacement argument\n    as code.\n  languages: [php]\n  severity: ERROR\n", "failed_tests": ["```php\n<?php\n\n// ok: preg-replace-eval\npreg_replace(array(\"/hello/\"), array(\"world\"), \"hello world\");\n```"], "failed_type": "fp", "testsuite_a": "<?php\n\n// ruleid: preg-replace-eval\npreg_replace($user_input_pattern, $replacement, $string);\n\n// ok: preg-replace-eval\npreg_replace(\"/some_regexp/\", \"replacement\", $string_before);\n", "testsuite_b": "<?php\n\n// ruleid: preg-replace-eval\npreg_replace($user_input_pattern, $replacement, $string);\n\n// ok: preg-replace-eval\npreg_replace(\"/some_regexp/\", \"replacement\", $string_before);\n\n// ok: preg-replace-eval\npreg_replace(array(\"/hello/\"), array(\"world\"), \"hello world\");\n\n$input = array(\"/constant/\");\n// ok: preg-replace-eval\npreg_replace($input, array(\"world\"), \"hello world\");\n\n", "ground_truth": "rules:\n- id: preg-replace-eval\n  patterns:\n  - pattern: preg_replace(...);\n  - pattern-not: preg_replace(\"...\", ...);\n  - pattern-not: preg_replace(array(\"...\"), ...);\n  - pattern-not-inside: |\n      $VAR = array(\"...\");\n      ...\n      preg_replace($VAR, ...);\n  message: >-\n    Calling preg_replace with user input in the pattern can lead to arbitrary\n    code execution. The eval modifier (`/e`) evaluates the replacement argument\n    as code.\n  metadata:\n    cwe:\n    - \"CWE-94: Improper Control of Generation of Code ('Code Injection')\"\n    references:\n    - https://www.php.net/manual/en/function.preg-replace.php\n    - https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php\n    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PregReplaceSniff.php\n    category: security\n    technology:\n    - php\n    owasp:\n    - A03:2021 - Injection\n    cwe2022-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  languages: [php]\n  severity: ERROR\n", "rule_path": "extend_dataset/d9ee565f/before/preg-replace-eval.yaml", "test_path": "extend_dataset/d9ee565f/after/preg-replace-eval.php", "category": "historical", "splited_testsuite_b": ["```php\n<?php\n\n// ruleid: preg-replace-eval\npreg_replace($user_input_pattern, $replacement, $string);\n```", "```php\n<?php\n\n// ok: preg-replace-eval\npreg_replace(\"/some_regexp/\", \"replacement\", $string_before);\n```", "```php\n<?php\n\n// ok: preg-replace-eval\npreg_replace(array(\"/hello/\"), array(\"world\"), \"hello world\");\n```"], "actual": [true, false, true], "expected": [true, false, false], "index": 43, "commit_message": "fix false positives in preg-replace-eval rule (#2458)", "commit_date_str": "2022-10-10 17:09:42 +0200", "leaf_count": 2, "line_count": 3}
{"id": "preg-replace-eval", "rule": "rules:\n- id: preg-replace-eval\n  patterns:\n  - pattern: preg_replace(...);\n  - pattern-not: preg_replace(\"...\", ...);\n  message: >-\n    Calling preg_replace with user input in the pattern can lead to arbitrary\n    code execution. The eval modifier (`/e`) evaluates the replacement argument\n    as code.\n  languages: [php]\n  severity: ERROR\n", "failed_tests": ["```php\n<?php\n\n$input = array(\"/constant/\");\n// ok: preg-replace-eval\npreg_replace($input, array(\"world\"), \"hello world\");\n```"], "failed_type": "fp", "testsuite_a": "<?php\n\n// ruleid: preg-replace-eval\npreg_replace($user_input_pattern, $replacement, $string);\n\n// ok: preg-replace-eval\npreg_replace(\"/some_regexp/\", \"replacement\", $string_before);\n", "testsuite_b": "<?php\n\n// ruleid: preg-replace-eval\npreg_replace($user_input_pattern, $replacement, $string);\n\n// ok: preg-replace-eval\npreg_replace(\"/some_regexp/\", \"replacement\", $string_before);\n\n// ok: preg-replace-eval\npreg_replace(array(\"/hello/\"), array(\"world\"), \"hello world\");\n\n$input = array(\"/constant/\");\n// ok: preg-replace-eval\npreg_replace($input, array(\"world\"), \"hello world\");\n\n", "ground_truth": "rules:\n- id: preg-replace-eval\n  patterns:\n  - pattern: preg_replace(...);\n  - pattern-not: preg_replace(\"...\", ...);\n  - pattern-not: preg_replace(array(\"...\"), ...);\n  - pattern-not-inside: |\n      $VAR = array(\"...\");\n      ...\n      preg_replace($VAR, ...);\n  message: >-\n    Calling preg_replace with user input in the pattern can lead to arbitrary\n    code execution. The eval modifier (`/e`) evaluates the replacement argument\n    as code.\n  metadata:\n    cwe:\n    - \"CWE-94: Improper Control of Generation of Code ('Code Injection')\"\n    references:\n    - https://www.php.net/manual/en/function.preg-replace.php\n    - https://www.php.net/manual/en/reference.pcre.pattern.modifiers.php\n    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/PregReplaceSniff.php\n    category: security\n    technology:\n    - php\n    owasp:\n    - A03:2021 - Injection\n    cwe2022-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  languages: [php]\n  severity: ERROR\n", "rule_path": "extend_dataset/d9ee565f/before/preg-replace-eval.yaml", "test_path": "extend_dataset/d9ee565f/after/preg-replace-eval.php", "category": "historical", "splited_testsuite_b": ["```php\n<?php\n\n// ruleid: preg-replace-eval\npreg_replace($user_input_pattern, $replacement, $string);\n```", "```php\n<?php\n\n// ok: preg-replace-eval\npreg_replace(\"/some_regexp/\", \"replacement\", $string_before);\n```", "```php\n<?php\n\n$input = array(\"/constant/\");\n// ok: preg-replace-eval\npreg_replace($input, array(\"world\"), \"hello world\");\n```"], "actual": [true, false, true], "expected": [true, false, false], "index": 44, "commit_message": "fix false positives in preg-replace-eval rule (#2458)", "commit_date_str": "2022-10-10 17:09:42 +0200", "leaf_count": 2, "line_count": 3}
{"id": "tainted-url-host", "rule": "rules:\n- id: tainted-url-host\n  languages:\n  - go\n  message: >-\n    User data flows into the host portion of this manually-constructed URL.\n    This could allow an attacker to send data to their own server, potentially exposing\n    sensitive data such as cookies or authorization information sent with this request.\n    They could also probe internal servers or other resources that the server runnig\n    this code can access. (This is called server-side request forgery, or SSRF.) Do\n    not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode\n    the correct host.\n  mode: taint\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - pattern: fmt.Fprintf($F, \"$URLSTR\", ...)\n      - pattern: fmt.Sprintf(\"$URLSTR\", ...)\n      - pattern: fmt.Printf(\"$URLSTR\", ...)\n      - pattern: '\"$URLSTR\" + ...'\n    - metavariable-regex:\n        metavariable: $URLSTR\n        regex: http(s?)://%(v|s|q).*\n  pattern-sources:\n  - pattern-either:\n    - pattern: '($REQUEST : *http.Request).$ANYTHING'\n    - pattern: '($REQUEST : http.Request).$ANYTHING'\n  severity: WARNING\n", "failed_tests": ["package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"strings\"\n)\n\nfunc newRedirectServer(addr string, rootPath string) *http.Server {\n    return &http.Server{\n        Addr: addr,\n        Handler: http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {\n            // ruleid: tainted-url-host\n            target := \"https://\" + req.Host\n            if rootPath != \"\" {\n                target += \"/\" + strings.TrimRight(strings.TrimLeft(rootPath, \"/\"), \"/\")\n            }\n            target += req.URL.Path\n            if len(req.URL.RawQuery) > 0 {\n                target += \"?\" + req.URL.RawQuery\n            }\n            http.Redirect(w, req, target, http.StatusTemporaryRedirect)\n        }),\n    }\n}"], "failed_type": "fn", "testsuite_a": "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc handlerIndex(w http.ResponseWriter, r *http.Request) {\n    tr := &http.Transport{\n            TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n        }\n\n    client := &http.Client{Transport: tr}\n\n    if r.Method == \"POST\" && r.URL.Path == \"/api\" {\n        // ruleid: tainted-url-host\n        url := fmt.Sprintf(\"https://%v/api\", r.URL.Query().Get(\"proxy\"))\n\n        resp, err := client.Post(url, \"application/json\", r.Body)\n\n        if err != nil {\n            w.WriteHeader(http.StatusInternalServerError)\n            return\n        }\n\n        defer resp.Body.Close()\n\n        if resp.StatusCode != 200 {\n            w.WriteHeader(500)\n            return\n        }\n\n        w.Write([]byte(fmt.Sprintf(\"{\\\"host\\\":\\\"%v\\\"}\", r.URL.Query().Get(\"proxy\"))))\n        return\n    } else {\n        proxy := r.URL.Query()[\"proxy\"]\n        secure := r.URL.Query()[\"secure\"]\n\n        if (secure) {\n            // ruleid: tainted-url-host\n            url := fmt.Sprintf(\"https://%s\", proxy)\n        } else {\n            // ruleid: tainted-url-host\n            url := fmt.Sprintf(\"http://%q\", proxy)\n        }\n        resp, err := client.Post(url, \"application/json\", r.Body)\n    }\n}\n\nfunc handlerOther(w http.ResponseWriter, r *http.Request) {\n    tr := &http.Transport{\n            TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n        }\n\n    client := &http.Client{Transport: tr}\n\n    if r.Method == \"POST\" && r.URL.Path == \"/api\" {\n        // ruleid: tainted-url-host\n        url := fmt.Printf(\"https://%v/api\", r.URL.Query().Get(\"proxy\"))\n\n        resp, err := client.Post(url, \"application/json\", r.Body)\n\n        if err != nil {\n            w.WriteHeader(http.StatusInternalServerError)\n            return\n        }\n\n        defer resp.Body.Close()\n\n        if resp.StatusCode != 200 {\n            w.WriteHeader(500)\n            return\n        }\n\n        w.Write([]byte(fmt.Sprintf(\"{\\\"host\\\":\\\"%v\\\"}\", r.URL.Query().Get(\"proxy\"))))\n        return\n    } else {\n        proxy := r.URL.Query()[\"proxy\"]\n        secure := r.URL.Query()[\"secure\"]\n\n        if (secure) {\n            // ruleid: tainted-url-host\n            fmt.Fprintf(w, \"https://%s\", proxy)\n        } else {\n            // ruleid: tainted-url-host\n            fmt.Fprintf(w, \"http://%q\", proxy)\n        }\n        resp, err := client.Post(url, \"application/json\", r.Body)\n    }\n}\n\nfunc handlerOk(w http.ResponseWriter, r *http.Request) {\n    tr := &http.Transport{\n            TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n        }\n\n    client := &http.Client{Transport: tr}\n\n    if r.Method == \"POST\" && r.URL.Path == \"/api\" {\n        // ok: tainted-url-host\n        url := fmt.Printf(\"https://example.com/%v\", r.URL.Query().Get(\"proxy\"))\n\n        resp, err := client.Post(url, \"application/json\", r.Body)\n\n        if err != nil {\n            w.WriteHeader(http.StatusInternalServerError)\n            return\n        }\n\n        defer resp.Body.Close()\n\n        if resp.StatusCode != 200 {\n            w.WriteHeader(500)\n            return\n        }\n\n        w.Write([]byte(fmt.Sprintf(\"{\\\"host\\\":\\\"%v\\\"}\", r.URL.Query().Get(\"proxy\"))))\n        return\n    } else {\n        proxy := r.URL.Query()[\"proxy\"]\n        secure := r.URL.Query()[\"secure\"]\n\n        if (secure) {\n            // ok: tainted-url-host\n            url := fmt.Sprintf(\"https://example.com/%s\", proxy)\n        } else {\n            // ok: tainted-url-host\n            fmt.Fprintf(w, \"http://example.com/%q\", proxy)\n        }\n        resp, err := client.Post(url, \"application/json\", r.Body)\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", handlerIndex)\n    http.HandleFunc(\"/other\", handleOther)\n    http.HandleFunc(\"/ok\", handleOk)\n    http.ListenAndServe(\":8888\", nil)\n}\n", "testsuite_b": "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc handlerIndex(w http.ResponseWriter, r *http.Request) {\n    tr := &http.Transport{\n            TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n        }\n\n    client := &http.Client{Transport: tr}\n\n    if r.Method == \"POST\" && r.URL.Path == \"/api\" {\n        // ruleid: tainted-url-host\n        url := fmt.Sprintf(\"https://%v/api\", r.URL.Query().Get(\"proxy\"))\n\n        resp, err := client.Post(url, \"application/json\", r.Body)\n\n        if err != nil {\n            w.WriteHeader(http.StatusInternalServerError)\n            return\n        }\n\n        defer resp.Body.Close()\n\n        if resp.StatusCode != 200 {\n            w.WriteHeader(500)\n            return\n        }\n\n        w.Write([]byte(fmt.Sprintf(\"{\\\"host\\\":\\\"%v\\\"}\", r.URL.Query().Get(\"proxy\"))))\n        return\n    } else {\n        proxy := r.URL.Query()[\"proxy\"]\n        secure := r.URL.Query()[\"secure\"]\n\n        if (secure) {\n            // ruleid: tainted-url-host\n            url := fmt.Sprintf(\"https://%s\", proxy)\n        } else {\n            // ruleid: tainted-url-host\n            url := fmt.Sprintf(\"http://%q\", proxy)\n        }\n        resp, err := client.Post(url, \"application/json\", r.Body)\n    }\n}\n\nfunc handlerOther(w http.ResponseWriter, r *http.Request) {\n    tr := &http.Transport{\n            TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n        }\n\n    client := &http.Client{Transport: tr}\n\n    if r.Method == \"POST\" && r.URL.Path == \"/api\" {\n        // ruleid: tainted-url-host\n        url := fmt.Printf(\"https://%v/api\", r.URL.Query().Get(\"proxy\"))\n\n        resp, err := client.Post(url, \"application/json\", r.Body)\n\n        if err != nil {\n            w.WriteHeader(http.StatusInternalServerError)\n            return\n        }\n\n        defer resp.Body.Close()\n\n        if resp.StatusCode != 200 {\n            w.WriteHeader(500)\n            return\n        }\n\n        w.Write([]byte(fmt.Sprintf(\"{\\\"host\\\":\\\"%v\\\"}\", r.URL.Query().Get(\"proxy\"))))\n        return\n    } else {\n        proxy := r.URL.Query()[\"proxy\"]\n        secure := r.URL.Query()[\"secure\"]\n\n        if (secure) {\n            // ruleid: tainted-url-host\n            fmt.Fprintf(w, \"https://%s\", proxy)\n        } else {\n            // ruleid: tainted-url-host\n            fmt.Fprintf(w, \"http://%q\", proxy)\n        }\n        resp, err := client.Post(url, \"application/json\", r.Body)\n    }\n}\n\nfunc handlerOk(w http.ResponseWriter, r *http.Request) {\n    tr := &http.Transport{\n            TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n        }\n\n    client := &http.Client{Transport: tr}\n\n    if r.Method == \"POST\" && r.URL.Path == \"/api\" {\n        // ok: tainted-url-host\n        url := fmt.Printf(\"https://example.com/%v\", r.URL.Query().Get(\"proxy\"))\n\n        resp, err := client.Post(url, \"application/json\", r.Body)\n\n        if err != nil {\n            w.WriteHeader(http.StatusInternalServerError)\n            return\n        }\n\n        defer resp.Body.Close()\n\n        if resp.StatusCode != 200 {\n            w.WriteHeader(500)\n            return\n        }\n\n        w.Write([]byte(fmt.Sprintf(\"{\\\"host\\\":\\\"%v\\\"}\", r.URL.Query().Get(\"proxy\"))))\n        return\n    } else {\n        proxy := r.URL.Query()[\"proxy\"]\n        secure := r.URL.Query()[\"secure\"]\n\n        if (secure) {\n            // ok: tainted-url-host\n            url := fmt.Sprintf(\"https://example.com/%s\", proxy)\n        } else {\n            // ok: tainted-url-host\n            fmt.Fprintf(w, \"http://example.com/%q\", proxy)\n        }\n        resp, err := client.Post(url, \"application/json\", r.Body)\n    }\n}\n\nfunc newRedirectServer(addr string, rootPath string) *http.Server {\n    return &http.Server{\n        Addr: addr,\n        Handler: http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {\n            // ruleid: tainted-url-host\n            target := \"https://\" + req.Host\n            if rootPath != \"\" {\n                target += \"/\" + strings.TrimRight(strings.TrimLeft(rootPath, \"/\"), \"/\")\n            }\n            target += req.URL.Path\n            if len(req.URL.RawQuery) > 0 {\n                target += \"?\" + req.URL.RawQuery\n            }\n            http.Redirect(w, req, target, http.StatusTemporaryRedirect)\n        }),\n    }\n}\n\nfunc main() {\n    http.HandleFunc(\"/\", handlerIndex)\n    http.HandleFunc(\"/other\", handleOther)\n    http.HandleFunc(\"/ok\", handleOk)\n    http.ListenAndServe(\":8888\", nil)\n}\n", "ground_truth": "rules:\n- id: tainted-url-host\n  languages:\n  - go\n  message: User data flows into the host portion of this manually-constructed URL. This could allow an attacker to send data\n    to their own server, potentially exposing sensitive data such as cookies or authorization information sent with this request.\n    They could also probe internal servers or other resources that the server runnig this code can access. (This is called\n    server-side request forgery, or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode\n    the correct host.\n  metadata:\n    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'\n    owasp:\n    - A10:2021\n    - A01:2017\n    references:\n    - https://goteleport.com/blog/ssrf-attacks/\n    category: security\n    technology:\n    - go\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n  mode: taint\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - pattern: fmt.Fprintf($F, \"$URLSTR\", ...)\n          - pattern: fmt.Sprintf(\"$URLSTR\", ...)\n          - pattern: fmt.Printf(\"$URLSTR\", ...)\n        - metavariable-regex:\n            metavariable: $URLSTR\n            regex: http(s?)://%(v|s|q).*\n      - patterns:\n        - pattern: '\"$URLSTR\" + ...'\n        - metavariable-regex:\n            metavariable: $URLSTR\n            regex: \\w+://.*\n  pattern-sources:\n  - pattern-either:\n    - pattern: '($REQUEST : *http.Request).$ANYTHING'\n    - pattern: '($REQUEST : http.Request).$ANYTHING'\n  severity: WARNING\n", "rule_path": "extend_dataset/83897b10/before/tainted-url-host.yaml", "test_path": "extend_dataset/83897b10/after/tainted-url-host.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc handlerIndex(w http.ResponseWriter, r *http.Request) {\n    tr := &http.Transport{\n            TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n        }\n\n    client := &http.Client{Transport: tr}\n\n    if r.Method == \"POST\" && r.URL.Path == \"/api\" {\n        // ruleid: tainted-url-host\n        url := fmt.Sprintf(\"https://%v/api\", r.URL.Query().Get(\"proxy\"))\n\n        resp, err := client.Post(url, \"application/json\", r.Body)\n\n        if err != nil {\n            w.WriteHeader(http.StatusInternalServerError)\n            return\n        }\n\n        defer resp.Body.Close()\n\n        if resp.StatusCode != 200 {\n            w.WriteHeader(500)\n            return\n        }\n\n        w.Write([]byte(fmt.Sprintf(\"{\\\"host\\\":\\\"%v\\\"}\", r.URL.Query().Get(\"proxy\"))))\n        return\n    } else {\n        proxy := r.URL.Query()[\"proxy\"]\n        secure := r.URL.Query()[\"secure\"]\n\n        if (secure) {\n            // ruleid: tainted-url-host\n            url := fmt.Sprintf(\"https://%s\", proxy)\n        } else {\n            // ruleid: tainted-url-host\n            url := fmt.Sprintf(\"http://%q\", proxy)\n        }\n        resp, err := client.Post(url, \"application/json\", r.Body)\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc handlerOther(w http.ResponseWriter, r *http.Request) {\n    tr := &http.Transport{\n            TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n        }\n\n    client := &http.Client{Transport: tr}\n\n    if r.Method == \"POST\" && r.URL.Path == \"/api\" {\n        // ruleid: tainted-url-host\n        url := fmt.Printf(\"https://%v/api\", r.URL.Query().Get(\"proxy\"))\n\n        resp, err := client.Post(url, \"application/json\", r.Body)\n\n        if err != nil {\n            w.WriteHeader(http.StatusInternalServerError)\n            return\n        }\n\n        defer resp.Body.Close()\n\n        if resp.StatusCode != 200 {\n            w.WriteHeader(500)\n            return\n        }\n\n        w.Write([]byte(fmt.Sprintf(\"{\\\"host\\\":\\\"%v\\\"}\", r.URL.Query().Get(\"proxy\"))))\n        return\n    } else {\n        proxy := r.URL.Query()[\"proxy\"]\n        secure := r.URL.Query()[\"secure\"]\n\n        if (secure) {\n            // ruleid: tainted-url-host\n            fmt.Fprintf(w, \"https://%s\", proxy)\n        } else {\n            // ruleid: tainted-url-host\n            fmt.Fprintf(w, \"http://%q\", proxy)\n        }\n        resp, err := client.Post(url, \"application/json\", r.Body)\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n)\n\nfunc handlerOk(w http.ResponseWriter, r *http.Request) {\n    tr := &http.Transport{\n            TLSClientConfig: &tls.Config{InsecureSkipVerify: true},\n        }\n\n    client := &http.Client{Transport: tr}\n\n    if r.Method == \"POST\" && r.URL.Path == \"/api\" {\n        // ok: tainted-url-host\n        url := fmt.Printf(\"https://example.com/%v\", r.URL.Query().Get(\"proxy\"))\n\n        resp, err := client.Post(url, \"application/json\", r.Body)\n\n        if err != nil {\n            w.WriteHeader(http.StatusInternalServerError)\n            return\n        }\n\n        defer resp.Body.Close()\n\n        if resp.StatusCode != 200 {\n            w.WriteHeader(500)\n            return\n        }\n\n        w.Write([]byte(fmt.Sprintf(\"{\\\"host\\\":\\\"%v\\\"}\", r.URL.Query().Get(\"proxy\"))))\n        return\n    } else {\n        proxy := r.URL.Query()[\"proxy\"]\n        secure := r.URL.Query()[\"secure\"]\n\n        if (secure) {\n            // ok: tainted-url-host\n            url := fmt.Sprintf(\"https://example.com/%s\", proxy)\n        } else {\n            // ok: tainted-url-host\n            fmt.Fprintf(w, \"http://example.com/%q\", proxy)\n        }\n        resp, err := client.Post(url, \"application/json\", r.Body)\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"strings\"\n)\n\nfunc newRedirectServer(addr string, rootPath string) *http.Server {\n    return &http.Server{\n        Addr: addr,\n        Handler: http.HandlerFunc(func(w http.ResponseWriter, req *http.Request) {\n            // ruleid: tainted-url-host\n            target := \"https://\" + req.Host\n            if rootPath != \"\" {\n                target += \"/\" + strings.TrimRight(strings.TrimLeft(rootPath, \"/\"), \"/\")\n            }\n            target += req.URL.Path\n            if len(req.URL.RawQuery) > 0 {\n                target += \"?\" + req.URL.RawQuery\n            }\n            http.Redirect(w, req, target, http.StatusTemporaryRedirect)\n        }),\n    }\n}"], "actual": [true, true, false, false], "expected": [true, true, false, true], "index": 45, "commit_message": "Fix bug in Go rule tainted-url-host which assumed concatenation included format string parameters (#1560)", "commit_date_str": "2021-10-26 19:54:35 -0500", "leaf_count": 8, "line_count": 14}
{"id": "generic-api-key", "rule": "rules:\n- id: generic-api-key\n  message: A gitleaks generic-api-key was detected which attempts to identify hard-coded\n    credentials. It is not recommended to store credentials in source-code, as this\n    risks secrets being leaked and used by either an internal or external malicious\n    adversary. It is recommended to use environment variables to securely provide\n    credentials or retrieve credentials from a secure vault or HSM (Hardware Security\n    Module). This rule can introduce a lot of false positives, it is not recommended\n    to be used in PR comments.\n  languages:\n  - regex\n  severity: INFO\n  patterns:\n    # This will likely remove some true positives, but this rule is overly noisy\n    # Added (?-s) to prevent multi-lines with . which was causing a lot of FPs\n    # added negative lookaheads to remove:\n      # [a-z]+\\.[a-zA-Z]+ (this.valueValue)\n      # .* \n        # \\d{4}-\\d{2}-\\d{2} (2017/03/12)\n        # [a-z]+-[a-z]+.*. abc123-abc123 \n        # :*(?!(\"|'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,  : 0123.0312abc, \n        # [A-Z]+_[A-Z]+_ VALUE_VALUE_\n  - pattern-regex: \n      (?i)(?-s)(?:key|api|token|secret|client|passwd|password|auth|access).(?:[0-9a-z\\-_\\t\n      .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:).(?:'|\\\"|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2}|[a-z]+-[a-z]+.*)|:*(?!(\"|'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)([0-9a-z\\-_.=]{10,150})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)\n  - metavariable-analysis:\n      analyzer: entropy\n      metavariable: $4\n  - focus-metavariable: $4\n      # These remove test examples in addition to public keys, author= etc. \n  - pattern-not-regex: (?i)publickeytoken=.*\n  - pattern-not-regex: (?i)(?:\"|')pub\n  - pattern-not-regex: pubkey.*\n  - pattern-not-regex: ((token-drop|asset_key)(\"|'):.*0x)\n  - pattern-not-regex: \n      (?i)(keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|public.*key|\\.json|author=|author(\"|'))\n", "failed_tests": ["// ruleid: generic-api-key\nprivate const string UserCreationPasswordSecretKey = @\"6da89121079f83b2eb6acccf8219ea982c3d79bccc3e9c6a85856480661f8fde\";"], "failed_type": "fn", "testsuite_a": "// ruleid: generic-api-key\ngeneric_api_token = \"CLOJARS_34bf0e88955ff5a1c328d6a7491acc4f48e865a7b8dd4d70a70749037443\"\n// ruleid: generic-api-key\ngeneric_api_token = \"Zf3D0LXCM3EIMbgJpUNnkRtOfOueHznB\"\n// ruleid: generic-api-key\n\"client_id\" : \"0afae57f3ccfd9d7f5767067bc48b30f719e271ba470488056e37ab35d4b6506\"\n// ruleid: generic-api-key\n\"client_secret\" : \"6da89121079f83b2eb6acccf8219ea982c3d79bccc3e9c6a85856480661f8fde\"\n\n// ok: generic-api-key\nnewPassword=this.mPassword\n// ok: generic-api-key\nclient_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.client-vpn-endpoint.id\n// ok: generic-api-key\npassword combination. R5: Regulatory--21\n\n/ ok: generic-api-key\nnewPassword=this.mPassword\n// ok: generic-api-key\nclient_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.client-vpn-endpoint.id\n// ok: generic-api-key\npassword combination. R5: Regulatory--21\n\n// ok: generic-api-key\nSLACK_BOT_TOKEN=xoxb-0000000000-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   \n\n// ok: generic-api-key\n{\n  \"oauth\": {\n    \"clientId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\",\n    \"clientSecret\": \"xxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"callback\": \"http://localhost:8080/oauth2callback\"\n  },\n  \"port\": 8081\n}\n\n// todook: generic-api-key\ngithub.com/Azure/go-autorest/autorest/azure/auth v0.5.11 h1:P6bYXFoao05z5uhOQzbC3Qd8JqF3jUoocoTeIxkp2cA=\n\n// ok: generic-api-key\n<assemblyIdentity name=\"Microsoft.IdentityModel.Protocols.OpenIdConnect\"                                 \n  publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />   \n\n// ok: generic-api-key\nexport const NATIVE_TOKEN_ADDRESS = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\n// ok: generic-api-key\ntokenId: erc1155.tokenId,\n\n \"pubkey\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n// ok: generic-api-key\n'@vue/devtools-api': 'vue-devtools-stub'\n\n// ok: generic-api-key\n<section name=\"entityFramework\" type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKey=b77a5c561934e089\" requirePermission=\"false\" />\n\n// ok: generic-api-key\nIMAGER_S3_KEY=AWS_S3_KEY\n\n// ok: generic-api-key\n'@vue/devtools-api': 'vue-devtools-stub'\n\n\n// ok\nx.MaxKey = mongodb.MaxKey;\n\n\n// ok\nUser.findOne({ 'token': req.query.token }).exec(function(err, user)\n\n// ok\n```\nSLACK_VERIFICATION_TOKEN=xxxxxxxxxxxxxxxxxxx\nSLACK_BOT_TOKEN=xoxb-0000000000-example\nSLACK_WEBHOOK_URL=https://hooks.slack.com/services/xxxxxxxxx/yyyyyyyyy/zzzzzzzzzzzzzzzzzzzzzzzz\n```\n\n// ok: generic-api-key\n  stripe: {\n    host: 'api.stripe.com',\n    secretKey: 'sk_test_XXXXXXXXXXXXXXXXXXXXXX',\n  },\n\n// ok: generic-api-key\nqs: {\n    'api-version': '2017-11-11-Preview'\n},\n\n// ok: generic-api-key\nGOOGLE_SECRET=<SECRET>\nIMAGER_S3_KEY=AWS_S3_KEY\n\n\n// ok: generic-api-key\nexport const stackInputsV1: StackInputs = {\n  gitHubAppWebHookSecret: 'arn:aws:secretsmanager:us-west-2:12321321:secret:fosoodsaeGitHubAppWebHookSecret-21321321',\n \n}\n\n// ok: generic-api-key\nauthors: [someSuperC00lauthor]\n\n// ok: generic-api-key\nkey = axis._maxTicksKey,\n// ok: generic-api-key\n\"capitalization\": 607352.81238977,\n// ok: generic-api-key\ntokenId: erc1155.tokenId\n// ok: generic-api-key\nkey: \"pricing.FAQ.link\"\n// ok: generic-api-key\ntokenId: erc1155.tokenId,\n\n// ok: generic-api-key\nSHOPIFY_API_KEY=\nSHOPIFY_API_SECRET=\nSHOPIFY_API_SCOPES=\nSHOPIFY_APP_URL= # Ensure it starts with `https://`\nSHOPIFY_API_VERSION=\"2023-01\"\nMONGO_URL=\nENCRYPTION_STRING= # Required\nPORT=\nNPM_CONFIG_FORCE=true #Set to true if deploying to a server, so it runs `npm i --force` instead of `npm i`\n\n// ok: generic-api-key\n\"pubkey\": \"asdsadsadsadsadsadsadsawAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n\n// ok: generic-api-key\n# Installation URL:\n# https://ngrok-url.io/auth?shop=storename-myshopify.com;\n\n// ok: generic-api-key\nMAX_API_ISSUE_PAGE_SIZE = MAX_ISSUE_PAGE_SIZE\n\n// ok: generic-api-key\nclientToken: \"pub4306832bdc5f2b8b980c492ec2c11ef3\",\n// ok: generic-api-key\n<li><a href=\"https://github.com/someperson\">some person</a> \u2014 <a href=\"https://github.com/something/something/commits?author=somepersonrulez\" title=\"View the GitHub contributions of Neil Taylor on repository\">view contributions</a></li>\n// ok: generic-api-key\nkeys: 'privkey1.json',\n// ok: generic-api-key\n\"Keywords\": \"asdsadsadsaUSAdusadusadsa\",", "testsuite_b": "// ruleid: generic-api-key\ngeneric_api_token = \"CLOJARS_34bf0e88955ff5a1c328d6a7491acc4f48e865a7b8dd4d70a70749037443\"\n// ruleid: generic-api-key\ngeneric_api_token = \"Zf3D0LXCM3EIMbgJpUNnkRtOfOueHznB\"\n// ruleid: generic-api-key\n\"client_id\" : \"0afae57f3ccfd9d7f5767067bc48b30f719e271ba470488056e37ab35d4b6506\"\n// ruleid: generic-api-key\n\"client_secret\" : \"6da89121079f83b2eb6acccf8219ea982c3d79bccc3e9c6a85856480661f8fde\"\n\n// ruleid: generic-api-key\nprivate const string UserCreationPasswordSecretKey = \"6da89121079f83b2eb6acccf8219ea982c3d79bccc3e9c6a85856480661f8fde\";\n// ruleid: generic-api-key\nprivate const string UserCreationPasswordSecretKey = @\"6da89121079f83b2eb6acccf8219ea982c3d79bccc3e9c6a85856480661f8fde\";\n// ok: generic-api-key\nprivate const string UserCreationPasswordSecretKey = @\"Password\";\n\n\n// ok: generic-api-key\nnewPassword=this.mPassword\n// ok: generic-api-key\nclient_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.client-vpn-endpoint.id\n// ok: generic-api-key\npassword combination. R5: Regulatory--21\n\n/ ok: generic-api-key\nnewPassword=this.mPassword\n// ok: generic-api-key\nclient_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.client-vpn-endpoint.id\n// ok: generic-api-key\npassword combination. R5: Regulatory--21\n\n// ok: generic-api-key\nSLACK_BOT_TOKEN=xoxb-0000000000-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx   \n\n// ok: generic-api-key\n{\n  \"oauth\": {\n    \"clientId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\",\n    \"clientSecret\": \"xxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"callback\": \"http://localhost:8080/oauth2callback\"\n  },\n  \"port\": 8081\n}\n\n// todook: generic-api-key\ngithub.com/Azure/go-autorest/autorest/azure/auth v0.5.11 h1:P6bYXFoao05z5uhOQzbC3Qd8JqF3jUoocoTeIxkp2cA=\n\n// ok: generic-api-key\n<assemblyIdentity name=\"Microsoft.IdentityModel.Protocols.OpenIdConnect\"                                 \n  publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />   \n\n// ok: generic-api-key\nexport const NATIVE_TOKEN_ADDRESS = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";\n\n// ok: generic-api-key\ntokenId: erc1155.tokenId,\n\n \"pubkey\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n// ok: generic-api-key\n'@vue/devtools-api': 'vue-devtools-stub'\n\n// ok: generic-api-key\n<section name=\"entityFramework\" type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKey=b77a5c561934e089\" requirePermission=\"false\" />\n\n// ok: generic-api-key\nIMAGER_S3_KEY=AWS_S3_KEY\n\n// ok: generic-api-key\n'@vue/devtools-api': 'vue-devtools-stub'\n\n\n// ok\nx.MaxKey = mongodb.MaxKey;\n\n\n// ok\nUser.findOne({ 'token': req.query.token }).exec(function(err, user)\n\n// ok\n```\nSLACK_VERIFICATION_TOKEN=xxxxxxxxxxxxxxxxxxx\nSLACK_BOT_TOKEN=xoxb-0000000000-example\nSLACK_WEBHOOK_URL=https://hooks.slack.com/services/xxxxxxxxx/yyyyyyyyy/zzzzzzzzzzzzzzzzzzzzzzzz\n```\n\n// ok: generic-api-key\n  stripe: {\n    host: 'api.stripe.com',\n    secretKey: 'sk_test_XXXXXXXXXXXXXXXXXXXXXX',\n  },\n\n// ok: generic-api-key\nqs: {\n    'api-version': '2017-11-11-Preview'\n},\n\n// ok: generic-api-key\nGOOGLE_SECRET=<SECRET>\nIMAGER_S3_KEY=AWS_S3_KEY\n\n\n// ok: generic-api-key\nexport const stackInputsV1: StackInputs = {\n  gitHubAppWebHookSecret: 'arn:aws:secretsmanager:us-west-2:12321321:secret:fosoodsaeGitHubAppWebHookSecret-21321321',\n \n}\n\n// ok: generic-api-key\nauthors: [someSuperC00lauthor]\n\n// ok: generic-api-key\nkey = axis._maxTicksKey,\n// ok: generic-api-key\n\"capitalization\": 607352.81238977,\n// ok: generic-api-key\ntokenId: erc1155.tokenId\n// ok: generic-api-key\nkey: \"pricing.FAQ.link\"\n// ok: generic-api-key\ntokenId: erc1155.tokenId,\n\n// ok: generic-api-key\nSHOPIFY_API_KEY=\nSHOPIFY_API_SECRET=\nSHOPIFY_API_SCOPES=\nSHOPIFY_APP_URL= # Ensure it starts with `https://`\nSHOPIFY_API_VERSION=\"2023-01\"\nMONGO_URL=\nENCRYPTION_STRING= # Required\nPORT=\nNPM_CONFIG_FORCE=true #Set to true if deploying to a server, so it runs `npm i --force` instead of `npm i`\n\n// ok: generic-api-key\n\"pubkey\": \"asdsadsadsadsadsadsadsawAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n\n// ok: generic-api-key\n# Installation URL:\n# https://ngrok-url.io/auth?shop=storename-myshopify.com;\n\n// ok: generic-api-key\nMAX_API_ISSUE_PAGE_SIZE = MAX_ISSUE_PAGE_SIZE\n\n// ok: generic-api-key\nclientToken: \"pub4306832bdc5f2b8b980c492ec2c11ef3\",\n// ok: generic-api-key\n<li><a href=\"https://github.com/someperson\">some person</a> \u2014 <a href=\"https://github.com/something/something/commits?author=somepersonrulez\" title=\"View the GitHub contributions of Neil Taylor on repository\">view contributions</a></li>\n// ok: generic-api-key\nkeys: 'privkey1.json',\n// ok: generic-api-key\n\"Keywords\": \"asdsadsadsaUSAdusadusadsa\",\n", "ground_truth": "rules:\n- id: generic-api-key\n  message: A gitleaks generic-api-key was detected which attempts to identify hard-coded credentials. It is not recommended to store credentials in source-code, as this risks secrets being leaked and used by either an internal or external malicious adversary. It is recommended to use environment variables to securely provide credentials or retrieve credentials from a secure vault or HSM (Hardware Security Module). This rule can introduce a lot of false positives, it is not recommended to be used in PR comments.\n  languages:\n    - regex\n  severity: INFO\n  metadata:\n      likelihood: LOW\n      impact: MEDIUM\n      confidence: LOW\n      category: security\n      cwe:\n        - \"CWE-798: Use of Hard-coded Credentials\"\n      cwe2021-top25: true\n      cwe2022-top25: true\n      owasp:\n        - A07:2021 - Identification and Authentication Failures\n      references:\n        - https://cheatsheetseries.owasp.org/cheatsheets/Secrets_Management_CheatSheet.html\n      source-rule-url: https://github.com/zricethezav/gitleaks/tree/master/cmd/generate/config/rules\n      subcategory:\n        - vuln\n      technology:\n        - gitleaks\n  paths:\n    exclude:\n      - \"*go.sum\"\n      - \"*package.json\"\n      - \"*package-lock.json\"\n      - \"*bundle.js\"\n      - \"*pnpm-lock*\"\n      - \"*Podfile.lock\"\n      - \"*/openssl/*.h\"\n      - \"*.xcscmblueprint\"\n  patterns:\n    # This will likely remove some true positives, but this rule is overly noisy\n    # Added (?-s) to prevent multi-lines with . which was causing a lot of FPs\n    # added negative lookaheads to remove:\n      # [a-z]+\\.[a-zA-Z]+ (this.valueValue)\n      # .* \n        # \\d{4}-\\d{2}-\\d{2} (2017/03/12)\n        # [a-z]+-[a-z]+.*. abc123-abc123 \n        # :*(?!(\"|'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,  : 0123.0312abc, \n        # [A-Z]+_[A-Z]+_ VALUE_VALUE_\n    - pattern-regex: (?i)(?-s)(?:key|api|token|secret|client|passwd|password|auth|access).(?:[0-9a-z\\-_\\t\n        .]{0,20})(?:[\\s|']|[\\s|\"]){0,3}(?:=|>|:=|\\|\\|:|<=|=>|:).(?:'|\\\"|@|\\s|=|\\x60){0,5}(?!([a-z]+\\.[a-zA-Z]+)|.*(\\d{4}-\\d{2}-\\d{2}|[a-z]+-[a-z]+.*)|:*(?!(\"|'))[0-9A-Za-z]+\\.[0-9A-Za-z]+,|[A-Z]+_[A-Z]+_)([0-9a-z\\-_.=]{10,150})(?:['|\\\"|\\n|\\r|\\s|\\x60|;]|$)\n    - metavariable-analysis:\n        analyzer: entropy\n        metavariable: $4\n    - focus-metavariable: $4\n      # These remove test examples in addition to public keys, author= etc. \n    - pattern-not-regex: (?i)publickeytoken=.*\n    - pattern-not-regex: (?i)(?:\"|')pub\n    - pattern-not-regex: pubkey.*\n    - pattern-not-regex: ((token-drop|asset_key)(\"|'):.*0x)\n    - pattern-not-regex: (?i)(keywords|xxxx|eeeeeeee|0000|\\*\\*\\*|example|test|public.*key|\\.json|author=|author(\"|'))\n", "rule_path": "extend_dataset/5551a27d/before/generic-api-key.yaml", "test_path": "extend_dataset/5551a27d/after/generic-api-key.txt", "category": "historical", "splited_testsuite_b": ["// ruleid: generic-api-key\ngeneric_api_token = \"CLOJARS_34bf0e88955ff5a1c328d6a7491acc4f48e865a7b8dd4d70a70749037443\"", "// ruleid: generic-api-key\ngeneric_api_token = \"Zf3D0LXCM3EIMbgJpUNnkRtOfOueHznB\"", "// ruleid: generic-api-key\n\"client_id\" : \"0afae57f3ccfd9d7f5767067bc48b30f719e271ba470488056e37ab35d4b6506\"", "// ruleid: generic-api-key\n\"client_secret\" : \"6da89121079f83b2eb6acccf8219ea982c3d79bccc3e9c6a85856480661f8fde\"", "// ruleid: generic-api-key\nprivate const string UserCreationPasswordSecretKey = \"6da89121079f83b2eb6acccf8219ea982c3d79bccc3e9c6a85856480661f8fde\";", "// ok: generic-api-key\nprivate const string UserCreationPasswordSecretKey = @\"Password\";", "// ok: generic-api-key\nnewPassword=this.mPassword", "// ok: generic-api-key\nclient_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.client-vpn-endpoint.id", "// ok: generic-api-key\npassword combination. R5: Regulatory--21", "// ok: generic-api-key\nnewPassword=this.mPassword", "// ok: generic-api-key\nclient_vpn_endpoint_id = aws_ec2_client_vpn_endpoint.client-vpn-endpoint.id", "// ok: generic-api-key\npassword combination. R5: Regulatory--21", "// ok: generic-api-key\nSLACK_BOT_TOKEN=xoxb-0000000000-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx", "// ok: generic-api-key\n{\n  \"oauth\": {\n    \"clientId\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx.apps.googleusercontent.com\",\n    \"clientSecret\": \"xxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"callback\": \"http://localhost:8080/oauth2callback\"\n  },\n  \"port\": 8081\n}", "// todook: generic-api-key\ngithub.com/Azure/go-autorest/autorest/azure/auth v0.5.11 h1:P6bYXFoao05z5uhOQzbC3Qd8JqF3jUoocoTeIxkp2cA=", "// ok: generic-api-key\n<assemblyIdentity name=\"Microsoft.IdentityModel.Protocols.OpenIdConnect\"                                 \n  publicKeyToken=\"31bf3856ad364e35\" culture=\"neutral\" />", "// ok: generic-api-key\nexport const NATIVE_TOKEN_ADDRESS = \"0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee\";", "// ok: generic-api-key\ntokenId: erc1155.tokenId,", "\"pubkey\": \"TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA\",\n// ok: generic-api-key\n'@vue/devtools-api': 'vue-devtools-stub'", "// ok: generic-api-key\n<section name=\"entityFramework\" type=\"System.Data.Entity.Internal.ConfigFile.EntityFrameworkSection, EntityFramework, Version=6.0.0.0, Culture=neutral, PublicKey=b77a5c561934e089\" requirePermission=\"false\" />", "// ok: generic-api-key\nIMAGER_S3_KEY=AWS_S3_KEY", "// ok: generic-api-key\n'@vue/devtools-api': 'vue-devtools-stub'", "// ok: generic-api-key\nx.MaxKey = mongodb.MaxKey;", "// ok: generic-api-key\nUser.findOne({ 'token': req.query.token }).exec(function(err, user)", "// ok: generic-api-key\n```\nSLACK_VERIFICATION_TOKEN=xxxxxxxxxxxxxxxxxxx\nSLACK_BOT_TOKEN=xoxb-0000000000-example\nSLACK_WEBHOOK_URL=https://hooks.slack.com/services/xxxxxxxxx/yyyyyyyyy/zzzzzzzzzzzzzzzzzzzzzzzz\n```", "// ok: generic-api-key\n  stripe: {\n    host: 'api.stripe.com',\n    secretKey: 'sk_test_XXXXXXXXXXXXXXXXXXXXXX',\n  },", "// ok: generic-api-key\nqs: {\n    'api-version': '2017-11-11-Preview'\n},", "// ok: generic-api-key\nGOOGLE_SECRET=<SECRET>\nIMAGER_S3_KEY=AWS_S3_KEY", "// ok: generic-api-key\nexport const stackInputsV1: StackInputs = {\n  gitHubAppWebHookSecret: 'arn:aws:secretsmanager:us-west-2:12321321:secret:fosoodsaeGitHubAppWebHookSecret-21321321',\n \n}", "// ok: generic-api-key\nauthors: [someSuperC00lauthor]", "// ok: generic-api-key\nkey = axis._maxTicksKey,", "// ok: generic-api-key\n\"capitalization\": 607352.81238977,", "// ok: generic-api-key\ntokenId: erc1155.tokenId", "// ok: generic-api-key\nkey: \"pricing.FAQ.link\"", "// ok: generic-api-key\ntokenId: erc1155.tokenId,", "// ok: generic-api-key\nSHOPIFY_API_KEY=\nSHOPIFY_API_SECRET=\nSHOPIFY_API_SCOPES=\nSHOPIFY_APP_URL= # Ensure it starts with `https://`\nSHOPIFY_API_VERSION=\"2023-01\"\nMONGO_URL=\nENCRYPTION_STRING= # Required\nPORT=\nNPM_CONFIG_FORCE=true #Set to true if deploying to a server, so it runs `npm i --force` instead of `npm i`", "// ok: generic-api-key\n\"pubkey\": \"asdsadsadsadsadsadsadsawAJbNbGKPFXCWuBvf9Ss623VQ5DA\",", "// ok: generic-api-key\n# Installation URL:\n# https://ngrok-url.io/auth?shop=storename-myshopify.com;", "// ok: generic-api-key\nMAX_API_ISSUE_PAGE_SIZE = MAX_ISSUE_PAGE_SIZE", "// ok: generic-api-key\nclientToken: \"pub4306832bdc5f2b8b980c492ec2c11ef3\",", "// ok: generic-api-key\n<li><a href=\"https://github.com/someperson\">some person</a> \u2014 <a href=\"https://github.com/something/something/commits?author=somepersonrulez\" title=\"View the GitHub contributions of Neil Taylor on repository\">view contributions</a></li>", "// ok: generic-api-key\nkeys: 'privkey1.json',", "// ok: generic-api-key\n\"Keywords\": \"asdsadsadsaUSAdusadusadsa\",", "// ruleid: generic-api-key\nprivate const string UserCreationPasswordSecretKey = @\"6da89121079f83b2eb6acccf8219ea982c3d79bccc3e9c6a85856480661f8fde\";"], "actual": [true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false], "expected": [true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, true], "index": 46, "commit_message": "Improve generic rule for C# (#2943)", "commit_date_str": "2023-06-06 12:12:46 +0200", "leaf_count": 9, "line_count": 12}
{"id": "unverified-ssl-context", "rule": "rules:\n- id: unverified-ssl-context\n  pattern: ssl._create_unverified_context(...)\n  fix-regex:\n    regex: _create_unverified_context\n    replacement: create_default_context\n  message: >-\n    Unverified SSL context detected. This will permit insecure connections without\n    verifying\n    SSL certificates. Use 'ssl.create_default_context()' instead.\n  severity: ERROR\n  languages:\n  - python\n", "failed_tests": ["import ssl\nimport httplib.client\n\n# ruleid:unverified-ssl-context\nssl._create_default_https_context = ssl._create_unverified_context\nurllib2.urlopen(\"https://google.com\").read()"], "failed_type": "fn", "testsuite_a": "import ssl\nimport httplib.client\n\n# ok:unverified-ssl-context\ncontext = ssl.create_default_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)\n\n# ruleid:unverified-ssl-context\ncontext = ssl._create_unverified_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)\n\n# ruleid:unverified-ssl-context\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=ssl._create_unverified_context())\n", "testsuite_b": "import ssl\nimport httplib.client\n\n# ok:unverified-ssl-context\ncontext = ssl.create_default_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)\n\n# ruleid:unverified-ssl-context\ncontext = ssl._create_unverified_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)\n\n# ruleid:unverified-ssl-context\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=ssl._create_unverified_context())\n\n# ruleid:unverified-ssl-context\nssl._create_default_https_context = ssl._create_unverified_context\nurllib2.urlopen(\"https://google.com\").read()\n", "ground_truth": "rules:\n- id: unverified-ssl-context\n  patterns:\n  - pattern-either:\n    - pattern: ssl._create_unverified_context(...)\n    - pattern: ssl._create_default_https_context = ssl._create_unverified_context\n  fix-regex:\n    regex: _create_unverified_context\n    replacement: create_default_context\n  message: >-\n    Unverified SSL context detected. This will permit insecure connections without\n    verifying\n    SSL certificates. Use 'ssl.create_default_context' instead.\n  metadata:\n    owasp:\n    - A03:2017 - Sensitive Data Exposure\n    - A07:2021 - Identification and Authentication Failures\n    cwe:\n    - 'CWE-295: Improper Certificate Validation'\n    references:\n    - https://docs.python.org/3/library/ssl.html#ssl-security\n    - https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection\n    category: security\n    technology:\n    - python\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: MEDIUM\n    confidence: MEDIUM\n  severity: ERROR\n  languages:\n  - python\n", "rule_path": "extend_dataset/b52473b5/before/unverified-ssl-context.yaml", "test_path": "extend_dataset/b52473b5/after/unverified-ssl-context.py", "category": "historical", "splited_testsuite_b": ["import ssl\nimport httplib.client\n\n# ok:unverified-ssl-context\ncontext = ssl.create_default_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)", "import ssl\nimport httplib.client\n\n# ruleid:unverified-ssl-context\ncontext = ssl._create_unverified_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)", "import ssl\nimport httplib.client\n\n# ruleid:unverified-ssl-context\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=ssl._create_unverified_context())", "import ssl\nimport httplib.client\n\n# ruleid:unverified-ssl-context\nssl._create_default_https_context = ssl._create_unverified_context\nurllib2.urlopen(\"https://google.com\").read()"], "actual": [false, true, true, false], "expected": [false, true, true, true], "index": 47, "commit_message": "Merge pull request #2489 from returntocorp/cd/add-to-unverified-ssl-context", "commit_date_str": "2022-10-24 15:07:46 -0700", "leaf_count": 1, "line_count": 1}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages:\n  - ruby\n  severity: ERROR\n  message: Detected user input used to manually construct a SQL string. This is usually\n    bad practice because manual construction could accidentally result in a SQL injection.\n    An attacker could use a SQL injection to steal or modify contents of the database.\n    Instead, use a parameterized query which is available by default in most database\n    engines. Alternatively, consider using an object-relational mapper (ORM) such\n    as ActiveRecord which will protect your queries.\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: params\n      - pattern: request\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              $RECORD.where($X,...)\n          - pattern: |\n              $RECORD.find(..., :conditions => $X,...)\n        - focus-metavariable: $X\n      - patterns:\n        - pattern: |\n            \"$SQLVERB#{$EXPR}...\"\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $SQLVERB\n        - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n      - patterns:\n        - pattern-either:\n          - pattern: Kernel::sprintf(\"$SQLSTR\", $EXPR)\n          - pattern: |\n              \"$SQLSTR\" + $EXPR\n          - pattern: |\n              \"$SQLSTR\" % $EXPR\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $EXPR\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "failed_tests": ["class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test6\n    # ok:tainted-sql-string\n    user = User.where(user_id: params[:user_id])[0]\n    # ok:tainted-sql-string\n    user = User.where(params.slice(:user_id))[0]\n  end\nend"], "failed_type": "fp", "testsuite_a": "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\n\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\n\n\nend\n", "testsuite_b": "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\n\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\n\n  def ok_test6\n    # ok:tainted-sql-string\n    user = User.where(user_id: params[:user_id])[0]\n    # ok:tainted-sql-string\n    user = User.where(params.slice(:user_id))[0]\n  end\n\nend\n\n", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages:\n  - ruby\n  severity: ERROR\n  message: Detected user input used to manually construct a SQL string. This is usually bad practice because\n    manual construction could accidentally result in a SQL injection. An attacker could use a SQL injection\n    to steal or modify contents of the database. Instead, use a parameterized query which is available\n    by default in most database engines. Alternatively, consider using an object-relational mapper (ORM)\n    such as ActiveRecord which will protect your queries.\n  metadata:\n    cwe:\n    - \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp:\n    - A07:2017 - Cross-Site Scripting (XSS)\n    - A03:2021 - Injection\n    category: security\n    technology:\n    - rails\n    references:\n    - https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: HIGH\n    confidence: MEDIUM\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: params\n      - pattern: request\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - patterns:\n            - pattern: |\n                $RECORD.where($X,...)\n            - pattern-not: |\n                $RECORD.where($PARAMS.slice(...), ...)\n          - pattern: |\n              $RECORD.find(..., :conditions => $X,...)\n        - focus-metavariable: $X\n      - patterns:\n        - pattern: |\n            \"$SQLVERB#{$EXPR}...\"\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $SQLVERB\n        - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n      - patterns:\n        - pattern-either:\n          - pattern: Kernel::sprintf(\"$SQLSTR\", $EXPR)\n          - pattern: |\n              \"$SQLSTR\" + $EXPR\n          - pattern: |\n              \"$SQLSTR\" % $EXPR\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $EXPR\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "rule_path": "extend_dataset/151e0387/before/tainted-sql-string.yaml", "test_path": "extend_dataset/151e0387/after/tainted-sql-string.rb", "category": "historical", "splited_testsuite_b": ["class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test6\n    # ok:tainted-sql-string\n    user = User.where(user_id: params[:user_id])[0]\n    # ok:tainted-sql-string\n    user = User.where(params.slice(:user_id))[0]\n  end\nend"], "actual": [true, true, true, true, true, false, false, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false, false, false], "index": 48, "commit_message": "Fix false positive in ruby rails tainted-sql-string", "commit_date_str": "2023-05-23 09:06:21 +0200", "leaf_count": 16, "line_count": 42}
{"id": "dangerous-subprocess-use", "rule": "rules:\n- id: dangerous-subprocess-use\n  mode: taint\n  message: >-\n    Detected subprocess function with argument tainted by `event` object. If this\n    data can be controlled by a malicious actor, it may be an instance of\n    command injection. Audit the use of this call to ensure it is not\n    controllable by an external resource. You may consider using\n    'shlex.escape()'.\n  languages:\n  - python\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern: event\n    - pattern-inside: |\n        def $HANDLER(event, context):\n          ...\n  pattern-sinks:\n  - patterns:\n    - focus-metavariable: $CMD\n    - pattern-either:\n      - pattern: subprocess.$FUNC($CMD, ...)\n      - pattern: subprocess.$FUNC([$CMD,...], ...)\n      - pattern: subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...)\n      - pattern: subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...],\n          ...)\n      - pattern: subprocess.$FUNC(\"=~/(python)/\", $CMD, ...)\n      - pattern: subprocess.$FUNC([\"=~/(python)/\",$CMD,...],...)\n  pattern-sanitizers:\n  - pattern: shlex.escape(...)\n", "failed_tests": ["import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']))"], "failed_type": "fp", "testsuite_a": "import subprocess\nimport sys\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")\n\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']))\n\n  cmd = event['id'].split()\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.run(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.run([\"bash\", \"-c\", event['id']], shell=True)\n\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True)\n  program.communicate(input=payload, timeout=1)\n", "testsuite_b": "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")\n\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']))\n\n  cmd = event['id'].split()\n  # ok:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"], shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")\n\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True)\n\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True, shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, shell=True, text=True)\n\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', shlex.quote(python_file)], stdin=subprocess.PIPE, shell=True, text=True)\n\n  program.communicate(input=payload, timeout=1)\n", "ground_truth": "rules:\n- id: dangerous-subprocess-use\n  mode: taint\n  message: >-\n    Detected subprocess function with argument tainted by an `event` object. \n    If this data can be controlled by a malicious actor, it may be an instance of\n    command injection. The default option for `shell` is False, and this is secure by default.\n    Consider removing the `shell=True` or setting it to False explicitely.\n    Using `shell=False` means you have to split the command string into an array of\n    strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose.\n  metadata:\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    asvs:\n      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'\n      control_id: 5.3.8 OS Command Injection\n      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements\n      version: '4'\n    references:\n    - https://docs.python.org/3/library/subprocess.html\n    - https://docs.python.org/3/library/shlex.html\n    category: security\n    technology:\n    - python\n    - aws-lambda\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n    confidence: MEDIUM\n  languages:\n  - python\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern: event\n    - pattern-inside: |\n        def $HANDLER(event, context):\n          ...\n  pattern-sinks:\n  - patterns:\n    - pattern: subprocess.$FUNC(..., shell=True, ...)\n  pattern-sanitizers:\n  - pattern: shlex.split(...)\n  - pattern: pipes.quote(...)\n  - pattern: shlex.quote(...)\n", "rule_path": "extend_dataset/ca69adfe/before/dangerous-subprocess-use.yaml", "test_path": "extend_dataset/ca69adfe/after/dangerous-subprocess-use.py", "category": "historical", "splited_testsuite_b": ["import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  cmd = event['id'].split()\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"], shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True, shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, shell=True, text=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']))"], "actual": [false, false, true, true, true, true, true, true, true], "expected": [false, false, true, true, true, true, true, true, false], "index": 49, "commit_message": "Update python dangerous subprocess rule to accurately reflect documentation (#3183)", "commit_date_str": "2023-10-19 19:35:43 +0200", "leaf_count": 10, "line_count": 17}
{"id": "dangerous-subprocess-use", "rule": "rules:\n- id: dangerous-subprocess-use\n  mode: taint\n  message: >-\n    Detected subprocess function with argument tainted by `event` object. If this\n    data can be controlled by a malicious actor, it may be an instance of\n    command injection. Audit the use of this call to ensure it is not\n    controllable by an external resource. You may consider using\n    'shlex.escape()'.\n  languages:\n  - python\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern: event\n    - pattern-inside: |\n        def $HANDLER(event, context):\n          ...\n  pattern-sinks:\n  - patterns:\n    - focus-metavariable: $CMD\n    - pattern-either:\n      - pattern: subprocess.$FUNC($CMD, ...)\n      - pattern: subprocess.$FUNC([$CMD,...], ...)\n      - pattern: subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...)\n      - pattern: subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...],\n          ...)\n      - pattern: subprocess.$FUNC(\"=~/(python)/\", $CMD, ...)\n      - pattern: subprocess.$FUNC([\"=~/(python)/\",$CMD,...],...)\n  pattern-sanitizers:\n  - pattern: shlex.escape(...)\n", "failed_tests": ["import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  cmd = event['id'].split()\n  # ok:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])"], "failed_type": "fp", "testsuite_a": "import subprocess\nimport sys\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")\n\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']))\n\n  cmd = event['id'].split()\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.run(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.run([\"bash\", \"-c\", event['id']], shell=True)\n\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True)\n  program.communicate(input=payload, timeout=1)\n", "testsuite_b": "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")\n\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']))\n\n  cmd = event['id'].split()\n  # ok:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"], shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")\n\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True)\n\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True, shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, shell=True, text=True)\n\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', shlex.quote(python_file)], stdin=subprocess.PIPE, shell=True, text=True)\n\n  program.communicate(input=payload, timeout=1)\n", "ground_truth": "rules:\n- id: dangerous-subprocess-use\n  mode: taint\n  message: >-\n    Detected subprocess function with argument tainted by an `event` object. \n    If this data can be controlled by a malicious actor, it may be an instance of\n    command injection. The default option for `shell` is False, and this is secure by default.\n    Consider removing the `shell=True` or setting it to False explicitely.\n    Using `shell=False` means you have to split the command string into an array of\n    strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose.\n  metadata:\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    asvs:\n      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'\n      control_id: 5.3.8 OS Command Injection\n      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements\n      version: '4'\n    references:\n    - https://docs.python.org/3/library/subprocess.html\n    - https://docs.python.org/3/library/shlex.html\n    category: security\n    technology:\n    - python\n    - aws-lambda\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n    confidence: MEDIUM\n  languages:\n  - python\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern: event\n    - pattern-inside: |\n        def $HANDLER(event, context):\n          ...\n  pattern-sinks:\n  - patterns:\n    - pattern: subprocess.$FUNC(..., shell=True, ...)\n  pattern-sanitizers:\n  - pattern: shlex.split(...)\n  - pattern: pipes.quote(...)\n  - pattern: shlex.quote(...)\n", "rule_path": "extend_dataset/ca69adfe/before/dangerous-subprocess-use.yaml", "test_path": "extend_dataset/ca69adfe/after/dangerous-subprocess-use.py", "category": "historical", "splited_testsuite_b": ["import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  cmd = event['id'].split()\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"], shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True, shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, shell=True, text=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  cmd = event['id'].split()\n  # ok:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])"], "actual": [false, false, true, true, true, true, true, true, true], "expected": [false, false, true, true, true, true, true, true, false], "index": 50, "commit_message": "Update python dangerous subprocess rule to accurately reflect documentation (#3183)", "commit_date_str": "2023-10-19 19:35:43 +0200", "leaf_count": 10, "line_count": 17}
{"id": "dangerous-subprocess-use", "rule": "rules:\n- id: dangerous-subprocess-use\n  mode: taint\n  message: >-\n    Detected subprocess function with argument tainted by `event` object. If this\n    data can be controlled by a malicious actor, it may be an instance of\n    command injection. Audit the use of this call to ensure it is not\n    controllable by an external resource. You may consider using\n    'shlex.escape()'.\n  languages:\n  - python\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern: event\n    - pattern-inside: |\n        def $HANDLER(event, context):\n          ...\n  pattern-sinks:\n  - patterns:\n    - focus-metavariable: $CMD\n    - pattern-either:\n      - pattern: subprocess.$FUNC($CMD, ...)\n      - pattern: subprocess.$FUNC([$CMD,...], ...)\n      - pattern: subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...)\n      - pattern: subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...],\n          ...)\n      - pattern: subprocess.$FUNC(\"=~/(python)/\", $CMD, ...)\n      - pattern: subprocess.$FUNC([\"=~/(python)/\",$CMD,...],...)\n  pattern-sanitizers:\n  - pattern: shlex.escape(...)\n", "failed_tests": ["import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True)"], "failed_type": "fp", "testsuite_a": "import subprocess\nimport sys\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")\n\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']))\n\n  cmd = event['id'].split()\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.run(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.run([\"bash\", \"-c\", event['id']], shell=True)\n\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True)\n  program.communicate(input=payload, timeout=1)\n", "testsuite_b": "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")\n\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']))\n\n  cmd = event['id'].split()\n  # ok:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"], shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")\n\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True)\n\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True, shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, shell=True, text=True)\n\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', shlex.quote(python_file)], stdin=subprocess.PIPE, shell=True, text=True)\n\n  program.communicate(input=payload, timeout=1)\n", "ground_truth": "rules:\n- id: dangerous-subprocess-use\n  mode: taint\n  message: >-\n    Detected subprocess function with argument tainted by an `event` object. \n    If this data can be controlled by a malicious actor, it may be an instance of\n    command injection. The default option for `shell` is False, and this is secure by default.\n    Consider removing the `shell=True` or setting it to False explicitely.\n    Using `shell=False` means you have to split the command string into an array of\n    strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose.\n  metadata:\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    asvs:\n      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'\n      control_id: 5.3.8 OS Command Injection\n      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements\n      version: '4'\n    references:\n    - https://docs.python.org/3/library/subprocess.html\n    - https://docs.python.org/3/library/shlex.html\n    category: security\n    technology:\n    - python\n    - aws-lambda\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n    confidence: MEDIUM\n  languages:\n  - python\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern: event\n    - pattern-inside: |\n        def $HANDLER(event, context):\n          ...\n  pattern-sinks:\n  - patterns:\n    - pattern: subprocess.$FUNC(..., shell=True, ...)\n  pattern-sanitizers:\n  - pattern: shlex.split(...)\n  - pattern: pipes.quote(...)\n  - pattern: shlex.quote(...)\n", "rule_path": "extend_dataset/ca69adfe/before/dangerous-subprocess-use.yaml", "test_path": "extend_dataset/ca69adfe/after/dangerous-subprocess-use.py", "category": "historical", "splited_testsuite_b": ["import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  cmd = event['id'].split()\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"], shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True, shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, shell=True, text=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True)"], "actual": [false, false, true, true, true, true, true, true, true], "expected": [false, false, true, true, true, true, true, true, false], "index": 51, "commit_message": "Update python dangerous subprocess rule to accurately reflect documentation (#3183)", "commit_date_str": "2023-10-19 19:35:43 +0200", "leaf_count": 10, "line_count": 17}
{"id": "dangerous-subprocess-use", "rule": "rules:\n- id: dangerous-subprocess-use\n  mode: taint\n  message: >-\n    Detected subprocess function with argument tainted by `event` object. If this\n    data can be controlled by a malicious actor, it may be an instance of\n    command injection. Audit the use of this call to ensure it is not\n    controllable by an external resource. You may consider using\n    'shlex.escape()'.\n  languages:\n  - python\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern: event\n    - pattern-inside: |\n        def $HANDLER(event, context):\n          ...\n  pattern-sinks:\n  - patterns:\n    - focus-metavariable: $CMD\n    - pattern-either:\n      - pattern: subprocess.$FUNC($CMD, ...)\n      - pattern: subprocess.$FUNC([$CMD,...], ...)\n      - pattern: subprocess.$FUNC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...)\n      - pattern: subprocess.$FUNC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $CMD, ...],\n          ...)\n      - pattern: subprocess.$FUNC(\"=~/(python)/\", $CMD, ...)\n      - pattern: subprocess.$FUNC([\"=~/(python)/\",$CMD,...],...)\n  pattern-sanitizers:\n  - pattern: shlex.escape(...)\n", "failed_tests": ["import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', shlex.quote(python_file)], stdin=subprocess.PIPE, shell=True, text=True)\n\n  program.communicate(input=payload, timeout=1)"], "failed_type": "fp", "testsuite_a": "import subprocess\nimport sys\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")\n\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']))\n\n  cmd = event['id'].split()\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.run(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.run([\"bash\", \"-c\", event['id']], shell=True)\n\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True)\n  program.communicate(input=payload, timeout=1)\n", "testsuite_b": "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")\n\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']))\n\n  cmd = event['id'].split()\n  # ok:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"], shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")\n\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True)\n\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True, shell=True)\n\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, shell=True, text=True)\n\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', shlex.quote(python_file)], stdin=subprocess.PIPE, shell=True, text=True)\n\n  program.communicate(input=payload, timeout=1)\n", "ground_truth": "rules:\n- id: dangerous-subprocess-use\n  mode: taint\n  message: >-\n    Detected subprocess function with argument tainted by an `event` object. \n    If this data can be controlled by a malicious actor, it may be an instance of\n    command injection. The default option for `shell` is False, and this is secure by default.\n    Consider removing the `shell=True` or setting it to False explicitely.\n    Using `shell=False` means you have to split the command string into an array of\n    strings for the command and its arguments. You may consider using 'shlex.split()' for this purpose.\n  metadata:\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    asvs:\n      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'\n      control_id: 5.3.8 OS Command Injection\n      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements\n      version: '4'\n    references:\n    - https://docs.python.org/3/library/subprocess.html\n    - https://docs.python.org/3/library/shlex.html\n    category: security\n    technology:\n    - python\n    - aws-lambda\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n    confidence: MEDIUM\n  languages:\n  - python\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern: event\n    - pattern-inside: |\n        def $HANDLER(event, context):\n          ...\n  pattern-sinks:\n  - patterns:\n    - pattern: subprocess.$FUNC(..., shell=True, ...)\n  pattern-sanitizers:\n  - pattern: shlex.split(...)\n  - pattern: pipes.quote(...)\n  - pattern: shlex.quote(...)\n", "rule_path": "extend_dataset/ca69adfe/before/dangerous-subprocess-use.yaml", "test_path": "extend_dataset/ca69adfe/after/dangerous-subprocess-use.py", "category": "historical", "splited_testsuite_b": ["import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call(\"echo 'hello'\")", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ok:dangerous-subprocess-use\n  subprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  cmd = event['id'].split()\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"], shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  # ruleid:dangerous-subprocess-use\n  subprocess.call(\"grep -R {} .\".format(event['id']), shell=True, cwd=\"/home/user\")", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, text=True, shell=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ruleid:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', python_file], stdin=subprocess.PIPE, shell=True, text=True)", "import subprocess\nimport sys\nimport shlex\n\ndef handler(event, context):\n  python_file = f\"\"\"\n      print(\"What is your name?\")\n      name = input()\n      print(\"Hello \" + {event['id']})\n  \"\"\"\n  # ok:dangerous-subprocess-use\n  program = subprocess.Popen(['python2', shlex.quote(python_file)], stdin=subprocess.PIPE, shell=True, text=True)\n\n  program.communicate(input=payload, timeout=1)"], "actual": [false, false, true, true, true, true, true, true, true], "expected": [false, false, true, true, true, true, true, true, false], "index": 52, "commit_message": "Update python dangerous subprocess rule to accurately reflect documentation (#3183)", "commit_date_str": "2023-10-19 19:35:43 +0200", "leaf_count": 10, "line_count": 17}
{"id": "missing-internal", "rule": "rules:\n- id: missing-internal\n  patterns:\n  - pattern-inside: |\n      location ... {\n        ...\n        ...\n      }\n  - pattern-not-inside: |\n      location ... {\n        ...\n        internal;\n        ...\n      }\n  - pattern: proxy_pass ...;\n  languages:\n  - generic\n  severity: WARNING\n  message: >-\n    This location block contains a 'proxy_pass' directive but does not contain the\n    'internal'\n    directive. The 'internal' directive restricts access to this location to internal\n    requests.\n    Without 'internal', an attacker could use your server for server-side request\n    forgeries (SSRF).\n    Include the 'internal' directive in this block to limit exposure.\n", "failed_tests": ["server {\n    location / {\n        # ok: missing-internal\n        proxy_pass http://127.0.0.1:8000/;\n    }\n}"], "failed_type": "fp", "testsuite_a": "https://nginx.org/en/docs/http/ngx_http_core_module.html#internal\n", "testsuite_b": "server {\n    location ~ /proxy/(.*)/(.*)/(.*)$ {\n        # ruleid: missing-internal\n        proxy_pass $1://$2/$3;\n    }\n}\n\nserver {\n    location / {\n        # ok: missing-internal\n        proxy_pass http://127.0.0.1:8000/;\n    }\n}\n\nserver {\n    location ~ /proxy/(.*)/(.*)/(.*)$ {\n        internal;\n        # ok: missing-internal\n        proxy_pass $1://$2/$3;\n    }\n}\n", "ground_truth": "rules:\n- id: missing-internal\n  patterns:\n  - pattern-inside: |\n      location ... {\n        ...\n        ...\n      }\n  - pattern-not-inside: |\n      location ... {\n        ...\n        internal;\n        ...\n      }\n  - pattern: proxy_pass ...$...;\n  paths:\n    include:\n    - '*.conf'\n    - '*.vhost'\n    - sites-available/*\n    - sites-enabled/*\n  languages:\n  - generic\n  severity: WARNING\n  message: >-\n    This location block contains a 'proxy_pass' directive but does not contain the 'internal'\n    directive. The 'internal' directive restricts access to this location to internal requests.\n    Without 'internal', an attacker could use your server for server-side request forgeries (SSRF).\n    Include the 'internal' directive in this block to limit exposure.\n  metadata:\n    references:\n    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md\n    - https://nginx.org/en/docs/http/ngx_http_core_module.html#internal\n    category: security\n    technology:\n    - nginx\n", "rule_path": "extend_dataset/55192f08/before/missing-internal.yaml", "test_path": "extend_dataset/55192f08/after/missing-internal.conf", "category": "historical", "splited_testsuite_b": ["server {\n    location ~ /proxy/(.*)/(.*)/(.*)$ {\n        # ruleid: missing-internal\n        proxy_pass $1://$2/$3;\n    }\n}", "server {\n    location ~ /proxy/(.*)/(.*)/(.*)$ {\n        internal;\n        # ok: missing-internal\n        proxy_pass $1://$2/$3;\n    }\n}", "server {\n    location / {\n        # ok: missing-internal\n        proxy_pass http://127.0.0.1:8000/;\n    }\n}"], "actual": [true, false, true], "expected": [true, false, false], "index": 53, "commit_message": "update generic/nginx/security/missing-internal rule (#1320)", "commit_date_str": "2021-06-08 04:14:52 +0000", "leaf_count": 3, "line_count": 4}
{"id": "react-missing-noreferrer", "rule": "rules:\n- id: react-missing-noreferrer\n  pattern-either:\n  - patterns:\n    - pattern: |\n        <$X target=\"_blank\" />\n    - pattern-not: |\n        <$X target=\"_blank\" rel=\"...\" />\n  - patterns:\n    - pattern-inside: |\n        <$X target=\"_blank\" rel=... />\n    - pattern-regex: rel=[\"']((?!noreferrer).)*?[\"']\n  - patterns:\n    - pattern: |\n        React.createElement($A, {target: '_blank'},...)\n    - pattern-not: |\n        React.createElement($A, {rel: '...'},...)\n  - patterns:\n    - pattern: |\n        React.createElement($A, {target: '_blank', rel: $REL},...)\n    - metavariable-regex:\n        metavariable: $REL\n        regex: \"[\\\"']((?!noreferrer).)*?['\\\"]\"\n  - patterns:\n    - pattern: |\n        $P = {target: '_blank'};\n        ...\n        React.createElement($A, $P,...);\n    - pattern-not: |\n        $P = {rel: '...'};\n        ...\n        React.createElement($A, $P,...);\n  - patterns:\n    - pattern: |\n        $P = {target: '_blank', rel: $REL};\n        ...\n        React.createElement($A, $P,...);\n    - metavariable-regex:\n        metavariable: $REL\n        regex: \"[\\\"']((?!noreferrer).)*?['\\\"]\"\n  message: |\n    Missing 'noreferrer' on an anchor tag where target='_blank'.\n  languages:\n  - typescript\n  severity: WARNING\n", "failed_tests": ["// ok: react-missing-noreferrer\nvar OkTest4 = <a rel='noopener' target=\"_blank\" href=\"/example.com\"></a>"], "failed_type": "fp", "testsuite_a": "// ruleid: react-missing-noreferrer\nvar Test1 = <a target='_blank' href=\"http://example.com/\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test2 = <a target=\"_blank\" rel='noopener' href=\"http://example.com\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test3 = <a rel='noopener' target=\"_blank\" href=\"http://example.com\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test4 = <Link target=\"_blank\" to=\"http://example.com/\"></Link>\n\n// ruleid: react-missing-noreferrer\nvar Test5 = <Link target=\"_blank\" to={dynamicLink}></Link>\n\n// ok: react-missing-noreferrer\nvar OkTest1 = <Link target=\"_blank\" rel=\"noopener noreferrer\" to=\"http://example.com\"></Link>\n\n// ok: react-missing-noreferrer\nvar OkTest2 = <a target=\"_blank\" rel=\"noreferrer\" href=\"http://example.com\"></a>\n\n// ok: react-missing-noreferrer\nvar OkTest3 = <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://example.com\"></a>\n\nfunction TestComponent1() {\n// ruleid: react-missing-noreferrer\n  let params = {target: '_blank', href: 'http://example.com/'};\n  return React.createElement('a', params);\n}\n\nfunction TestComponent2() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/'});\n}\n\nfunction TestComponent3() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: 'noopener'});\n}\n\nfunction OkComponent1() {\n// ok: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: \"noopener noreferrer\"});\n}\n", "testsuite_b": "// ruleid: react-missing-noreferrer\nvar Test1 = <a target='_blank' href=\"http://example.com/\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test2 = <a target=\"_blank\" rel='noopener' href=\"http://example.com\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test3 = <a rel='noopener' target=\"_blank\" href=\"http://example.com\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test4 = <Link target=\"_blank\" to=\"http://example.com/\"></Link>\n\n// ruleid: react-missing-noreferrer\nvar Test5 = <Link target=\"_blank\" to={dynamicLink}></Link>\n\n// ok: react-missing-noreferrer\nvar OkTest1 = <Link target=\"_blank\" rel=\"noopener noreferrer\" to=\"http://example.com\"></Link>\n\n// ok: react-missing-noreferrer\nvar OkTest2 = <a target=\"_blank\" rel=\"noreferrer\" href=\"http://example.com\"></a>\n\n// ok: react-missing-noreferrer\nvar OkTest3 = <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://example.com\"></a>\n\n// ok: react-missing-noreferrer\nvar OkTest4 = <a rel='noopener' target=\"_blank\" href=\"/example.com\"></a>\n\nfunction TestComponent1() {\n// ruleid: react-missing-noreferrer\n  let params = {target: '_blank', href: 'http://example.com/'};\n  return React.createElement('a', params);\n}\n\nfunction TestComponent2() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/'});\n}\n\nfunction TestComponent3() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: 'noopener'});\n}\n\nfunction OkComponent1() {\n// ok: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: \"noopener noreferrer\"});\n}\n\nfunction OkComponent2() {\n// ok: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: '/test', rel: 'noopener'});\n}\n", "ground_truth": "rules:\n- id: react-missing-noreferrer\n  pattern-either:\n  - patterns:\n    - pattern: |\n        <$X target=\"_blank\" />\n    - pattern-not: |\n        <$X target=\"_blank\" rel=\"...\" />\n    - pattern-not: |\n        <$X href=\"=~/^\\/[^\\/]/i\" />\n    - pattern-not: |\n        <$X to=\"=~/^\\/[^\\/]/i\" />\n  - patterns:\n    - pattern-inside: |\n        <$X target=\"_blank\" rel=... />\n    - pattern-not-inside: |\n        <$X href=\"=~/^\\/[^\\/]/i\" rel=... />\n    - pattern-not-inside: |\n        <$X to=\"=~/^\\/[^\\/]/i\" rel=... />\n    - pattern-regex: rel=[\"']((?!noreferrer).)*?[\"']\n  - patterns:\n    - pattern: |\n        React.createElement($A, {target: '_blank'},...)\n    - pattern-not: |\n        React.createElement($A, {rel: '...'},...)\n    - pattern-not: |\n        React.createElement($A, {href: '=~/^\\/[^\\/]/i'},...)\n  - patterns:\n    - pattern: |\n        React.createElement($A, {target: '_blank', rel: $REL},...)\n    - pattern-not: |\n        React.createElement($A, {href: '=~/^\\/[^\\/]/i'},...)\n    - metavariable-regex:\n        metavariable: $REL\n        regex: \"[\\\"']((?!noreferrer).)*?['\\\"]\"\n  - patterns:\n    - pattern: |\n        $P = {target: '_blank'};\n        ...\n        React.createElement($A, $P,...);\n    - pattern-not: |\n        $P = {rel: '...'};\n        ...\n        React.createElement($A, $P,...);\n    - pattern-not: |\n        $P = {href: '=~/^\\/[^\\/]/i'};\n        ...\n        React.createElement($A, $P,...);\n  - patterns:\n    - pattern: |\n        $P = {target: '_blank', rel: $REL};\n        ...\n        React.createElement($A, $P,...);\n    - pattern-not: |\n        $P = {href: '=~/^\\/[^\\/]/i'};\n        ...\n        React.createElement($A, $P,...);\n    - metavariable-regex:\n        metavariable: $REL\n        regex: \"[\\\"']((?!noreferrer).)*?['\\\"]\"\n  message: |\n    Missing 'noreferrer' on an anchor tag where target='_blank'.\n  metadata:\n    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'\n    owasp: 'A3: Sensitive Data Exposure'\n    references:\n    - https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer\n  languages:\n  - typescript\n  severity: WARNING\n", "rule_path": "extend_dataset/af9030b7/before/react-missing-noreferrer.yaml", "test_path": "extend_dataset/af9030b7/after/react-missing-noreferrer.tsx", "category": "historical", "splited_testsuite_b": ["// ruleid: react-missing-noreferrer\nvar Test1 = <a target='_blank' href=\"http://example.com/\"></a>", "// ruleid: react-missing-noreferrer\nvar Test2 = <a target=\"_blank\" rel='noopener' href=\"http://example.com\"></a>", "// ruleid: react-missing-noreferrer\nvar Test3 = <a rel='noopener' target=\"_blank\" href=\"http://example.com\"></a>", "// ruleid: react-missing-noreferrer\nvar Test4 = <Link target=\"_blank\" to=\"http://example.com/\"></Link>", "// ruleid: react-missing-noreferrer\nvar Test5 = <Link target=\"_blank\" to={dynamicLink}></Link>", "// ok: react-missing-noreferrer\nvar OkTest1 = <Link target=\"_blank\" rel=\"noopener noreferrer\" to=\"http://example.com\"></Link>", "// ok: react-missing-noreferrer\nvar OkTest2 = <a target=\"_blank\" rel=\"noreferrer\" href=\"http://example.com\"></a>", "// ok: react-missing-noreferrer\nvar OkTest3 = <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://example.com\"></a>", "function TestComponent1() {\n// ruleid: react-missing-noreferrer\n  let params = {target: '_blank', href: 'http://example.com/'};\n  return React.createElement('a', params);\n}", "function TestComponent2() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/'});\n}", "function TestComponent3() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: 'noopener'});\n}", "function OkComponent1() {\n// ok: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: \"noopener noreferrer\"});\n}", "// ok: react-missing-noreferrer\nvar OkTest4 = <a rel='noopener' target=\"_blank\" href=\"/example.com\"></a>"], "actual": [true, true, true, true, true, false, false, false, true, true, true, false, true], "expected": [true, true, true, true, true, false, false, false, true, true, true, false, false], "index": 54, "commit_message": "update react-missing-noreferrer rule (#1028)", "commit_date_str": "2020-12-01 20:46:28 -0800", "leaf_count": 14, "line_count": 53}
{"id": "react-missing-noreferrer", "rule": "rules:\n- id: react-missing-noreferrer\n  pattern-either:\n  - patterns:\n    - pattern: |\n        <$X target=\"_blank\" />\n    - pattern-not: |\n        <$X target=\"_blank\" rel=\"...\" />\n  - patterns:\n    - pattern-inside: |\n        <$X target=\"_blank\" rel=... />\n    - pattern-regex: rel=[\"']((?!noreferrer).)*?[\"']\n  - patterns:\n    - pattern: |\n        React.createElement($A, {target: '_blank'},...)\n    - pattern-not: |\n        React.createElement($A, {rel: '...'},...)\n  - patterns:\n    - pattern: |\n        React.createElement($A, {target: '_blank', rel: $REL},...)\n    - metavariable-regex:\n        metavariable: $REL\n        regex: \"[\\\"']((?!noreferrer).)*?['\\\"]\"\n  - patterns:\n    - pattern: |\n        $P = {target: '_blank'};\n        ...\n        React.createElement($A, $P,...);\n    - pattern-not: |\n        $P = {rel: '...'};\n        ...\n        React.createElement($A, $P,...);\n  - patterns:\n    - pattern: |\n        $P = {target: '_blank', rel: $REL};\n        ...\n        React.createElement($A, $P,...);\n    - metavariable-regex:\n        metavariable: $REL\n        regex: \"[\\\"']((?!noreferrer).)*?['\\\"]\"\n  message: |\n    Missing 'noreferrer' on an anchor tag where target='_blank'.\n  languages:\n  - typescript\n  severity: WARNING\n", "failed_tests": ["function OkComponent2() {\n// ok: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: '/test', rel: 'noopener'});\n}"], "failed_type": "fp", "testsuite_a": "// ruleid: react-missing-noreferrer\nvar Test1 = <a target='_blank' href=\"http://example.com/\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test2 = <a target=\"_blank\" rel='noopener' href=\"http://example.com\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test3 = <a rel='noopener' target=\"_blank\" href=\"http://example.com\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test4 = <Link target=\"_blank\" to=\"http://example.com/\"></Link>\n\n// ruleid: react-missing-noreferrer\nvar Test5 = <Link target=\"_blank\" to={dynamicLink}></Link>\n\n// ok: react-missing-noreferrer\nvar OkTest1 = <Link target=\"_blank\" rel=\"noopener noreferrer\" to=\"http://example.com\"></Link>\n\n// ok: react-missing-noreferrer\nvar OkTest2 = <a target=\"_blank\" rel=\"noreferrer\" href=\"http://example.com\"></a>\n\n// ok: react-missing-noreferrer\nvar OkTest3 = <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://example.com\"></a>\n\nfunction TestComponent1() {\n// ruleid: react-missing-noreferrer\n  let params = {target: '_blank', href: 'http://example.com/'};\n  return React.createElement('a', params);\n}\n\nfunction TestComponent2() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/'});\n}\n\nfunction TestComponent3() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: 'noopener'});\n}\n\nfunction OkComponent1() {\n// ok: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: \"noopener noreferrer\"});\n}\n", "testsuite_b": "// ruleid: react-missing-noreferrer\nvar Test1 = <a target='_blank' href=\"http://example.com/\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test2 = <a target=\"_blank\" rel='noopener' href=\"http://example.com\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test3 = <a rel='noopener' target=\"_blank\" href=\"http://example.com\"></a>\n\n// ruleid: react-missing-noreferrer\nvar Test4 = <Link target=\"_blank\" to=\"http://example.com/\"></Link>\n\n// ruleid: react-missing-noreferrer\nvar Test5 = <Link target=\"_blank\" to={dynamicLink}></Link>\n\n// ok: react-missing-noreferrer\nvar OkTest1 = <Link target=\"_blank\" rel=\"noopener noreferrer\" to=\"http://example.com\"></Link>\n\n// ok: react-missing-noreferrer\nvar OkTest2 = <a target=\"_blank\" rel=\"noreferrer\" href=\"http://example.com\"></a>\n\n// ok: react-missing-noreferrer\nvar OkTest3 = <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://example.com\"></a>\n\n// ok: react-missing-noreferrer\nvar OkTest4 = <a rel='noopener' target=\"_blank\" href=\"/example.com\"></a>\n\nfunction TestComponent1() {\n// ruleid: react-missing-noreferrer\n  let params = {target: '_blank', href: 'http://example.com/'};\n  return React.createElement('a', params);\n}\n\nfunction TestComponent2() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/'});\n}\n\nfunction TestComponent3() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: 'noopener'});\n}\n\nfunction OkComponent1() {\n// ok: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: \"noopener noreferrer\"});\n}\n\nfunction OkComponent2() {\n// ok: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: '/test', rel: 'noopener'});\n}\n", "ground_truth": "rules:\n- id: react-missing-noreferrer\n  pattern-either:\n  - patterns:\n    - pattern: |\n        <$X target=\"_blank\" />\n    - pattern-not: |\n        <$X target=\"_blank\" rel=\"...\" />\n    - pattern-not: |\n        <$X href=\"=~/^\\/[^\\/]/i\" />\n    - pattern-not: |\n        <$X to=\"=~/^\\/[^\\/]/i\" />\n  - patterns:\n    - pattern-inside: |\n        <$X target=\"_blank\" rel=... />\n    - pattern-not-inside: |\n        <$X href=\"=~/^\\/[^\\/]/i\" rel=... />\n    - pattern-not-inside: |\n        <$X to=\"=~/^\\/[^\\/]/i\" rel=... />\n    - pattern-regex: rel=[\"']((?!noreferrer).)*?[\"']\n  - patterns:\n    - pattern: |\n        React.createElement($A, {target: '_blank'},...)\n    - pattern-not: |\n        React.createElement($A, {rel: '...'},...)\n    - pattern-not: |\n        React.createElement($A, {href: '=~/^\\/[^\\/]/i'},...)\n  - patterns:\n    - pattern: |\n        React.createElement($A, {target: '_blank', rel: $REL},...)\n    - pattern-not: |\n        React.createElement($A, {href: '=~/^\\/[^\\/]/i'},...)\n    - metavariable-regex:\n        metavariable: $REL\n        regex: \"[\\\"']((?!noreferrer).)*?['\\\"]\"\n  - patterns:\n    - pattern: |\n        $P = {target: '_blank'};\n        ...\n        React.createElement($A, $P,...);\n    - pattern-not: |\n        $P = {rel: '...'};\n        ...\n        React.createElement($A, $P,...);\n    - pattern-not: |\n        $P = {href: '=~/^\\/[^\\/]/i'};\n        ...\n        React.createElement($A, $P,...);\n  - patterns:\n    - pattern: |\n        $P = {target: '_blank', rel: $REL};\n        ...\n        React.createElement($A, $P,...);\n    - pattern-not: |\n        $P = {href: '=~/^\\/[^\\/]/i'};\n        ...\n        React.createElement($A, $P,...);\n    - metavariable-regex:\n        metavariable: $REL\n        regex: \"[\\\"']((?!noreferrer).)*?['\\\"]\"\n  message: |\n    Missing 'noreferrer' on an anchor tag where target='_blank'.\n  metadata:\n    cwe: 'CWE-200: Exposure of Sensitive Information to an Unauthorized Actor'\n    owasp: 'A3: Sensitive Data Exposure'\n    references:\n    - https://html.spec.whatwg.org/multipage/links.html#link-type-noreferrer\n  languages:\n  - typescript\n  severity: WARNING\n", "rule_path": "extend_dataset/af9030b7/before/react-missing-noreferrer.yaml", "test_path": "extend_dataset/af9030b7/after/react-missing-noreferrer.tsx", "category": "historical", "splited_testsuite_b": ["// ruleid: react-missing-noreferrer\nvar Test1 = <a target='_blank' href=\"http://example.com/\"></a>", "// ruleid: react-missing-noreferrer\nvar Test2 = <a target=\"_blank\" rel='noopener' href=\"http://example.com\"></a>", "// ruleid: react-missing-noreferrer\nvar Test3 = <a rel='noopener' target=\"_blank\" href=\"http://example.com\"></a>", "// ruleid: react-missing-noreferrer\nvar Test4 = <Link target=\"_blank\" to=\"http://example.com/\"></Link>", "// ruleid: react-missing-noreferrer\nvar Test5 = <Link target=\"_blank\" to={dynamicLink}></Link>", "// ok: react-missing-noreferrer\nvar OkTest1 = <Link target=\"_blank\" rel=\"noopener noreferrer\" to=\"http://example.com\"></Link>", "// ok: react-missing-noreferrer\nvar OkTest2 = <a target=\"_blank\" rel=\"noreferrer\" href=\"http://example.com\"></a>", "// ok: react-missing-noreferrer\nvar OkTest3 = <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"http://example.com\"></a>", "function TestComponent1() {\n// ruleid: react-missing-noreferrer\n  let params = {target: '_blank', href: 'http://example.com/'};\n  return React.createElement('a', params);\n}", "function TestComponent2() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/'});\n}", "function TestComponent3() {\n// ruleid: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: 'noopener'});\n}", "function OkComponent1() {\n// ok: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: 'http://example.com/', rel: \"noopener noreferrer\"});\n}", "function OkComponent2() {\n// ok: react-missing-noreferrer\n  return React.createElement('a', {target: '_blank', href: '/test', rel: 'noopener'});\n}"], "actual": [true, true, true, true, true, false, false, false, true, true, true, false, true], "expected": [true, true, true, true, true, false, false, false, true, true, true, false, false], "index": 55, "commit_message": "update react-missing-noreferrer rule (#1028)", "commit_date_str": "2020-12-01 20:46:28 -0800", "leaf_count": 14, "line_count": 53}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages: [go]\n  message: >-\n    User data flows into this manually-constructed SQL string. User data\n    can be safely inserted into SQL strings using prepared statements or an\n    object-relational mapper (ORM). Manually-constructed SQL strings is a\n    possible indicator of SQL injection, which could let an attacker steal\n    or manipulate data from the database.\n    Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`)\n    or a safe library.\n  mode: taint\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          ($REQUEST : *http.Request).$ANYTHING\n      - pattern: |\n          ($REQUEST : http.Request).$ANYTHING\n    - metavariable-regex:\n        metavariable: $ANYTHING\n        regex: \n          ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|UserAgent|URL)$\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: |\n            \"$SQLSTR\" + ...\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop).*\n      - patterns:\n        - pattern-either:\n          - pattern: fmt.Fprintf($F, \"$SQLSTR\", ...)\n          - pattern: fmt.Sprintf(\"$SQLSTR\", ...)\n          - pattern: fmt.Printf(\"$SQLSTR\", ...)\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: \\s*(?i)(select|delete|insert|create|update|alter|drop)\\b.*%(v|s|q).*\n  pattern-sanitizers:\n  - pattern: strconv.Atoi(...)\n", "failed_tests": ["package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n    \"strings\"\n)\n\nfunc SelectHandler2(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        var sb strings.Builder\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sb.WriteString(\"SELECT * FROM table WHERE Id = \")\n            // ruleid: tainted-sql-string\n            sb.WriteString(id)\n\n            sql := sb.String()\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}"], "failed_type": "fn", "testsuite_a": "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc DeleteHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc DeleteHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        idhtml := req.URL.Query().Get(\"Id\")\n\n        id, _ := strconv.Atoi(idhtml)\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            sql := fmt.Sprintf(\"SELECT * FROM table WHERE Id = %v\", id)\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.QueryRow(\"SELECT * FROM table WHERE Id = $1\", id)\n\n            // ok: tainted-sql-string\n            fmt.Fprintf(w, \"Deleted %s\", id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n", "testsuite_b": "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc DeleteHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc DeleteHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        idhtml := req.URL.Query().Get(\"Id\")\n\n        id, _ := strconv.Atoi(idhtml)\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            sql := fmt.Sprintf(\"SELECT * FROM table WHERE Id = %v\", id)\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler2(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        var sb strings.Builder\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sb.WriteString(\"SELECT * FROM table WHERE Id = \")\n            // ruleid: tainted-sql-string\n            sb.WriteString(id)\n\n            sql := sb.String()\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler2ok(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        var sb strings.Builder\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sb.WriteString(\"SELECT * FROM table WHERE Id = \")\n            // ok: tainted-sql-string\n            sb.WriteString(id)\n\n            sql := \"select hello\"\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler3(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sql := \"SELECT * FROM table WHERE Id = \"\n            // ruleid: tainted-sql-string\n            sql += id\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler3(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sql := \"SELECT * FROM table WHERE Id = \"\n            // ok: tainted-sql-string\n            sql += (id != 3)\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.QueryRow(\"SELECT * FROM table WHERE Id = $1\", id)\n\n            // ok: tainted-sql-string\n            fmt.Fprintf(w, \"Deleted %s\", id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages: [go]\n  message: >-\n    User data flows into this manually-constructed SQL string. User data\n    can be safely inserted into SQL strings using prepared statements or an\n    object-relational mapper (ORM). Manually-constructed SQL strings is a\n    possible indicator of SQL injection, which could let an attacker steal\n    or manipulate data from the database.\n    Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`)\n    or a safe library.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://golang.org/doc/database/sql-injection\n    - https://www.stackhawk.com/blog/golang-sql-injection-guide-examples-and-prevention/\n    category: security\n    technology:\n    - go\n    confidence: HIGH\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n  mode: taint\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          ($REQUEST : *http.Request).$ANYTHING\n      - pattern: |\n          ($REQUEST : http.Request).$ANYTHING\n    - metavariable-regex:\n        metavariable: $ANYTHING\n        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|UserAgent|URL)$\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              \"$SQLSTR\" + ...\n          - patterns:\n            - pattern-inside: |\n                $VAR = \"$SQLSTR\";\n                ...\n            - pattern: $VAR += ...\n          - patterns:\n            - pattern-inside: |\n                var $SB strings.Builder\n                ...\n            - pattern-inside: |\n                $SB.WriteString(\"$SQLSTR\")\n                ...\n                $SB.String(...)\n            - pattern: |\n                $SB.WriteString(...)\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop).*\n      - patterns:\n        - pattern-either:\n          - pattern: fmt.Fprintf($F, \"$SQLSTR\", ...)\n          - pattern: fmt.Sprintf(\"$SQLSTR\", ...)\n          - pattern: fmt.Printf(\"$SQLSTR\", ...)\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: \\s*(?i)(select|delete|insert|create|update|alter|drop)\\b.*%(v|s|q).*\n  pattern-sanitizers:\n  - pattern-either:\n    - pattern: strconv.Atoi(...)\n    - patterns:\n      - focus-metavariable: $...X\n      - pattern-either:\n        - pattern: <... $...X != $...Y ...>\n        - pattern: <... $...Y != $...X ...>\n        - pattern: <... $...X == $...Y ...>\n        - pattern: <... $...Y == $...X ...>", "rule_path": "extend_dataset/6ac396fc/before/tainted-sql-string.yaml", "test_path": "extend_dataset/6ac396fc/after/tainted-sql-string.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc DeleteHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n    \"strconv\"\n)\n\nfunc DeleteHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        idhtml := req.URL.Query().Get(\"Id\")\n\n        id, _ := strconv.Atoi(idhtml)\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc SelectHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            sql := fmt.Sprintf(\"SELECT * FROM table WHERE Id = %v\", id)\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n    \"strings\"\n)\n\nfunc SelectHandler2ok(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        var sb strings.Builder\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sb.WriteString(\"SELECT * FROM table WHERE Id = \")\n            // ok: tainted-sql-string\n            sb.WriteString(id)\n\n            sql := \"select hello\"\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc SelectHandler3(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sql := \"SELECT * FROM table WHERE Id = \"\n            // ok: tainted-sql-string\n            sql += (id != 3)\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc SelectHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.QueryRow(\"SELECT * FROM table WHERE Id = $1\", id)\n\n            // ok: tainted-sql-string\n            fmt.Fprintf(w, \"Deleted %s\", id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n    \"strings\"\n)\n\nfunc SelectHandler2(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        var sb strings.Builder\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sb.WriteString(\"SELECT * FROM table WHERE Id = \")\n            // ruleid: tainted-sql-string\n            sb.WriteString(id)\n\n            sql := sb.String()\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}"], "actual": [true, false, true, false, false, false, false], "expected": [true, false, true, false, false, false, true], "index": 56, "commit_message": "Merge pull request #2888 from returntocorp/edit-sqli-2", "commit_date_str": "2023-04-25 17:40:17 -0700", "leaf_count": 13, "line_count": 32}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages: [go]\n  message: >-\n    User data flows into this manually-constructed SQL string. User data\n    can be safely inserted into SQL strings using prepared statements or an\n    object-relational mapper (ORM). Manually-constructed SQL strings is a\n    possible indicator of SQL injection, which could let an attacker steal\n    or manipulate data from the database.\n    Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`)\n    or a safe library.\n  mode: taint\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          ($REQUEST : *http.Request).$ANYTHING\n      - pattern: |\n          ($REQUEST : http.Request).$ANYTHING\n    - metavariable-regex:\n        metavariable: $ANYTHING\n        regex: \n          ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|UserAgent|URL)$\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: |\n            \"$SQLSTR\" + ...\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop).*\n      - patterns:\n        - pattern-either:\n          - pattern: fmt.Fprintf($F, \"$SQLSTR\", ...)\n          - pattern: fmt.Sprintf(\"$SQLSTR\", ...)\n          - pattern: fmt.Printf(\"$SQLSTR\", ...)\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: \\s*(?i)(select|delete|insert|create|update|alter|drop)\\b.*%(v|s|q).*\n  pattern-sanitizers:\n  - pattern: strconv.Atoi(...)\n", "failed_tests": ["package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc SelectHandler3(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sql := \"SELECT * FROM table WHERE Id = \"\n            // ruleid: tainted-sql-string\n            sql += id\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}"], "failed_type": "fn", "testsuite_a": "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc DeleteHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc DeleteHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        idhtml := req.URL.Query().Get(\"Id\")\n\n        id, _ := strconv.Atoi(idhtml)\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            sql := fmt.Sprintf(\"SELECT * FROM table WHERE Id = %v\", id)\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.QueryRow(\"SELECT * FROM table WHERE Id = $1\", id)\n\n            // ok: tainted-sql-string\n            fmt.Fprintf(w, \"Deleted %s\", id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n", "testsuite_b": "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc DeleteHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc DeleteHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        idhtml := req.URL.Query().Get(\"Id\")\n\n        id, _ := strconv.Atoi(idhtml)\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            sql := fmt.Sprintf(\"SELECT * FROM table WHERE Id = %v\", id)\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler2(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        var sb strings.Builder\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sb.WriteString(\"SELECT * FROM table WHERE Id = \")\n            // ruleid: tainted-sql-string\n            sb.WriteString(id)\n\n            sql := sb.String()\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler2ok(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        var sb strings.Builder\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sb.WriteString(\"SELECT * FROM table WHERE Id = \")\n            // ok: tainted-sql-string\n            sb.WriteString(id)\n\n            sql := \"select hello\"\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler3(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sql := \"SELECT * FROM table WHERE Id = \"\n            // ruleid: tainted-sql-string\n            sql += id\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandler3(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sql := \"SELECT * FROM table WHERE Id = \"\n            // ok: tainted-sql-string\n            sql += (id != 3)\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}\n\nfunc SelectHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.QueryRow(\"SELECT * FROM table WHERE Id = $1\", id)\n\n            // ok: tainted-sql-string\n            fmt.Fprintf(w, \"Deleted %s\", id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages: [go]\n  message: >-\n    User data flows into this manually-constructed SQL string. User data\n    can be safely inserted into SQL strings using prepared statements or an\n    object-relational mapper (ORM). Manually-constructed SQL strings is a\n    possible indicator of SQL injection, which could let an attacker steal\n    or manipulate data from the database.\n    Instead, use prepared statements (`db.Query(\"SELECT * FROM t WHERE id = ?\", id)`)\n    or a safe library.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://golang.org/doc/database/sql-injection\n    - https://www.stackhawk.com/blog/golang-sql-injection-guide-examples-and-prevention/\n    category: security\n    technology:\n    - go\n    confidence: HIGH\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n  mode: taint\n  severity: ERROR\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          ($REQUEST : *http.Request).$ANYTHING\n      - pattern: |\n          ($REQUEST : http.Request).$ANYTHING\n    - metavariable-regex:\n        metavariable: $ANYTHING\n        regex: ^(BasicAuth|Body|Cookie|Cookies|Form|FormValue|GetBody|Host|MultipartReader|ParseForm|ParseMultipartForm|PostForm|PostFormValue|Referer|RequestURI|Trailer|TransferEncoding|UserAgent|URL)$\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              \"$SQLSTR\" + ...\n          - patterns:\n            - pattern-inside: |\n                $VAR = \"$SQLSTR\";\n                ...\n            - pattern: $VAR += ...\n          - patterns:\n            - pattern-inside: |\n                var $SB strings.Builder\n                ...\n            - pattern-inside: |\n                $SB.WriteString(\"$SQLSTR\")\n                ...\n                $SB.String(...)\n            - pattern: |\n                $SB.WriteString(...)\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop).*\n      - patterns:\n        - pattern-either:\n          - pattern: fmt.Fprintf($F, \"$SQLSTR\", ...)\n          - pattern: fmt.Sprintf(\"$SQLSTR\", ...)\n          - pattern: fmt.Printf(\"$SQLSTR\", ...)\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: \\s*(?i)(select|delete|insert|create|update|alter|drop)\\b.*%(v|s|q).*\n  pattern-sanitizers:\n  - pattern-either:\n    - pattern: strconv.Atoi(...)\n    - patterns:\n      - focus-metavariable: $...X\n      - pattern-either:\n        - pattern: <... $...X != $...Y ...>\n        - pattern: <... $...Y != $...X ...>\n        - pattern: <... $...X == $...Y ...>\n        - pattern: <... $...Y == $...X ...>", "rule_path": "extend_dataset/6ac396fc/before/tainted-sql-string.yaml", "test_path": "extend_dataset/6ac396fc/after/tainted-sql-string.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc DeleteHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n    \"strconv\"\n)\n\nfunc DeleteHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        idhtml := req.URL.Query().Get(\"Id\")\n\n        id, _ := strconv.Atoi(idhtml)\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc SelectHandler(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            // ruleid: tainted-sql-string\n            sql := fmt.Sprintf(\"SELECT * FROM table WHERE Id = %v\", id)\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n    \"strings\"\n)\n\nfunc SelectHandler2ok(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        var sb strings.Builder\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sb.WriteString(\"SELECT * FROM table WHERE Id = \")\n            // ok: tainted-sql-string\n            sb.WriteString(id)\n\n            sql := \"select hello\"\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc SelectHandler3(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sql := \"SELECT * FROM table WHERE Id = \"\n            // ok: tainted-sql-string\n            sql += (id != 3)\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc SelectHandlerOk(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n\n        if del == \"del\" {\n            // ok: tainted-sql-string\n            _, err = db.QueryRow(\"SELECT * FROM table WHERE Id = $1\", id)\n\n            // ok: tainted-sql-string\n            fmt.Fprintf(w, \"Deleted %s\", id)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}", "package main\n\nimport (\n    \"crypto/tls\"\n    \"encoding/json\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"net/http\"\n    \"net/url\"\n    \"database/sql\"\n)\n\nfunc SelectHandler3(db *sql.DB) func(w http.ResponseWriter, req *http.Request) {\n    return func(w http.ResponseWriter, req *http.Request) {\n        del := req.URL.Query().Get(\"del\")\n        id := req.URL.Query().Get(\"Id\")\n        if del == \"del\" {\n            sql := \"SELECT * FROM table WHERE Id = \"\n            // ruleid: tainted-sql-string\n            sql += id\n            _, err = db.Exec(sql)\n            if err != nil {\n                panic(err)\n            }\n        }\n    }\n}"], "actual": [true, false, true, false, false, false, false], "expected": [true, false, true, false, false, false, true], "index": 57, "commit_message": "Merge pull request #2888 from returntocorp/edit-sqli-2", "commit_date_str": "2023-04-25 17:40:17 -0700", "leaf_count": 13, "line_count": 32}
{"id": "http-request", "rule": "rules:\n- id: http-request\n  patterns:\n  - pattern-either:\n    - pattern: |\n        http.$FUNC(\"=~/[hH][tT][tT][pP]://.*/\", ...)\n    - patterns:\n      - pattern-inside: |\n          $CLIENT := &http.Client{...}\n          ...\n      - pattern: |\n          client.$FUNC(\"=~/[hH][tT][tT][pP]://.*/\", ...)\n  - pattern-not: http.$FUNC(\"=~/[hH][tT][tT][pP]://127.0.0.1.*/\", ...)\n  - pattern-not: client.$FUNC(\"=~/[hH][tT][tT][pP]://127.0.0.1.*/\", ...)\n  - metavariable-regex:\n      metavariable: $FUNC\n      regex: (Get|Post|Head|PostForm)\n  message: >-\n    Checks for requests sent via http.$FUNC to http:// URLS. This is dangerous because\n    the server is attempting to connect to a website that does not encrypt traffic\n    with TLS. Instead, send requests only to\n    https:// URLS.\n  fix-regex:\n    regex: \"[Hh][Tt][Tt][Pp]://\"\n    replacement: https://\n    count: 1\n  languages:\n  - go\n  severity: WARNING\n", "failed_tests": ["func ok1() {\n    // ok: http-request\n    resp, err := http.Head(\"http://localhost/path/to/x\")\n}"], "failed_type": "fp", "testsuite_a": "func bad1() {\n    // ruleid: http-request\n    resp, err := http.Get(\"http://example.com/\")\n    // ruleid: http-request\n    resp, err := http.Post(\"http://example.com/\", val, val)\n    // ruleid: http-request\n    resp, err := http.Head(\"http://example.com/\")\n    // ruleid: http-request\n    resp, err := http.PostForm(\"http://example.com/\", form)\n}\n\nfunc bad2() {\n    client := &http.Client{\n\t    CheckRedirect: redirectPolicyFunc,\n    }\n\n    // ruleid: http-request\n    resp, err := client.Get(\"http://example.com\")\n}\n\nfunc ok1() {\n    // ok: http-request\n    resp, err := http.Get(\"https://example.com/\")\n    // ok: http-request\n    resp, err := http.Post(\"https://example.com/\", val, val)\n    // ok: http-request\n    resp, err := http.Head(\"https://example.com/\")\n    // ok: http-request\n    resp, err := http.PostForm(\"https://example.com/\", form)\n    // ok: http-request\n    resp, err := http.PostForm(\"http://127.0.0.1/\", form)\n    // ok: http-request\n    resp, err := http.Head(\"http://127.0.0.1/path/to/x\")\n}\n\nfunc ok2() {\n    client := &http.Client{\n\t    CheckRedirect: redirectPolicyFunc,\n    }\n\n    // ok: http-request\n    resp, err := client.Get(\"https://example.com\")\n\n    // ok: http-request\n    resp, err := client.Post(\"https://127.0.0.1/path/to/x\", form)\n\n    // ok: http-request\n    resp, err := client.Get(\"https://127.0.0.1\")\n}\n", "testsuite_b": "func bad1() {\n    // ruleid: http-request\n    resp, err := http.Get(\"http://example.com/\")\n    // ruleid: http-request\n    resp, err := http.Post(\"http://example.com/\", val, val)\n    // ruleid: http-request\n    resp, err := http.Head(\"http://example.com/\")\n    // ruleid: http-request\n    resp, err := http.PostForm(\"http://example.com/\", form)\n}\n\nfunc bad2() {\n    client := &http.Client{\n\t    CheckRedirect: redirectPolicyFunc,\n    }\n\n    // ruleid: http-request\n    resp, err := client.Get(\"http://example.com\")\n}\n\nfunc ok1() {\n    // ok: http-request\n    resp, err := http.Get(\"https://example.com/\")\n    // ok: http-request\n    resp, err := http.Post(\"https://example.com/\", val, val)\n    // ok: http-request\n    resp, err := http.Head(\"https://example.com/\")\n    // ok: http-request\n    resp, err := http.PostForm(\"https://example.com/\", form)\n    // ok: http-request\n    resp, err := http.PostForm(\"http://127.0.0.1/\", form)\n    // ok: http-request\n    resp, err := http.Head(\"http://127.0.0.1/path/to/x\")\n    // ok: http-request\n    resp, err := http.Head(\"http://localhost/path/to/x\")\n}\n\nfunc ok2() {\n    client := &http.Client{\n\t    CheckRedirect: redirectPolicyFunc,\n    }\n\n    // ok: http-request\n    resp, err := client.Get(\"https://example.com\")\n\n    // ok: http-request\n    resp, err := client.Post(\"https://127.0.0.1/path/to/x\", form)\n\n    // ok: http-request\n    resp, err := client.Get(\"https://127.0.0.1\")\n\n    // ok: http-request\n    resp, err := client.Get(\"https://localhost/asdf/path\")\n}\n", "ground_truth": "rules:\n  - id: http-request\n    patterns:\n      - pattern-either:\n          - pattern: |\n              http.$FUNC(\"=~/[hH][tT][tT][pP]://.*/\", ...)\n          - patterns:\n            - pattern-inside: |\n                $CLIENT := &http.Client{...}\n                ...\n            - pattern: |\n                client.$FUNC(\"=~/[hH][tT][tT][pP]://.*/\", ...)\n      - pattern-not:\n          http.$FUNC(\"=~/[hH][tT][tT][pP]://127.0.0.1.*/\", ...)\n      - pattern-not:\n          client.$FUNC(\"=~/[hH][tT][tT][pP]://127.0.0.1.*/\", ...)\n      - pattern-not:\n          http.$FUNC(\"=~/[hH][tT][tT][pP]://localhost.*/\", ...)\n      - pattern-not:\n          client.$FUNC(\"=~/[hH][tT][tT][pP]://localhost.*/\", ...)\n      - metavariable-regex:\n          metavariable: $FUNC\n          regex: (Get|Post|Head|PostForm)\n    message: >-\n      Checks for requests sent via http.$FUNC to http:// URLS. This is dangerous because\n      the server is attempting to connect to a website that does not encrypt traffic with TLS. Instead, send requests only to\n      https:// URLS.\n    fix-regex:\n      regex: \"[Hh][Tt][Tt][Pp]://\"\n      replacement: https://\n      count: 1\n    metadata:\n      vulnerability: Insecure Transport\n      owasp: \"A3: Sensitive Data Exposure\"\n      cwe: \"CWE-319: Cleartext Transmission of Sensitive Information\"\n      references:\n        - https://golang.org/pkg/net/http/#Get\n      category: security\n      technology:\n        - go\n    languages:\n      - go\n    severity: WARNING\n", "rule_path": "extend_dataset/cb62cdfe/before/http-request.yaml", "test_path": "extend_dataset/cb62cdfe/after/http-request.go", "category": "historical", "splited_testsuite_b": ["func bad1() {\n    // ruleid: http-request\n    resp, err := http.Get(\"http://example.com/\")\n}", "func bad1() {\n    // ruleid: http-request\n    resp, err := http.Post(\"http://example.com/\", val, val)\n}", "func bad1() {\n    // ruleid: http-request\n    resp, err := http.Head(\"http://example.com/\")\n}", "func bad1() {\n    // ruleid: http-request\n    resp, err := http.PostForm(\"http://example.com/\", form)\n}", "func bad2() {\n    client := &http.Client{\n\t    CheckRedirect: redirectPolicyFunc,\n    }\n\n    // ruleid: http-request\n    resp, err := client.Get(\"http://example.com\")\n}", "func ok1() {\n    // ok: http-request\n    resp, err := http.Get(\"https://example.com/\")\n}", "func ok1() {\n    // ok: http-request\n    resp, err := http.Post(\"https://example.com/\", val, val)\n}", "func ok1() {\n    // ok: http-request\n    resp, err := http.Head(\"https://example.com/\")\n}", "func ok1() {\n    // ok: http-request\n    resp, err := http.PostForm(\"https://example.com/\", form)\n}", "func ok1() {\n    // ok: http-request\n    resp, err := http.PostForm(\"http://127.0.0.1/\", form)\n}", "func ok1() {\n    // ok: http-request\n    resp, err := http.Head(\"http://127.0.0.1/path/to/x\")\n}", "func ok2() {\n    client := &http.Client{\n\t    CheckRedirect: redirectPolicyFunc,\n    }\n\n    // ok: http-request\n    resp, err := client.Get(\"https://example.com\")\n}", "func ok2() {\n    client := &http.Client{\n\t    CheckRedirect: redirectPolicyFunc,\n    }\n\n    // ok: http-request\n    resp, err := client.Post(\"https://127.0.0.1/path/to/x\", form)\n}", "func ok2() {\n    client := &http.Client{\n\t    CheckRedirect: redirectPolicyFunc,\n    }\n\n    // ok: http-request\n    resp, err := client.Get(\"https://127.0.0.1\")\n}", "func ok2() {\n    client := &http.Client{\n\t    CheckRedirect: redirectPolicyFunc,\n    }\n\n    // ok: http-request\n    resp, err := client.Get(\"https://localhost/asdf/path\")\n}", "func ok1() {\n    // ok: http-request\n    resp, err := http.Head(\"http://localhost/path/to/x\")\n}"], "actual": [true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false, false, false, false, false, false, false, false], "index": 58, "commit_message": "add localhost to pattern-not", "commit_date_str": "2022-03-30 15:18:37 -0700", "leaf_count": 7, "line_count": 19}
{"id": "remove-package-lists", "rule": "rules:\n- id: remove-package-lists\n  patterns:\n  - pattern: RUN apt-get update\n  - pattern-not-inside: RUN apt-get update ... && rm -rf /var/lib/apt/lists/*\n  message: >-\n    The package lists were not deleted after running 'apt-get update', which\n    increases the size of the image.\n    Remove the package lists by appending '&& rm -rf /var/lib/apt/lists/*' at the\n    end\n    of apt-get command chain.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["FROM busybox\n\n# ok: remove-package-lists\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y tini && \\\n    rm -rf /var/lib/apt/lists/*"], "failed_type": "fp", "testsuite_a": "FROM busybox\n\n# ruleid: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && rm -rf /var/lib/apt/lists/*\n\n# ruleid: remove-package-lists\n RUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n", "testsuite_b": "FROM busybox\n\n# ruleid: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && rm -rf /var/lib/apt/lists/*\n\n# ruleid: remove-package-lists\n RUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# ok: remove-package-lists\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y tini && \\\n    rm -rf /var/lib/apt/lists/*\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install -y \\\n    aufs-tools \\\n    automake \\\n    build-essential \\\n    curl \\\n    dpkg-sig \\\n    libcap-dev \\\n    libsqlite3-dev \\\n    mercurial \\\n    reprepro \\\n    ruby1.9.1 \\\n    ruby1.9.1-dev \\\n    s3cmd=1.1.* \\\n && rm -rf /var/lib/apt/lists/*\n", "ground_truth": "rules:\n- id: remove-package-lists\n  patterns:\n  - pattern: RUN apt-get update\n  - pattern-not-inside: RUN apt-get update ... ... ... && ... rm -rf /var/lib/apt/lists/*\n  message: >-\n    The package lists were not deleted after running 'apt-get update', which\n    increases the size of the image.\n    Remove the package lists by appending '&& rm -rf /var/lib/apt/lists/*' at the\n    end\n    of apt-get command chain.\n  severity: WARNING\n  languages: [generic]\n  metadata:\n    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3009\n    references:\n    - https://github.com/hadolint/hadolint/wiki/DL3009\n    category: best-practice\n    technology:\n    - dockerfile\n  paths:\n    include:\n    - '*dockerfile*'\n    - '*Dockerfile*'\n", "rule_path": "extend_dataset/dd8f7893/before/remove-package-lists.yaml", "test_path": "extend_dataset/dd8f7893/after/remove-package-lists.dockerfile", "category": "historical", "splited_testsuite_b": ["FROM busybox\n\n# ruleid: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python", "FROM busybox\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && rm -rf /var/lib/apt/lists/*", "FROM busybox\n\n# ruleid: remove-package-lists\n RUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean", "FROM busybox\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*", "FROM busybox\n\n# ok: remove-package-lists\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y tini && \\\n    rm -rf /var/lib/apt/lists/*"], "actual": [true, false, true, false, true], "expected": [true, false, true, false, false], "index": 59, "commit_message": "update remove-package-lists rule (#1381)", "commit_date_str": "2021-07-21 18:30:54 -0400", "leaf_count": 2, "line_count": 3}
{"id": "remove-package-lists", "rule": "rules:\n- id: remove-package-lists\n  patterns:\n  - pattern: RUN apt-get update\n  - pattern-not-inside: RUN apt-get update ... && rm -rf /var/lib/apt/lists/*\n  message: >-\n    The package lists were not deleted after running 'apt-get update', which\n    increases the size of the image.\n    Remove the package lists by appending '&& rm -rf /var/lib/apt/lists/*' at the\n    end\n    of apt-get command chain.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["FROM busybox\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install -y \\\n    aufs-tools \\\n    automake \\\n    build-essential \\\n    curl \\\n    dpkg-sig \\\n    libcap-dev \\\n    libsqlite3-dev \\\n    mercurial \\\n    reprepro \\\n    ruby1.9.1 \\\n    ruby1.9.1-dev \\\n    s3cmd=1.1.* \\\n && rm -rf /var/lib/apt/lists/*"], "failed_type": "fp", "testsuite_a": "FROM busybox\n\n# ruleid: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && rm -rf /var/lib/apt/lists/*\n\n# ruleid: remove-package-lists\n RUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n", "testsuite_b": "FROM busybox\n\n# ruleid: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && rm -rf /var/lib/apt/lists/*\n\n# ruleid: remove-package-lists\n RUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# ok: remove-package-lists\nRUN apt-get update && \\\n    apt-get install --no-install-recommends -y tini && \\\n    rm -rf /var/lib/apt/lists/*\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install -y \\\n    aufs-tools \\\n    automake \\\n    build-essential \\\n    curl \\\n    dpkg-sig \\\n    libcap-dev \\\n    libsqlite3-dev \\\n    mercurial \\\n    reprepro \\\n    ruby1.9.1 \\\n    ruby1.9.1-dev \\\n    s3cmd=1.1.* \\\n && rm -rf /var/lib/apt/lists/*\n", "ground_truth": "rules:\n- id: remove-package-lists\n  patterns:\n  - pattern: RUN apt-get update\n  - pattern-not-inside: RUN apt-get update ... ... ... && ... rm -rf /var/lib/apt/lists/*\n  message: >-\n    The package lists were not deleted after running 'apt-get update', which\n    increases the size of the image.\n    Remove the package lists by appending '&& rm -rf /var/lib/apt/lists/*' at the\n    end\n    of apt-get command chain.\n  severity: WARNING\n  languages: [generic]\n  metadata:\n    source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3009\n    references:\n    - https://github.com/hadolint/hadolint/wiki/DL3009\n    category: best-practice\n    technology:\n    - dockerfile\n  paths:\n    include:\n    - '*dockerfile*'\n    - '*Dockerfile*'\n", "rule_path": "extend_dataset/dd8f7893/before/remove-package-lists.yaml", "test_path": "extend_dataset/dd8f7893/after/remove-package-lists.dockerfile", "category": "historical", "splited_testsuite_b": ["FROM busybox\n\n# ruleid: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python", "FROM busybox\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && rm -rf /var/lib/apt/lists/*", "FROM busybox\n\n# ruleid: remove-package-lists\n RUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean", "FROM busybox\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install --no-install-recommends -y python \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*", "FROM busybox\n\n# ok: remove-package-lists\nRUN apt-get update && apt-get install -y \\\n    aufs-tools \\\n    automake \\\n    build-essential \\\n    curl \\\n    dpkg-sig \\\n    libcap-dev \\\n    libsqlite3-dev \\\n    mercurial \\\n    reprepro \\\n    ruby1.9.1 \\\n    ruby1.9.1-dev \\\n    s3cmd=1.1.* \\\n && rm -rf /var/lib/apt/lists/*"], "actual": [true, false, true, false, true], "expected": [true, false, true, false, false], "index": 60, "commit_message": "update remove-package-lists rule (#1381)", "commit_date_str": "2021-07-21 18:30:54 -0400", "leaf_count": 2, "line_count": 3}
{"id": "nontext-field-must-set-null-true", "rule": "rules:\n- id: nontext-field-must-set-null-true\n  patterns:\n  - pattern-inside: |\n      class $M(...):\n        ...\n  - pattern-not: $F = django.db.models.CharField(...)\n  - pattern-not: $F = django.db.models.TextField(...)\n  - pattern-not: $F = django.db.models.SlugField(...)\n  - pattern-not: $F = django.db.models.EmailField(...)\n  - pattern-not: $F = django.db.models.FileField(...)\n  - pattern-not: $F = django.db.models.ImageField(...)\n  - pattern-not: $F = django.db.models.URLField(...)\n  - pattern-not: $F = django.db.models.UUIDField(...)\n  - pattern-not: $F = django.db.models.ManyToManyField(...)\n  - pattern-not: $F = django.db.models.NullBooleanField(...)\n  - pattern-not: $F = phonenumber_field.modelfields.PhoneNumberField(...)\n  - pattern-not: $F = $X(..., null=True, blank=True, ...)\n  - pattern: $F = $X(..., blank=True, ...)\n  message: null=True should be set if blank=True is set on non-text fields.\n  languages: [python]\n  severity: ERROR\n", "failed_tests": ["from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldCKEditorRichtext = RichTextField(blank=True)"], "failed_type": "fp", "testsuite_a": "from django.db import models\nfrom phonenumber_field.modelfields import PhoneNumberField\n\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldPhone = PhoneNumberField()\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldFile = models.FileField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldImage = models.ImageField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n", "testsuite_b": "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldPhone = PhoneNumberField()\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldFile = models.FileField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldImage = models.ImageField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldCKEditorRichtext = RichTextField(blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n", "ground_truth": "rules:\n  - id: nontext-field-must-set-null-true\n    patterns:\n      - pattern-inside: |\n          class $M(...):\n            ...\n      - pattern-not: $F = django.db.models.CharField(...)\n      - pattern-not: $F = django.db.models.TextField(...)\n      - pattern-not: $F = django.db.models.SlugField(...)\n      - pattern-not: $F = django.db.models.EmailField(...)\n      - pattern-not: $F = django.db.models.FileField(...)\n      - pattern-not: $F = django.db.models.ImageField(...)\n      - pattern-not: $F = django.db.models.URLField(...)\n      - pattern-not: $F = django.db.models.UUIDField(...)\n      - pattern-not: $F = django.db.models.ManyToManyField(...)\n      - pattern-not: $F = django.db.models.NullBooleanField(...)\n      - pattern-not: $F = phonenumber_field.modelfields.PhoneNumberField(...)\n      - pattern-not: $F = ckeditor.fields.RichTextField(...)\n      - pattern-not: $F = $X(..., null=True, blank=True, ...)\n      - pattern: $F = $X(..., blank=True, ...)\n    message: null=True should be set if blank=True is set on non-text fields.\n    languages: [python]\n    severity: ERROR\n    metadata:\n      category: correctness\n      technology:\n        - django\n", "rule_path": "extend_dataset/78b45a3f/before/nontext-field-must-set-null-true.yaml", "test_path": "extend_dataset/78b45a3f/after/nontext-field-must-set-null-true.py", "category": "historical", "splited_testsuite_b": ["from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldPhone = PhoneNumberField()", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldFile = models.FileField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldImage = models.ImageField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )", "def fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)", "from django.db import models\nfrom ckeditor.fields import RichTextField\nfrom phonenumber_field.modelfields import PhoneNumberField\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldCKEditorRichtext = RichTextField(blank=True)"], "actual": [false, false, false, false, false, false, false, false, false, false, true, false, false, true], "expected": [false, false, false, false, false, false, false, false, false, false, true, false, false, false], "index": 61, "commit_message": "Removed false positive for django-ckeditor RichTextFields (#2051)", "commit_date_str": "2022-04-29 15:38:12 -0700", "leaf_count": 14, "line_count": 15}
{"id": "avoid-pyyaml-load", "rule": "rules:\n- id: avoid-pyyaml-load\n  languages:\n  - python\n  message: >-\n    Avoid using `load()`. `PyYAML.load` can create arbitrary Python\n    objects. A malicious actor could exploit this to run arbitrary\n    code. Use `safe_load()` instead.\n  fix-regex:\n    regex: load\n    replacement: safe_load\n    count: 1\n  severity: ERROR\n  patterns:\n  - pattern-inside: |\n      import yaml\n      ...\n  - pattern-not-inside: |\n      $YAML = ruamel.yaml.YAML(...)\n      ...\n  - pattern-not: yaml.load(..., Loader=yaml.CSafeLoader, ...)\n  - pattern-not: yaml.load(..., Loader=yaml.SafeLoader, ...)\n  - pattern-not: yaml.load(..., Loader=yaml.BaseLoader, ...)\n  - pattern-not: yaml.load_all(..., Loader=yaml.CSafeLoader, ...)\n  - pattern-not: yaml.load_all(..., Loader=yaml.SafeLoader, ...)\n  - pattern-not: yaml.load_all(..., Loader=yaml.BaseLoader, ...)\n  - pattern-either:\n    - pattern: yaml.load(...)\n    - pattern: yaml.load_all(...)\n", "failed_tests": ["import yaml\n\n#ruleid:avoid-pyyaml-load\nyaml.unsafe_load(\"!!python/object/new:os.system [echo EXPLOIT!]\")"], "failed_type": "fn", "testsuite_a": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\n#ruleid:avoid-pyyaml-load\nyaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)\n\ndef this_is_ok_as_well(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.BaseLoader)\n\ndef this_is_ok_too_two(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.BaseLoader)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")\n", "testsuite_b": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.unsafe_load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.unsafe_load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.Loader, **kwargs)\n\ndef other_thing_two(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.UnsafeLoader, **kwargs)\n\ndef other_thing_three(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.CLoader, **kwargs)\n\ndef other_thing_four(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.Loader, **kwargs)\n\ndef other_thing_five(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.UnsafeLoader, **kwargs)\n\ndef other_thing_six(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.CLoader, **kwargs)\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)\n\ndef this_is_ok_as_well(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.BaseLoader)\n\ndef this_is_ok_too_two(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.BaseLoader)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")\n", "ground_truth": "rules:\n  - id: avoid-pyyaml-load\n    metadata:\n      owasp:\n        - \"A08:2017 - Insecure Deserialization\"\n        - \"A03:2021 - Injection\"\n      cwe: \"CWE-502: Deserialization of Untrusted Data\"\n      references:\n        - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation\n        - https://nvd.nist.gov/vuln/detail/CVE-2017-18342\n      category: security\n      technology:\n        - pyyaml\n    languages:\n      - python\n    message: >-\n      Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`,\n      `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML.\n      An attacker with control over the YAML input could create special YAML input that allows the attacker\n      to run arbitrary Python code. This would allow the attacker to steal files, download and install malware,\n      or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.\n    fix-regex:\n      regex: unsafe_load\n      replacement: safe_load\n      count: 1\n    severity: ERROR\n    patterns:\n      - pattern-inside: |\n          import yaml\n          ...\n      - pattern-not-inside: |\n          $YAML = ruamel.yaml.YAML(...)\n          ...\n      - pattern-either:\n          - pattern: yaml.unsafe_load(...)\n          - pattern: yaml.load(..., Loader=yaml.Loader, ...)\n          - pattern: yaml.load(..., Loader=yaml.UnsafeLoader, ...)\n          - pattern: yaml.load(..., Loader=yaml.CLoader, ...)\n          - pattern: yaml.load_all(..., Loader=yaml.Loader, ...)\n          - pattern: yaml.load_all(..., Loader=yaml.UnsafeLoader, ...)\n          - pattern: yaml.load_all(..., Loader=yaml.CLoader, ...)\n", "rule_path": "extend_dataset/90304669/before/avoid-pyyaml-load.yaml", "test_path": "extend_dataset/90304669/after/avoid-pyyaml-load.py", "category": "historical", "splited_testsuite_b": ["import yaml\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.Loader, **kwargs)", "import yaml\n\ndef other_thing_two(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.UnsafeLoader, **kwargs)", "import yaml\n\ndef other_thing_three(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.CLoader, **kwargs)", "import yaml\n\ndef other_thing_four(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.Loader, **kwargs)", "import yaml\n\ndef other_thing_five(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.UnsafeLoader, **kwargs)", "import yaml\n\ndef other_thing_six(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.CLoader, **kwargs)", "import yaml\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)", "import yaml\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)", "import yaml\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)", "import yaml\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)", "import yaml\n\ndef this_is_ok_as_well(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.BaseLoader)", "import yaml\n\ndef this_is_ok_too_two(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.BaseLoader)", "import yaml\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")", "import yaml\n\n#ruleid:avoid-pyyaml-load\nyaml.unsafe_load(\"!!python/object/new:os.system [echo EXPLOIT!]\")"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false, true], "index": 62, "commit_message": "Python pyyaml changes (#2382)", "commit_date_str": "2022-09-19 18:35:03 -0500", "leaf_count": 10, "line_count": 20}
{"id": "avoid-pyyaml-load", "rule": "rules:\n- id: avoid-pyyaml-load\n  languages:\n  - python\n  message: >-\n    Avoid using `load()`. `PyYAML.load` can create arbitrary Python\n    objects. A malicious actor could exploit this to run arbitrary\n    code. Use `safe_load()` instead.\n  fix-regex:\n    regex: load\n    replacement: safe_load\n    count: 1\n  severity: ERROR\n  patterns:\n  - pattern-inside: |\n      import yaml\n      ...\n  - pattern-not-inside: |\n      $YAML = ruamel.yaml.YAML(...)\n      ...\n  - pattern-not: yaml.load(..., Loader=yaml.CSafeLoader, ...)\n  - pattern-not: yaml.load(..., Loader=yaml.SafeLoader, ...)\n  - pattern-not: yaml.load(..., Loader=yaml.BaseLoader, ...)\n  - pattern-not: yaml.load_all(..., Loader=yaml.CSafeLoader, ...)\n  - pattern-not: yaml.load_all(..., Loader=yaml.SafeLoader, ...)\n  - pattern-not: yaml.load_all(..., Loader=yaml.BaseLoader, ...)\n  - pattern-either:\n    - pattern: yaml.load(...)\n    - pattern: yaml.load_all(...)\n", "failed_tests": ["import yaml\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.unsafe_load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)"], "failed_type": "fn", "testsuite_a": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\n#ruleid:avoid-pyyaml-load\nyaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)\n\ndef this_is_ok_as_well(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.BaseLoader)\n\ndef this_is_ok_too_two(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.BaseLoader)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")\n", "testsuite_b": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.unsafe_load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.unsafe_load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.Loader, **kwargs)\n\ndef other_thing_two(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.UnsafeLoader, **kwargs)\n\ndef other_thing_three(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.CLoader, **kwargs)\n\ndef other_thing_four(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.Loader, **kwargs)\n\ndef other_thing_five(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.UnsafeLoader, **kwargs)\n\ndef other_thing_six(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.CLoader, **kwargs)\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)\n\ndef this_is_ok_as_well(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.BaseLoader)\n\ndef this_is_ok_too_two(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.BaseLoader)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")\n", "ground_truth": "rules:\n  - id: avoid-pyyaml-load\n    metadata:\n      owasp:\n        - \"A08:2017 - Insecure Deserialization\"\n        - \"A03:2021 - Injection\"\n      cwe: \"CWE-502: Deserialization of Untrusted Data\"\n      references:\n        - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation\n        - https://nvd.nist.gov/vuln/detail/CVE-2017-18342\n      category: security\n      technology:\n        - pyyaml\n    languages:\n      - python\n    message: >-\n      Detected a possible YAML deserialization vulnerability. `yaml.unsafe_load`, `yaml.Loader`,\n      `yaml.CLoader`, and `yaml.UnsafeLoader` are all known to be unsafe methods of deserializing YAML.\n      An attacker with control over the YAML input could create special YAML input that allows the attacker\n      to run arbitrary Python code. This would allow the attacker to steal files, download and install malware,\n      or otherwise take over the machine. Use `yaml.safe_load` or `yaml.SafeLoader` instead.\n    fix-regex:\n      regex: unsafe_load\n      replacement: safe_load\n      count: 1\n    severity: ERROR\n    patterns:\n      - pattern-inside: |\n          import yaml\n          ...\n      - pattern-not-inside: |\n          $YAML = ruamel.yaml.YAML(...)\n          ...\n      - pattern-either:\n          - pattern: yaml.unsafe_load(...)\n          - pattern: yaml.load(..., Loader=yaml.Loader, ...)\n          - pattern: yaml.load(..., Loader=yaml.UnsafeLoader, ...)\n          - pattern: yaml.load(..., Loader=yaml.CLoader, ...)\n          - pattern: yaml.load_all(..., Loader=yaml.Loader, ...)\n          - pattern: yaml.load_all(..., Loader=yaml.UnsafeLoader, ...)\n          - pattern: yaml.load_all(..., Loader=yaml.CLoader, ...)\n", "rule_path": "extend_dataset/90304669/before/avoid-pyyaml-load.yaml", "test_path": "extend_dataset/90304669/after/avoid-pyyaml-load.py", "category": "historical", "splited_testsuite_b": ["import yaml\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.Loader, **kwargs)", "import yaml\n\ndef other_thing_two(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.UnsafeLoader, **kwargs)", "import yaml\n\ndef other_thing_three(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.CLoader, **kwargs)", "import yaml\n\ndef other_thing_four(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.Loader, **kwargs)", "import yaml\n\ndef other_thing_five(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.UnsafeLoader, **kwargs)", "import yaml\n\ndef other_thing_six(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", Loader=yaml.CLoader, **kwargs)", "import yaml\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)", "import yaml\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)", "import yaml\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)", "import yaml\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)", "import yaml\n\ndef this_is_ok_as_well(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.BaseLoader)", "import yaml\n\ndef this_is_ok_too_two(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.BaseLoader)", "import yaml\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")", "import yaml\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.unsafe_load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false, true], "index": 63, "commit_message": "Python pyyaml changes (#2382)", "commit_date_str": "2022-09-19 18:35:03 -0500", "leaf_count": 10, "line_count": 20}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: \n      ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):(?![\\x{2022}*]+?@)([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ok: detected-username-and-password-in-uri\nhttps://docker.ouroath.com:4443/paranoids/cameo@sha256:35f1ea3d0ae9dc9b058dd8d224f1bb7e053bc58615778f9317c27b73c86dd806"], "failed_type": "fp", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:***@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:passworD123*@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*D12@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:************@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:Sample%password12@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka-chakkaf:chakkA12+@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://username:f12*Password@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplEpassword12*@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user123:Password12^@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user123:passworD0+@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user123:passw0rD1&@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user123:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwdTest123+@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nhttps://docker.ouroath.com:4443/paranoids/cameo@sha256:35f1ea3d0ae9dc9b058dd8d224f1bb7e053bc58615778f9317c27b73c86dd806\n\n# ok: detected-username-and-password-in-uri\n[https://npm.vzbuilders.com/-/icon/@vzmi/navrail-utils/latest](http://npm.vzbuilders.com/-/package/@vzmi/navrail-utils)\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern: $PROTOCOL://$...USERNAME:$...PASSWORD@$END\n  - metavariable-regex:\n      metavariable: $...USERNAME\n      regex: ({?)([A-Za-z])([A-Za-z0-9_-]){5,31}(}?) #username must start with alphabet letters, be between 6-32 chars of alphanumeric/underscore/dash. Can optionally be surrounded by brackets\n  - metavariable-regex:\n      metavariable: $...PASSWORD\n      regex: (?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]){6,32} #password must have at least one number, one uppercase letter, one 'special character' defined by OWASP, be between 6-32 chars\n  - metavariable-regex:\n      metavariable: $PROTOCOL\n      regex: (.*http.*)|(.*sql.*)|(.*ftp.*)|(.*smtp.*)\n  languages:\n  - generic\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/1f5ed86c/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/1f5ed86c/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:passworD123*@example.com", "# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*D12@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ok: detected-username-and-password-in-uri\nhttps://username:************@example.com", "# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com", "# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:Sample%password12@merchantdb/collection", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka-chakkaf:chakkA12+@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\nsamp=http://username:f12*Password@totalsuccess@megafailure/yourname", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplEpassword12*@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user123:Password12^@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user123:passworD0+@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user123:passw0rD1&@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ok: detected-username-and-password-in-uri\nf\"https://user123:{_github_pat(github_secret_name)}@github.com/\"", "# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"", "# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwdTest123+@github.com/\"", "# ok: detected-username-and-password-in-uri\nhttps://docker.ouroath.com:4443/paranoids/cameo@sha256:35f1ea3d0ae9dc9b058dd8d224f1bb7e053bc58615778f9317c27b73c86dd806"], "actual": [true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true], "expected": [true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false], "index": 64, "commit_message": "edited username and password rule to be less FP heavy", "commit_date_str": "2022-07-07 11:22:41 -0700", "leaf_count": 1, "line_count": 2}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: \n      ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):(?![\\x{2022}*]+?@)([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ok: detected-username-and-password-in-uri\n[https://npm.vzbuilders.com/-/icon/@vzmi/navrail-utils/latest](http://npm.vzbuilders.com/-/package/@vzmi/navrail-utils)"], "failed_type": "fp", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:***@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:passworD123*@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*D12@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:************@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:Sample%password12@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka-chakkaf:chakkA12+@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://username:f12*Password@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplEpassword12*@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user123:Password12^@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user123:passworD0+@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user123:passw0rD1&@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user123:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwdTest123+@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nhttps://docker.ouroath.com:4443/paranoids/cameo@sha256:35f1ea3d0ae9dc9b058dd8d224f1bb7e053bc58615778f9317c27b73c86dd806\n\n# ok: detected-username-and-password-in-uri\n[https://npm.vzbuilders.com/-/icon/@vzmi/navrail-utils/latest](http://npm.vzbuilders.com/-/package/@vzmi/navrail-utils)\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern: $PROTOCOL://$...USERNAME:$...PASSWORD@$END\n  - metavariable-regex:\n      metavariable: $...USERNAME\n      regex: ({?)([A-Za-z])([A-Za-z0-9_-]){5,31}(}?) #username must start with alphabet letters, be between 6-32 chars of alphanumeric/underscore/dash. Can optionally be surrounded by brackets\n  - metavariable-regex:\n      metavariable: $...PASSWORD\n      regex: (?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]){6,32} #password must have at least one number, one uppercase letter, one 'special character' defined by OWASP, be between 6-32 chars\n  - metavariable-regex:\n      metavariable: $PROTOCOL\n      regex: (.*http.*)|(.*sql.*)|(.*ftp.*)|(.*smtp.*)\n  languages:\n  - generic\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/1f5ed86c/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/1f5ed86c/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:passworD123*@example.com", "# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*D12@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ok: detected-username-and-password-in-uri\nhttps://username:************@example.com", "# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com", "# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:Sample%password12@merchantdb/collection", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka-chakkaf:chakkA12+@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\nsamp=http://username:f12*Password@totalsuccess@megafailure/yourname", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplEpassword12*@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user123:Password12^@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user123:passworD0+@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user123:passw0rD1&@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ok: detected-username-and-password-in-uri\nf\"https://user123:{_github_pat(github_secret_name)}@github.com/\"", "# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"", "# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwdTest123+@github.com/\"", "# ok: detected-username-and-password-in-uri\n[https://npm.vzbuilders.com/-/icon/@vzmi/navrail-utils/latest](http://npm.vzbuilders.com/-/package/@vzmi/navrail-utils)"], "actual": [true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true], "expected": [true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false], "index": 65, "commit_message": "edited username and password rule to be less FP heavy", "commit_date_str": "2022-07-07 11:22:41 -0700", "leaf_count": 1, "line_count": 2}
{"id": "missing-integrity", "rule": "rules:\n- id: missing-integrity\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A >\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n      - pattern-either:\n        - pattern: src='... :// ...'\n        - pattern: src=\"... :// ...\"\n        - pattern: href='... :// ...'\n        - pattern: href=\"... :// ...\"\n        - pattern: src='//...'\n        - pattern: src=\"//...\"\n        - pattern: href='//...'\n        - pattern: href=\"//...\"\n      - pattern-not-regex: (?is).*integrity=\n      - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)\n      - pattern-not-regex: .*rel\\s*=\\s*['\"]?preconnect.*\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://otherfontsxgoogleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>"], "failed_type": "fn", "testsuite_a": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\" />\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n\t<!-- ok: missing-integrity -->\n\t<link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" />\n\t<!-- ok: missing-integrity -->\n\t<link rel=preconnect href=\"https://fonts.gstatic.com/\" />\n</head>\n<body>\n\n</body>\n</html>", "testsuite_b": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\" />\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://otherfontsxgoogleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n\t<!-- ok: missing-integrity -->\n\t<link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" />\n\t<!-- ok: missing-integrity -->\n\t<link rel=preconnect href=\"https://fonts.gstatic.com/\" />\n</head>\n<body>\n\n</body>\n</html>\n", "ground_truth": "rules:\n- id: missing-integrity\n  metadata:\n    category: security\n    technology:\n    - html\n    cwe:\n    - 'CWE-353: Missing Support for Integrity Check'\n    owasp:\n    - A08:2021 - Software and Data Integrity Failures\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A >\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n        - pattern-either:\n          - pattern: src='... :// ...'\n          - pattern: src=\"... :// ...\"\n          - pattern: href='... :// ...'\n          - pattern: href=\"... :// ...\"\n          - pattern: src='//...'\n          - pattern: src=\"//...\"\n          - pattern: href='//...'\n          - pattern: href=\"//...\"\n        - pattern-not-regex: (?is).*integrity=\n        - pattern-not-regex: (google-analytics\\.com|fonts\\.googleapis\\.com|fonts\\.gstatic\\.com|googletagmanager\\.com)\n        - pattern-not-regex: .*rel\\s*=\\s*['\"]?preconnect.*\n  paths:\n    include:\n    - '*.html'\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "rule_path": "extend_dataset/3c12dcc7/before/missing-integrity.yaml", "test_path": "extend_dataset/3c12dcc7/after/missing-integrity.html", "category": "historical", "splited_testsuite_b": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\" />\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n\t<!-- ok: missing-integrity -->\n\t<link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" />\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n\t<!-- ok: missing-integrity -->\n\t<link rel=preconnect href=\"https://fonts.gstatic.com/\" />\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://otherfontsxgoogleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>"], "actual": [true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, false, false], "expected": [true, true, false, false, false, true, true, false, false, false, false, false, false, false, false, false, true], "index": 66, "commit_message": "Escape hostnames and add fonts.gstatic.com to missing-integrity (#3335)", "commit_date_str": "2024-03-14 16:51:30 +0700", "leaf_count": 14, "line_count": 19}
{"id": "unverified-ssl-context", "rule": "rules:\n- id: unverified-ssl-context\n  pattern: ssl._create_unverified_context(...)\n  fix-regex:\n    regex: _create_unverified_context\n    replacement: create_default_context\n  message: >-\n    Unverified SSL context detected. This will permit insecure connections without\n    verifying\n    SSL certificates. Use 'ssl.create_default_context()' instead.\n  severity: ERROR\n  languages:\n  - python\n", "failed_tests": ["import ssl\nimport httplib.client\n\n# ruleid:unverified-ssl-context\nssl._create_default_https_context = ssl._create_unverified_context\nurllib2.urlopen(\"https://google.com\").read()"], "failed_type": "fn", "testsuite_a": "import ssl\nimport httplib.client\n\n# ok:unverified-ssl-context\ncontext = ssl.create_default_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)\n\n# ruleid:unverified-ssl-context\ncontext = ssl._create_unverified_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)\n\n# ruleid:unverified-ssl-context\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=ssl._create_unverified_context())\n", "testsuite_b": "import ssl\nimport httplib.client\n\n# ok:unverified-ssl-context\ncontext = ssl.create_default_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)\n\n# ruleid:unverified-ssl-context\ncontext = ssl._create_unverified_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)\n\n# ruleid:unverified-ssl-context\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=ssl._create_unverified_context())\n\n# ruleid:unverified-ssl-context\nssl._create_default_https_context = ssl._create_unverified_context\nurllib2.urlopen(\"https://google.com\").read()\n", "ground_truth": "rules:\n- id: unverified-ssl-context\n  patterns:\n  - pattern-either:\n    - pattern: ssl._create_unverified_context(...)\n    - pattern: ssl._create_default_https_context = ssl._create_unverified_context\n  fix-regex:\n    regex: _create_unverified_context\n    replacement: create_default_context\n  message: >-\n    Unverified SSL context detected. This will permit insecure connections without\n    verifying\n    SSL certificates. Use 'ssl.create_default_context' instead.\n  metadata:\n    owasp:\n    - A03:2017 - Sensitive Data Exposure\n    - A07:2021 - Identification and Authentication Failures\n    cwe:\n    - 'CWE-295: Improper Certificate Validation'\n    references:\n    - https://docs.python.org/3/library/ssl.html#ssl-security\n    - https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection\n    category: security\n    technology:\n    - python\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: MEDIUM\n    confidence: MEDIUM\n  severity: ERROR\n  languages:\n  - python\n", "rule_path": "extend_dataset/12498bfc/before/unverified-ssl-context.yaml", "test_path": "extend_dataset/12498bfc/after/unverified-ssl-context.py", "category": "historical", "splited_testsuite_b": ["import ssl\nimport httplib.client\n\n# ok:unverified-ssl-context\ncontext = ssl.create_default_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)", "import ssl\nimport httplib.client\n\n# ruleid:unverified-ssl-context\ncontext = ssl._create_unverified_context()\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=context)", "import ssl\nimport httplib.client\n\n# ruleid:unverified-ssl-context\nconn = httplib.client.HTTPSConnection(\"123.123.21.21\", context=ssl._create_unverified_context())", "import ssl\nimport httplib.client\n\n# ruleid:unverified-ssl-context\nssl._create_default_https_context = ssl._create_unverified_context\nurllib2.urlopen(\"https://google.com\").read()"], "actual": [false, true, true, false], "expected": [false, true, true, true], "index": 67, "commit_message": "adding case to unverified ssl context", "commit_date_str": "2022-10-20 16:59:20 -0700", "leaf_count": 1, "line_count": 1}
{"id": "alias-for-html-safe", "rule": "rules:\n- id: alias-for-html-safe\n  message: >-\n    The syntax `<%== ... %>` is an alias for `html_safe`. This means the\n    content inside these tags will be rendered as raw HTML. This may expose\n    your application to cross-site scripting. If you need raw HTML, prefer\n    using the more explicit `html_safe` and be sure to correctly sanitize\n    variables using a library such as DOMPurify.\n  languages: [generic]\n  severity: WARNING\n  pattern: <%== ... %>\n", "failed_tests": ["@custom_page_title = \u201cPage <strong>Title</strong>\u201d\n<div>\n  <!-- ok: alias-for-html-safe -->\n  <h1><%== @custom_page_title.to_json %></h1>\n</div>"], "failed_type": "fp", "testsuite_a": "@custom_page_title = \u201cPage <strong>Title</strong>\u201d\n<div>\n  <!-- ruleid: alias-for-html-safe -->\n  <h1><%== @custom_page_title %></h1>\n  <!-- ok: alias-for-html-safe -->\n  <h1><%= @custom_page_title %></h1>\n</div>\n", "testsuite_b": "@custom_page_title = \u201cPage <strong>Title</strong>\u201d\n<div>\n  <!-- ruleid: alias-for-html-safe -->\n  <h1><%== @custom_page_title %></h1>\n  <!-- ok: alias-for-html-safe -->\n  <h1><%= @custom_page_title %></h1>\n  <!-- ok: alias-for-html-safe -->\n  <h1><%== @custom_page_title.to_json %></h1>\n</div>\n", "ground_truth": "rules:\n  - id: alias-for-html-safe\n    message: >-\n      The syntax `<%== ... %>` is an alias for `html_safe`. This means the\n      content inside these tags will be rendered as raw HTML. This may expose\n      your application to cross-site scripting. If you need raw HTML, prefer\n      using the more explicit `html_safe` and be sure to correctly sanitize\n      variables using a library such as DOMPurify.\n    metadata:\n      references:\n        - https://medium.com/sumone-technical-blog/a-pretty-way-to-unescape-html-in-a-ruby-on-rails-application-efc22b850027\n        - https://stackoverflow.com/questions/4251284/raw-vs-html-safe-vs-h-to-unescape-html#:~:text===\n      category: security\n      technology:\n        - rails\n    languages: [generic]\n    paths:\n      include:\n        - \"*.erb\"\n    severity: WARNING\n    patterns:\n      - pattern: <%== ... %>\n      - pattern-not: <%== $...A.to_json %>\n", "rule_path": "extend_dataset/0b54935a/before/alias-for-html-safe.yaml", "test_path": "extend_dataset/0b54935a/after/alias-for-html-safe.erb", "category": "historical", "splited_testsuite_b": ["@custom_page_title = \u201cPage <strong>Title</strong>\u201d\n<div>\n  <!-- ruleid: alias-for-html-safe -->\n  <h1><%== @custom_page_title %></h1>\n</div>", "@custom_page_title = \u201cPage <strong>Title</strong>\u201d\n<div>\n  <!-- ok: alias-for-html-safe -->\n  <h1><%= @custom_page_title %></h1>\n</div>", "@custom_page_title = \u201cPage <strong>Title</strong>\u201d\n<div>\n  <!-- ok: alias-for-html-safe -->\n  <h1><%== @custom_page_title.to_json %></h1>\n</div>"], "actual": [true, false, true], "expected": [true, false, false], "index": 68, "commit_message": "Consider html_safe alias plus .to_json a safe pattern (#1529)", "commit_date_str": "2021-10-12 11:48:14 -0500", "leaf_count": 1, "line_count": 1}
{"id": "echoed-request", "rule": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  pattern-sanitizers:\n  - pattern: isset(...)\n  - pattern: empty(...)\n  - pattern: htmlentities(...)\n  - pattern: htmlspecialchars(...)\n", "failed_tests": ["<?php\n\n// example key-value: name=%3Cscript%3Econfirm%28%29%3C%2Fscript%3E\nfunction dangerousPrintUsage() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    print(\"Hello : $name\");\n    // ruleid: echoed-request\n    print(\"Hello : \" . $name);\n}"], "failed_type": "fn", "testsuite_a": "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\nfunction doSmth5() {\n     // ruleid: echoed-request\n    echo \"Hello \".trim($_POST['name']);\n}\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $safevar = \"Hello \".htmlentities(trim($_GET['name']));\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n\nfunction doOK6() {\n    $safevar = \"Hello \".htmlentities($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK7() {\n    $safevar = \"Hello \".htmlspecialchars($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\n\n", "testsuite_b": "<?php\n\n// example key-value: name=%3Cscript%3Econfirm%28%29%3C%2Fscript%3E\nfunction dangerousPrintUsage() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    print(\"Hello : $name\");\n    // ruleid: echoed-request\n    print(\"Hello : \" . $name);\n}\n\nfunction safePrintUsage() {\n    $name = $_REQUEST['name'];\n    // ok: echoed-request\n    print(\"Hello : \" . htmlentities($name));\n}\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\nfunction doSmth5() {\n     // ruleid: echoed-request\n    echo \"Hello \".trim($_POST['name']);\n}\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $safevar = \"Hello \".htmlentities(trim($_GET['name']));\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n\nfunction doOK6() {\n    $safevar = \"Hello \".htmlentities($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK7() {\n    $safevar = \"Hello \".htmlspecialchars($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\n\n", "ground_truth": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  - pattern: print(...);\n  pattern-sanitizers:\n  - pattern: isset(...)\n  - pattern: empty(...)\n  - pattern: htmlentities(...)\n  - pattern: htmlspecialchars(...)\n  metadata:\n    technology:\n    - php\n    cwe:\n    - \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp:\n    - A07:2017 - Cross-Site Scripting (XSS)\n    - A03:2021 - Injection\n    category: security\n    references:\n    - https://www.php.net/manual/en/function.htmlentities.php\n    - https://www.php.net/manual/en/reserved.variables.request.php\n    - https://www.php.net/manual/en/reserved.variables.post.php\n    - https://www.php.net/manual/en/reserved.variables.get.php\n    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: MEDIUM\n    confidence: MEDIUM\n", "rule_path": "extend_dataset/aa0afb50/before/echoed-request.yaml", "test_path": "extend_dataset/aa0afb50/after/echoed-request.php", "category": "historical", "splited_testsuite_b": ["<?php\n\nfunction safePrintUsage() {\n    $name = $_REQUEST['name'];\n    // ok: echoed-request\n    print(\"Hello : \" . htmlentities($name));\n}", "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}", "<?php\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}", "<?php\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}", "<?php\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}", "<?php\n\nfunction doSmth5() {\n     // ruleid: echoed-request\n    echo \"Hello \".trim($_POST['name']);\n}", "<?php\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}", "<?php\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}", "<?php\n\nfunction doOK3() {\n    $safevar = \"Hello \".htmlentities(trim($_GET['name']));\n    // ok: echoed-request\n    echo $safevar;\n}", "<?php\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}", "<?php\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}", "<?php\n\nfunction doOK6() {\n    $safevar = \"Hello \".htmlentities($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}", "<?php\n\nfunction doOK7() {\n    $safevar = \"Hello \".htmlspecialchars($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}", "<?php\n\n// example key-value: name=%3Cscript%3Econfirm%28%29%3C%2Fscript%3E\nfunction dangerousPrintUsage() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    print(\"Hello : $name\");\n    // ruleid: echoed-request\n    print(\"Hello : \" . $name);\n}"], "actual": [false, true, true, true, true, true, false, false, false, false, false, false, false, false], "expected": [false, true, true, true, true, true, false, false, false, false, false, false, false, true], "index": 69, "commit_message": "Add additional sink for XSS and HTML injection in php (#3217)", "commit_date_str": "2023-11-21 09:06:01 +0000", "leaf_count": 8, "line_count": 11}
{"id": "missing-integrity", "rule": "rules:\n- id: missing-integrity\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A >\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n      - pattern-either:\n        - pattern: src='... :// ...'\n        - pattern: src=\"... :// ...\"\n        - pattern: href='... :// ...'\n        - pattern: href=\"... :// ...\"\n        - pattern: src='//...'\n        - pattern: src=\"//...\"\n        - pattern: href='//...'\n        - pattern: href=\"//...\"\n      - pattern-not-regex: (?is).*integrity=\n      - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n\t<!-- ok: missing-integrity -->\n\t<link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" />\n</head>\n<body>\n\n</body>\n</html>"], "failed_type": "fp", "testsuite_a": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\" />\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>\n", "testsuite_b": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\" />\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n\t<!-- ok: missing-integrity -->\n\t<link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" />\n\t<!-- ok: missing-integrity -->\n\t<link rel=preconnect href=\"https://fonts.gstatic.com/\" />\n</head>\n<body>\n\n</body>\n</html>", "ground_truth": "rules:\n- id: missing-integrity\n  metadata:\n    category: security\n    technology:\n    - html\n    cwe:\n    - 'CWE-353: Missing Support for Integrity Check'\n    owasp:\n    - A08:2021 - Software and Data Integrity Failures\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A >\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n        - pattern-either:\n          - pattern: src='... :// ...'\n          - pattern: src=\"... :// ...\"\n          - pattern: href='... :// ...'\n          - pattern: href=\"... :// ...\"\n          - pattern: src='//...'\n          - pattern: src=\"//...\"\n          - pattern: href='//...'\n          - pattern: href=\"//...\"\n        - pattern-not-regex: (?is).*integrity=\n        - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)\n        - pattern-not-regex: .*rel\\s*=\\s*['\"]?preconnect.*\n  paths:\n    include:\n    - '*.html'\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]", "rule_path": "extend_dataset/5fe86926/before/missing-integrity.yaml", "test_path": "extend_dataset/5fe86926/after/missing-integrity.html", "category": "historical", "splited_testsuite_b": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\" />\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n\t<!-- ok: missing-integrity -->\n\t<link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" />\n</head>\n<body>\n\n</body>\n</html>"], "actual": [true, true, false, false, false, true, true, false, false, false, false, false, false, false, true], "expected": [true, true, false, false, false, true, true, false, false, false, false, false, false, false, false], "index": 70, "commit_message": "update html missing-integrity rule (#2842)", "commit_date_str": "2023-04-03 16:43:40 +0900", "leaf_count": 13, "line_count": 18}
{"id": "missing-integrity", "rule": "rules:\n- id: missing-integrity\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A >\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n      - pattern-either:\n        - pattern: src='... :// ...'\n        - pattern: src=\"... :// ...\"\n        - pattern: href='... :// ...'\n        - pattern: href=\"... :// ...\"\n        - pattern: src='//...'\n        - pattern: src=\"//...\"\n        - pattern: href='//...'\n        - pattern: href=\"//...\"\n      - pattern-not-regex: (?is).*integrity=\n      - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n\t<!-- ok: missing-integrity -->\n\t<link rel=preconnect href=\"https://fonts.gstatic.com/\" />\n</head>\n<body>\n\n</body>\n</html>"], "failed_type": "fp", "testsuite_a": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\" />\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>\n", "testsuite_b": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\" />\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n\t<!-- ok: missing-integrity -->\n\t<link rel=\"preconnect\" href=\"https://fonts.gstatic.com/\" />\n\t<!-- ok: missing-integrity -->\n\t<link rel=preconnect href=\"https://fonts.gstatic.com/\" />\n</head>\n<body>\n\n</body>\n</html>", "ground_truth": "rules:\n- id: missing-integrity\n  metadata:\n    category: security\n    technology:\n    - html\n    cwe:\n    - 'CWE-353: Missing Support for Integrity Check'\n    owasp:\n    - A08:2021 - Software and Data Integrity Failures\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A >\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n        - pattern-either:\n          - pattern: src='... :// ...'\n          - pattern: src=\"... :// ...\"\n          - pattern: href='... :// ...'\n          - pattern: href=\"... :// ...\"\n          - pattern: src='//...'\n          - pattern: src=\"//...\"\n          - pattern: href='//...'\n          - pattern: href=\"//...\"\n        - pattern-not-regex: (?is).*integrity=\n        - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)\n        - pattern-not-regex: .*rel\\s*=\\s*['\"]?preconnect.*\n  paths:\n    include:\n    - '*.html'\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]", "rule_path": "extend_dataset/5fe86926/before/missing-integrity.yaml", "test_path": "extend_dataset/5fe86926/after/missing-integrity.html", "category": "historical", "splited_testsuite_b": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\" />\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n\t<!-- ok: missing-integrity -->\n\t<link rel=preconnect href=\"https://fonts.gstatic.com/\" />\n</head>\n<body>\n\n</body>\n</html>"], "actual": [true, true, false, false, false, true, true, false, false, false, false, false, false, false, true], "expected": [true, true, false, false, false, true, true, false, false, false, false, false, false, false, false], "index": 71, "commit_message": "update html missing-integrity rule (#2842)", "commit_date_str": "2023-04-03 16:43:40 +0900", "leaf_count": 13, "line_count": 18}
{"id": "file-inclusion", "rule": "rules:\n- id: file-inclusion\n  patterns:\n  - pattern: $FUNC(...);\n  - pattern-not: $FUNC(\"...\");\n  - pattern-not: $FUNC(__DIR__ . \"...\");\n  - metavariable-regex:\n      metavariable: $FUNC\n      regex: include|include_once|require|require_once\n  message: >-\n    Detected non-constant file inclusion. This can lead to local file inclusion (LFI)\n    or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI\n    could lead to sensitive files being obtained by attackers. Instead, explicitly\n    specify what to include. If that is not a viable solution, validate user input\n    thoroughly.\n  languages: [php]\n  severity: ERROR\n", "failed_tests": ["<?php\n\n// ok: file-inclusion\ninclude_safe(__DIR__ . $user_input);"], "failed_type": "fp", "testsuite_a": "<?php\n\n// ruleid: file-inclusion\ninclude($user_input);\n\n// ok: file-inclusion\ninclude('constant.php');\n\n// ruleid: file-inclusion\ninclude_once($user_input);\n\n// ok: file-inclusion\ninclude_once('constant.php');\n\n// ruleid: file-inclusion\nrequire($user_input);\n\n// ok: file-inclusion\nrequire('constant.php');\n\n// ruleid: file-inclusion\nrequire_once($user_input);\n\n// ok: file-inclusion\nrequire_once('constant.php');\n\n// ruleid: file-inclusion\ninclude(__DIR__ . $user_input);\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');\n", "testsuite_b": "<?php\n\n// ruleid: file-inclusion\ninclude($user_input);\n\n// ok: file-inclusion\ninclude('constant.php');\n\n// ruleid: file-inclusion\ninclude_once($user_input);\n\n// ok: file-inclusion\ninclude_once('constant.php');\n\n// ruleid: file-inclusion\nrequire($user_input);\n\n// ok: file-inclusion\nrequire('constant.php');\n\n// ruleid: file-inclusion\nrequire_once($user_input);\n\n// ok: file-inclusion\nrequire_once('constant.php');\n\n// ruleid: file-inclusion\ninclude(__DIR__ . $user_input);\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');\n\n// ok: file-inclusion\ninclude_safe(__DIR__ . $user_input);\n", "ground_truth": "rules:\n  - id: file-inclusion\n    patterns:\n      - pattern: $FUNC(...);\n      - pattern-not: $FUNC(\"...\");\n      - pattern-not: $FUNC(__DIR__ . \"...\");\n      - metavariable-regex:\n          metavariable: $FUNC\n          regex: \\b(include|include_once|require|require_once)\\b\n    message: >-\n      Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.\n    metadata:\n      references:\n        - https://www.php.net/manual/en/function.include.php\n        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php\n        - https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion\n      category: security\n      technology:\n        - php\n    languages: [php]\n    severity: ERROR\n", "rule_path": "extend_dataset/8615d04b/before/file-inclusion.yaml", "test_path": "extend_dataset/8615d04b/after/file-inclusion.php", "category": "historical", "splited_testsuite_b": ["<?php\n\n// ruleid: file-inclusion\ninclude($user_input);", "<?php\n\n// ok: file-inclusion\ninclude('constant.php');", "<?php\n\n// ruleid: file-inclusion\ninclude_once($user_input);", "<?php\n\n// ok: file-inclusion\ninclude_once('constant.php');", "<?php\n\n// ruleid: file-inclusion\nrequire($user_input);", "<?php\n\n// ok: file-inclusion\nrequire('constant.php');", "<?php\n\n// ruleid: file-inclusion\nrequire_once($user_input);", "<?php\n\n// ok: file-inclusion\nrequire_once('constant.php');", "<?php\n\n// ruleid: file-inclusion\ninclude(__DIR__ . $user_input);", "<?php\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');", "<?php\n\n// ok: file-inclusion\ninclude_safe(__DIR__ . $user_input);"], "actual": [true, false, true, false, true, false, true, false, true, false, true], "expected": [true, false, true, false, true, false, true, false, true, false, false], "index": 72, "commit_message": "fix partial match issue with include regex (#1894)", "commit_date_str": "2022-03-15 21:59:48 -0700", "leaf_count": 5, "line_count": 7}
{"id": "raw-html-format", "rule": "rules:\n- id: raw-html-format\n  message: >-\n    User data flows into the host portion of this manually-constructed HTML.\n    This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from\n    user-provided input.\n    Consider using a sanitization library such as DOMPurify to sanitize the HTML within.\n  languages:\n  - javascript\n  - typescript\n  severity: WARNING\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern-inside: function ... ($REQ, $RES) {...}\n      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}\n      - patterns:\n        - pattern-either:\n          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})\n          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})\n        - metavariable-regex:\n            metavariable: $METHOD\n            regex: ^(get|post|put|head|delete|options)$\n    - pattern-either:\n      - pattern: $REQ.query\n      - pattern: $REQ.body\n      - pattern: $REQ.params\n      - pattern: $REQ.cookies\n      - pattern: $REQ.headers\n  - patterns:\n    - pattern-either:\n      - pattern-inside: |\n          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n          {...}\n      - pattern-inside: |\n          ({ $REQ }: Request,$RES: Response) => {...}\n    - focus-metavariable: $REQ\n    - pattern-either:\n      - pattern: params\n      - pattern: query\n      - pattern: cookies\n      - pattern: headers\n      - pattern: body\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - pattern: '\"$HTMLSTR\" + $EXPR'\n          - pattern: '\"$HTMLSTR\".concat(...)'\n          - pattern: util.format($HTMLSTR, ...)\n        - metavariable-pattern:\n            metavariable: $HTMLSTR\n            language: generic\n            pattern: <$TAG ...\n      - patterns:\n        - pattern: |\n            `...`\n        - pattern-regex: |\n            .*<\\w+.*\n", "failed_tests": ["const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.post('/ok-test', async (req, res) => {\n    let { foobar } = req.query\n    let sanitizedParam = sanitizeUrl(foobar)\n    const url = `${baseUrl}/foo/bar?yo=123&param=${sanitizedParam}`\n    // ok: raw-html-format\n    return res.send(`<a href=\"${url}\" />`)\n})\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))"], "failed_type": "fp", "testsuite_a": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/test', async (req, res) => {\n    // ruleid: raw-html-format\n    res.send(\"<h1>\" + \"message: \" + req.query.message + \"</h1>\");\n})\n\napp.post('/test2', async (req, res) => {\n    // ruleid: raw-html-format\n    res.send(`<h1>message: ${req.query.message}</h1>`);\n})\n\napp.post('/test3', async (req, res) => {\n    // ruleid: raw-html-format\n    var html = \"<h1>\" + \"message: \" + req.query.message + \"</h1>\"\n    res.send(html);\n})\n\napp.post('/test4', async (req, res) => {\n    var html = \"<h1> message\"\n    // ruleid: raw-html-format\n    html = html.concat(req.query.message)\n    html = html.concat(\"</h1>\")\n    res.send(html);\n})\n\napp.get('/ok', async (req, res) => {\n    // ok: raw-html-format\n    res.send(\"message: \" + req.query.message);\n})\n\napp.post('/ok2', async (req, res) => {\n    // ok: raw-html-format\n    res.send(`message: ${req.query.message}`);\n})\n\napp.post('/ok3', async (req, res) => {\n    // ok: raw-html-format\n    var data = \"message: \" + req.query.message;\n    res.send(data);\n})\n\napp.post('/ok4', async (req, res) => {\n    var data = \"message: \"\n    // ok: raw-html-format\n    data = data.concat(req.query.message)\n    res.send(data);\n})\n\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n", "testsuite_b": "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/test', async (req, res) => {\n    // ruleid: raw-html-format\n    res.send(\"<h1>\" + \"message: \" + req.query.message + \"</h1>\");\n})\n\napp.post('/test2', async (req, res) => {\n    // ruleid: raw-html-format\n    res.send(`<h1>message: ${req.query.message}</h1>`);\n})\n\napp.post('/test3', async (req, res) => {\n    // ruleid: raw-html-format\n    var html = \"<h1>\" + \"message: \" + req.query.message + \"</h1>\"\n    res.send(html);\n})\n\napp.post('/test4', async (req, res) => {\n    var html = \"<h1> message\"\n    // ruleid: raw-html-format\n    html = html.concat(req.query.message)\n    html = html.concat(\"</h1>\")\n    res.send(html);\n})\n\napp.post('/ok-test', async (req, res) => {\n    let { foobar } = req.query\n    let sanitizedParam = sanitizeUrl(foobar)\n    const url = `${baseUrl}/foo/bar?yo=123&param=${sanitizedParam}`\n    // ok: raw-html-format\n    return res.send(`<a href=\"${url}\" />`)\n})\n\napp.get('/ok', async (req, res) => {\n    // ok: raw-html-format\n    res.send(\"message: \" + req.query.message);\n})\n\napp.post('/ok2', async (req, res) => {\n    // ok: raw-html-format\n    res.send(`message: ${req.query.message}`);\n})\n\napp.post('/ok3', async (req, res) => {\n    // ok: raw-html-format\n    var data = \"message: \" + req.query.message;\n    res.send(data);\n})\n\napp.post('/ok4', async (req, res) => {\n    var data = \"message: \"\n    // ok: raw-html-format\n    data = data.concat(req.query.message)\n    res.send(data);\n})\n\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))\n", "ground_truth": "rules:\n- id: raw-html-format\n  message: >-\n    User data flows into the host portion of this manually-constructed HTML.\n    This can introduce a Cross-Site-Scripting (XSS) vulnerability if this comes from user-provided input.\n    Consider using a sanitization library such as DOMPurify to sanitize the HTML within.\n  metadata:\n    cwe:\n    - \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp:\n    - A07:2017 - Cross-Site Scripting (XSS)\n    - A03:2021 - Injection\n    references:\n    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n    category: security\n    technology:\n    - express\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n    confidence: MEDIUM\n  languages:\n  - javascript\n  - typescript\n  severity: WARNING\n  mode: taint\n  pattern-sources:\n  - label: EXPRESS\n    patterns:\n    - pattern-either:\n      - pattern-inside: function ... ($REQ, $RES) {...}\n      - pattern-inside: function ... ($REQ, $RES, $NEXT) {...}\n      - patterns:\n        - pattern-either:\n          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES) {...})\n          - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, $NEXT) {...})\n        - metavariable-regex:\n            metavariable: $METHOD\n            regex: ^(get|post|put|head|delete|options)$\n    - pattern-either:\n      - pattern: $REQ.query\n      - pattern: $REQ.body\n      - pattern: $REQ.params\n      - pattern: $REQ.cookies\n      - pattern: $REQ.headers\n  - label: EXPRESSTS\n    patterns:\n    - pattern-either:\n      - pattern-inside: |\n          ({ $REQ }: Request,$RES: Response, $NEXT: NextFunction) =>\n          {...}\n      - pattern-inside: |\n          ({ $REQ }: Request,$RES: Response) => {...}\n    - focus-metavariable: $REQ\n    - pattern-either:\n      - pattern: params\n      - pattern: query\n      - pattern: cookies\n      - pattern: headers\n      - pattern: body\n  - label: CLEAN\n    by-side-effect: true\n    patterns:\n      - pattern-either:\n          - pattern: $A($SOURCE)\n          - pattern: $SANITIZE. ... .$A($SOURCE)\n          - pattern: $A. ... .$SANITIZE($SOURCE)\n      - focus-metavariable: $SOURCE\n      - metavariable-regex:\n          metavariable: $A\n          regex: (?i)(.*valid|.*sanitiz)\n  pattern-sinks:\n  - requires: (EXPRESS and not CLEAN) or (EXPRESSTS and not CLEAN)\n    patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - pattern: '\"$HTMLSTR\" + $EXPR'\n          - pattern: '\"$HTMLSTR\".concat(...)'\n          - pattern: util.format($HTMLSTR, ...)\n        - metavariable-pattern:\n            metavariable: $HTMLSTR\n            language: generic\n            pattern: <$TAG ...\n      - patterns:\n        - pattern: |\n            `...`\n        - pattern-regex: |\n            .*<\\w+.*\n", "rule_path": "extend_dataset/976e1db6/before/raw-html-format.yaml", "test_path": "extend_dataset/976e1db6/after/raw-html-format.js", "category": "historical", "splited_testsuite_b": ["const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/test', async (req, res) => {\n    // ruleid: raw-html-format\n    res.send(\"<h1>\" + \"message: \" + req.query.message + \"</h1>\");\n})\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.post('/test2', async (req, res) => {\n    // ruleid: raw-html-format\n    res.send(`<h1>message: ${req.query.message}</h1>`);\n})\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.post('/test3', async (req, res) => {\n    // ruleid: raw-html-format\n    var html = \"<h1>\" + \"message: \" + req.query.message + \"</h1>\"\n    res.send(html);\n})\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.post('/test4', async (req, res) => {\n    var html = \"<h1> message\"\n    // ruleid: raw-html-format\n    html = html.concat(req.query.message)\n    html = html.concat(\"</h1>\")\n    res.send(html);\n})\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.get('/ok', async (req, res) => {\n    // ok: raw-html-format\n    res.send(\"message: \" + req.query.message);\n})\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.post('/ok2', async (req, res) => {\n    // ok: raw-html-format\n    res.send(`message: ${req.query.message}`);\n})\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.post('/ok3', async (req, res) => {\n    // ok: raw-html-format\n    var data = \"message: \" + req.query.message;\n    res.send(data);\n})\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.post('/ok4', async (req, res) => {\n    var data = \"message: \"\n    // ok: raw-html-format\n    data = data.concat(req.query.message)\n    res.send(data);\n})\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "const express = require('express')\nconst app = express()\nconst port = 3000\n\napp.post('/ok-test', async (req, res) => {\n    let { foobar } = req.query\n    let sanitizedParam = sanitizeUrl(foobar)\n    const url = `${baseUrl}/foo/bar?yo=123&param=${sanitizedParam}`\n    // ok: raw-html-format\n    return res.send(`<a href=\"${url}\" />`)\n})\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))"], "actual": [true, true, true, true, false, false, false, false, true], "expected": [true, true, true, true, false, false, false, false, false], "index": 73, "commit_message": "Merge pull request #2859 from returntocorp/vasilii/rules-3393-potential-false-positive-from-rule", "commit_date_str": "2023-04-24 19:16:56 -0700", "leaf_count": 27, "line_count": 54}
{"id": "missing-csrf-protection", "rule": "rules:\n- id: missing-csrf-protection\n  patterns:\n  - pattern: |\n      class $CONTROLLER < ActionController::Base\n        ...\n      end\n  - pattern-not: |\n      class $CONTROLLER < ActionController::Base\n        ...\n        protect_from_forgery :with => :exception\n      end\n  message: |\n    Detected controller which does not enable cross-site request forgery\n    protections using 'protect_from_forgery'. Add\n    'protect_from_forgery :with => :exception' to your controller class.\n  severity: ERROR\n  languages:\n  - ruby\n", "failed_tests": ["# ok:missing-csrf-protection\nclass OkController < ActionController::Base\n\n  protect_from_forgery prepend: true, with: :exception\n\n  puts \"do more stuff\"\n\nend"], "failed_type": "fp", "testsuite_a": "# ruleid:missing-csrf-protection\nclass DangerousController < ActionController::Base\n\n  puts \"do more stuff\"\n\nend\n\n# ok:missing-csrf-protection\nclass OkController < ActionController::Base\n\n  protect_from_forgery :with => :exception\n\n  puts \"do more stuff\"\n\nend\n", "testsuite_b": "# ruleid:missing-csrf-protection\nclass DangerousController < ActionController::Base\n\n  puts \"do more stuff\"\n\nend\n\n# ok:missing-csrf-protection\nclass OkController < ActionController::Base\n\n  protect_from_forgery :with => :exception\n\n  puts \"do more stuff\"\n\nend\n\n# ok:missing-csrf-protection\nclass OkController < ActionController::Base\n\n  protect_from_forgery prepend: true, with: :exception\n\n  puts \"do more stuff\"\n\nend\n", "ground_truth": "rules:\n- id: missing-csrf-protection\n  patterns:\n  - pattern: |\n      class $CONTROLLER < ActionController::Base\n        ...\n      end\n  - pattern-not: |\n      class $CONTROLLER < ActionController::Base\n        ...\n        protect_from_forgery :with => :exception\n      end\n  - pattern-not: |\n      class $CONTROLLER < ActionController::Base\n        ...\n        protect_from_forgery prepend: true, with: :exception\n      end\n  message: |\n    Detected controller which does not enable cross-site request forgery\n    protections using 'protect_from_forgery'. Add\n    'protect_from_forgery :with => :exception' to your controller class.\n  severity: ERROR\n  metadata:\n    cwe: 'CWE-352: Cross-Site Request Forgery (CSRF)'\n    owasp: 'A6: Security Misconfiguration'\n    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/docs/warning_types/cross-site_request_forgery/index.markdown\n  languages:\n  - ruby\n", "rule_path": "extend_dataset/43012713/before/missing-csrf-protection.yaml", "test_path": "extend_dataset/43012713/after/missing-csrf-protection.rb", "category": "historical", "splited_testsuite_b": ["# ruleid:missing-csrf-protection\nclass DangerousController < ActionController::Base\n\n  puts \"do more stuff\"\n\nend", "# ok:missing-csrf-protection\nclass OkController < ActionController::Base\n\n  protect_from_forgery :with => :exception\n\n  puts \"do more stuff\"\n\nend", "# ok:missing-csrf-protection\nclass OkController < ActionController::Base\n\n  protect_from_forgery prepend: true, with: :exception\n\n  puts \"do more stuff\"\n\nend"], "actual": [true, false, true], "expected": [true, false, false], "index": 74, "commit_message": "fix false positive for missing-csrf-protection (#1084)", "commit_date_str": "2021-02-02 08:33:03 -0800", "leaf_count": 2, "line_count": 4}
{"id": "stacktrace-disclosure", "rule": "rules:\n- id: stacktrace-disclosure\n  patterns:\n  - pattern: $APP.UseDeveloperExceptionPage(...);\n  - pattern-not-inside: |\n      if ($ENV.IsDevelopment(...)) {\n        ... \n        $APP.UseDeveloperExceptionPage(...); \n        ...\n      }\n  message: >-\n    Stacktrace information is displayed in a non-Development environment.\n    Accidentally disclosing sensitive stack trace information in a production\n    environment aids an attacker in reconnaissance and information gathering.\n  languages:\n  - csharp\n  severity: WARNING\n", "failed_tests": ["public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n        if (env.IsDevelopment())\n            // ok: stacktrace-disclosure\n            app.UseDeveloperExceptionPage();\n}"], "failed_type": "fp", "testsuite_a": "public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n        if (!env.IsDevelopment())\n        {\n            // ruleid: stacktrace-disclosure\n            app.UseDeveloperExceptionPage();\n        }\n    else\n        {\n            app.UseExceptionHandler(\"/Error\");\n        }\n\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n        if (env.IsDevelopment())\n        {\n            // ok: stacktrace-disclosure\n            app.UseDeveloperExceptionPage();\n        }\n    else\n        {\n            app.UseExceptionHandler(\"/Error\");\n        }\n}\n", "testsuite_b": "public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n        if (!env.IsDevelopment())\n        {\n            // ruleid: stacktrace-disclosure\n            app.UseDeveloperExceptionPage();\n        }\n    else\n        {\n            app.UseExceptionHandler(\"/Error\");\n        }\n\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n        if (env.IsDevelopment())\n        {\n            // ok: stacktrace-disclosure\n            app.UseDeveloperExceptionPage();\n        }\n    else\n        {\n            app.UseExceptionHandler(\"/Error\");\n        }\n}\n\npublic void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n        if (env.IsDevelopment())\n            // ok: stacktrace-disclosure\n            app.UseDeveloperExceptionPage();\n}\n", "ground_truth": "rules:\n- id: stacktrace-disclosure\n  patterns:\n  - pattern: $APP.UseDeveloperExceptionPage(...);\n  - pattern-not-inside: |\n      if ($ENV.IsDevelopment(...)) {\n        ...\n      }\n  message: >-\n    Stacktrace information is displayed in a non-Development environment.\n    Accidentally disclosing sensitive stack trace information in a production\n    environment aids an attacker in reconnaissance and information gathering.\n  metadata:\n    category: security\n    technology:\n    - csharp\n    owasp:\n    - A06:2017 - Security Misconfiguration\n    - A04:2021 - Insecure Design\n    cwe:\n    - 'CWE-209: Generation of Error Message Containing Sensitive Information'\n    references:\n    - https://cwe.mitre.org/data/definitions/209.html\n    - https://owasp.org/Top10/A04_2021-Insecure_Design/\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n    confidence: HIGH\n  languages:\n  - csharp\n  severity: WARNING\n", "rule_path": "extend_dataset/e91dd3fd/before/stacktrace-disclosure.yaml", "test_path": "extend_dataset/e91dd3fd/after/stacktrace-disclosure.cs", "category": "historical", "splited_testsuite_b": ["public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n        if (!env.IsDevelopment())\n        {\n            // ruleid: stacktrace-disclosure\n            app.UseDeveloperExceptionPage();\n        }\n    else\n        {\n            app.UseExceptionHandler(\"/Error\");\n        }\n\n}", "public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n        if (env.IsDevelopment())\n        {\n            // ok: stacktrace-disclosure\n            app.UseDeveloperExceptionPage();\n        }\n    else\n        {\n            app.UseExceptionHandler(\"/Error\");\n        }\n}", "public void Configure(IApplicationBuilder app, IWebHostEnvironment env)\n{\n        if (env.IsDevelopment())\n            // ok: stacktrace-disclosure\n            app.UseDeveloperExceptionPage();\n}"], "actual": [true, false, true], "expected": [true, false, false], "index": 75, "commit_message": "Update stacktrace-disclosure rule and test (#3495)", "commit_date_str": "2024-10-24 14:34:52 +0000", "leaf_count": 2, "line_count": 4}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages:\n  - php\n  severity: ERROR\n  message: User data flows into this manually-constructed SQL string. User data can\n    be safely inserted into SQL strings using prepared statements or an object-relational\n    mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL\n    injection, which could let an attacker steal or manipulate data from the database.\n    Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label)\n    VALUES (?, ?)\");`) or a safe library.\n  mode: taint\n  pattern-sanitizers:\n  - pattern-either:\n    - pattern: mysqli_real_escape_string(...)\n    - pattern: real_escape_string(...)\n    - pattern: $MYSQLI->real_escape_string(...)\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: $_GET\n      - pattern: $_POST\n      - pattern: $_COOKIE\n      - pattern: $_REQUEST\n  pattern-sinks:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          sprintf($SQLSTR, ...)\n      - metavariable-regex:\n          metavariable: $SQLSTR\n          regex: .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...{$EXPR}...\"\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...$EXPR...\"\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...\".$EXPR\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n", "failed_tests": ["<?php\n\n// True Negatives\n\nfunction ok_test6() {\n    // ok: tainted-sql-string\n    $this->delete(\"id:\".$_GET['id']);\n}"], "failed_type": "fp", "testsuite_a": "<?php\n\n// True Positives\n\nfunction test1() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$_GET['url'].\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $part = $_POST['url'];\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '$part'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$_REQUEST['url']}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    // ruleid: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $_COOKIE['foo']);\n    $info = mysql_query($query);\n    return $info;\n}\n\n// True Negatives\n\nfunction test1() {\n    // ok: tainted-sql-string\n    $query = 'SELECT * FROM table WHERE Id = 1';\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$value.\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$foobar() ? 1 : 2}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $value);\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test5() {\n    $part = $_POST['url'];\n    $part = mysqli_real_escape_string($part);\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '\" . $part . \"'\");\n    $info = mysql_query($query);\n    return $info;\n}\n", "testsuite_b": "<?php\n\n// True Positives\n\nfunction test1() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$_GET['url'].\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $part = $_POST['url'];\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '$part'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$_REQUEST['url']}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    // ruleid: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $_COOKIE['foo']);\n    $info = mysql_query($query);\n    return $info;\n}\n\n// True Negatives\n\nfunction test1() {\n    // ok: tainted-sql-string\n    $query = 'SELECT * FROM table WHERE Id = 1';\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$value.\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$foobar() ? 1 : 2}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $value);\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test5() {\n    $part = $_POST['url'];\n    $part = mysqli_real_escape_string($part);\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '\" . $part . \"'\");\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction ok_test6() {\n    // ok: tainted-sql-string\n    $this->delete(\"id:\".$_GET['id']);\n}\n\nfunction ok_test7() {\n    // ok: tainted-sql-string\n    $select = \"Foobar: = '{$_REQUEST['url']}'\";\n    $info = do_smth($select);\n    return $info;\n}\n", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages:\n  - php\n  severity: ERROR\n  message: User data flows into this manually-constructed SQL string. User data can be safely inserted\n    into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed\n    SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate\n    data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id,\n    label) VALUES (?, ?)\");`) or a safe library.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://owasp.org/www-community/attacks/SQL_Injection\n    category: security\n    technology:\n    - php\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n    confidence: MEDIUM\n  mode: taint\n  pattern-sanitizers:\n  - pattern-either:\n    - pattern: mysqli_real_escape_string(...)\n    - pattern: real_escape_string(...)\n    - pattern: $MYSQLI->real_escape_string(...)\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: $_GET\n      - pattern: $_POST\n      - pattern: $_COOKIE\n      - pattern: $_REQUEST\n  pattern-sinks:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          sprintf($SQLSTR, ...)\n      - metavariable-regex:\n          metavariable: $SQLSTR\n          regex: .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...$EXPR...\"\n      - metavariable-regex:\n          metavariable: $EXPR\n          regex: .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"$SQLSTR\".$EXPR\n      - metavariable-regex:\n          metavariable: $SQLSTR\n          regex: .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n", "rule_path": "extend_dataset/2137766e/before/tainted-sql-string.yaml", "test_path": "extend_dataset/2137766e/after/tainted-sql-string.php", "category": "historical", "splited_testsuite_b": ["<?php\n\n// True Positives\n\nfunction test1() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$_GET['url'].\"'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Positives\n\nfunction test2() {\n    $part = $_POST['url'];\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '$part'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Positives\n\nfunction test3() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$_REQUEST['url']}'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Positives\n\nfunction test4() {\n    // ruleid: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $_COOKIE['foo']);\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction test1() {\n    // ok: tainted-sql-string\n    $query = 'SELECT * FROM table WHERE Id = 1';\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction test2() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$value.\"'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction test3() {\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$foobar() ? 1 : 2}'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction test4() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $value);\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction test5() {\n    $part = $_POST['url'];\n    $part = mysqli_real_escape_string($part);\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '\" . $part . \"'\");\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction ok_test6() {\n    // ok: tainted-sql-string\n    $this->delete(\"id:\".$_GET['id']);\n}"], "actual": [true, true, true, true, false, false, false, false, false, true], "expected": [true, true, true, true, false, false, false, false, false, false], "index": 76, "commit_message": "update php tainted-sql-string rule (#3259)", "commit_date_str": "2024-01-03 15:49:34 +0700", "leaf_count": 16, "line_count": 42}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages:\n  - php\n  severity: ERROR\n  message: User data flows into this manually-constructed SQL string. User data can\n    be safely inserted into SQL strings using prepared statements or an object-relational\n    mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL\n    injection, which could let an attacker steal or manipulate data from the database.\n    Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label)\n    VALUES (?, ?)\");`) or a safe library.\n  mode: taint\n  pattern-sanitizers:\n  - pattern-either:\n    - pattern: mysqli_real_escape_string(...)\n    - pattern: real_escape_string(...)\n    - pattern: $MYSQLI->real_escape_string(...)\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: $_GET\n      - pattern: $_POST\n      - pattern: $_COOKIE\n      - pattern: $_REQUEST\n  pattern-sinks:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          sprintf($SQLSTR, ...)\n      - metavariable-regex:\n          metavariable: $SQLSTR\n          regex: .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...{$EXPR}...\"\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...$EXPR...\"\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...\".$EXPR\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n", "failed_tests": ["<?php\n\n// True Negatives\n\nfunction ok_test7() {\n    // ok: tainted-sql-string\n    $select = \"Foobar: = '{$_REQUEST['url']}'\";\n    $info = do_smth($select);\n    return $info;\n}"], "failed_type": "fp", "testsuite_a": "<?php\n\n// True Positives\n\nfunction test1() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$_GET['url'].\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $part = $_POST['url'];\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '$part'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$_REQUEST['url']}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    // ruleid: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $_COOKIE['foo']);\n    $info = mysql_query($query);\n    return $info;\n}\n\n// True Negatives\n\nfunction test1() {\n    // ok: tainted-sql-string\n    $query = 'SELECT * FROM table WHERE Id = 1';\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$value.\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$foobar() ? 1 : 2}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $value);\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test5() {\n    $part = $_POST['url'];\n    $part = mysqli_real_escape_string($part);\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '\" . $part . \"'\");\n    $info = mysql_query($query);\n    return $info;\n}\n", "testsuite_b": "<?php\n\n// True Positives\n\nfunction test1() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$_GET['url'].\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $part = $_POST['url'];\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '$part'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$_REQUEST['url']}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    // ruleid: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $_COOKIE['foo']);\n    $info = mysql_query($query);\n    return $info;\n}\n\n// True Negatives\n\nfunction test1() {\n    // ok: tainted-sql-string\n    $query = 'SELECT * FROM table WHERE Id = 1';\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$value.\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$foobar() ? 1 : 2}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $value);\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test5() {\n    $part = $_POST['url'];\n    $part = mysqli_real_escape_string($part);\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '\" . $part . \"'\");\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction ok_test6() {\n    // ok: tainted-sql-string\n    $this->delete(\"id:\".$_GET['id']);\n}\n\nfunction ok_test7() {\n    // ok: tainted-sql-string\n    $select = \"Foobar: = '{$_REQUEST['url']}'\";\n    $info = do_smth($select);\n    return $info;\n}\n", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages:\n  - php\n  severity: ERROR\n  message: User data flows into this manually-constructed SQL string. User data can be safely inserted\n    into SQL strings using prepared statements or an object-relational mapper (ORM). Manually-constructed\n    SQL strings is a possible indicator of SQL injection, which could let an attacker steal or manipulate\n    data from the database. Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id,\n    label) VALUES (?, ?)\");`) or a safe library.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://owasp.org/www-community/attacks/SQL_Injection\n    category: security\n    technology:\n    - php\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n    confidence: MEDIUM\n  mode: taint\n  pattern-sanitizers:\n  - pattern-either:\n    - pattern: mysqli_real_escape_string(...)\n    - pattern: real_escape_string(...)\n    - pattern: $MYSQLI->real_escape_string(...)\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: $_GET\n      - pattern: $_POST\n      - pattern: $_COOKIE\n      - pattern: $_REQUEST\n  pattern-sinks:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          sprintf($SQLSTR, ...)\n      - metavariable-regex:\n          metavariable: $SQLSTR\n          regex: .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...$EXPR...\"\n      - metavariable-regex:\n          metavariable: $EXPR\n          regex: .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"$SQLSTR\".$EXPR\n      - metavariable-regex:\n          metavariable: $SQLSTR\n          regex: .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n", "rule_path": "extend_dataset/2137766e/before/tainted-sql-string.yaml", "test_path": "extend_dataset/2137766e/after/tainted-sql-string.php", "category": "historical", "splited_testsuite_b": ["<?php\n\n// True Positives\n\nfunction test1() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$_GET['url'].\"'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Positives\n\nfunction test2() {\n    $part = $_POST['url'];\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '$part'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Positives\n\nfunction test3() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$_REQUEST['url']}'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Positives\n\nfunction test4() {\n    // ruleid: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $_COOKIE['foo']);\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction test1() {\n    // ok: tainted-sql-string\n    $query = 'SELECT * FROM table WHERE Id = 1';\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction test2() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$value.\"'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction test3() {\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$foobar() ? 1 : 2}'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction test4() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $value);\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction test5() {\n    $part = $_POST['url'];\n    $part = mysqli_real_escape_string($part);\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '\" . $part . \"'\");\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction ok_test7() {\n    // ok: tainted-sql-string\n    $select = \"Foobar: = '{$_REQUEST['url']}'\";\n    $info = do_smth($select);\n    return $info;\n}"], "actual": [true, true, true, true, false, false, false, false, false, true], "expected": [true, true, true, true, false, false, false, false, false, false], "index": 77, "commit_message": "update php tainted-sql-string rule (#3259)", "commit_date_str": "2024-01-03 15:49:34 +0700", "leaf_count": 16, "line_count": 42}
{"id": "missing-integrity", "rule": "rules:\n- id: missing-integrity\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A>\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n      - pattern-either:\n        - pattern: src='... :// ...'\n        - pattern: src=\"... :// ...\"\n        - pattern: href='... :// ...'\n        - pattern: href=\"... :// ...\"\n        - pattern: src='//...'\n        - pattern: src=\"//...\"\n        - pattern: href='//...'\n        - pattern: href=\"//...\"\n      - pattern-not-regex: (.*integrity=)\n      - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n</head>\n<body>\n\n</body>\n</html>"], "failed_type": "fp", "testsuite_a": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "testsuite_b": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\" />\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>\n", "ground_truth": "rules:\n- id: missing-integrity\n  metadata:\n    category: security\n    technology:\n    - html\n    cwe:\n    - 'CWE-353: Missing Support for Integrity Check'\n    owasp:\n    - A08:2021 - Software and Data Integrity Failures\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A >\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n        - pattern-either:\n          - pattern: src='... :// ...'\n          - pattern: src=\"... :// ...\"\n          - pattern: href='... :// ...'\n          - pattern: href=\"... :// ...\"\n          - pattern: src='//...'\n          - pattern: src=\"//...\"\n          - pattern: href='//...'\n          - pattern: href=\"//...\"\n        - pattern-not-regex: (?is).*integrity=\n        - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)\n  paths:\n    include:\n    - '*.html'\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]", "rule_path": "extend_dataset/715d4cc5/before/missing-integrity.yaml", "test_path": "extend_dataset/715d4cc5/after/missing-integrity.html", "category": "historical", "splited_testsuite_b": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\" />\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\"\n        integrity=\"sha512-blahblah\">\n</head>\n<body>\n\n</body>\n</html>"], "actual": [true, true, false, false, false, true, true, false, false, false, false, false, false, true], "expected": [true, true, false, false, false, true, true, false, false, false, false, false, false, false], "index": 78, "commit_message": "Merge branch 'metadata-lint' of github.com:returntocorp/semgrep-rules into metadata-lint", "commit_date_str": "2022-11-23 09:25:04 -0800", "leaf_count": 13, "line_count": 18}
{"id": "avoid-pyyaml-load", "rule": "rules:\n- id: avoid-pyyaml-load\n  languages:\n  - python\n  message: >-\n    Avoid using `load()`. `PyYAML.load` can create arbitrary Python\n    objects. A malicious actor could exploit this to run arbitrary\n    code. Use `safe_load()` instead.\n  fix-regex:\n    regex: load\n    replacement: safe_load\n    count: 1\n  severity: ERROR\n  patterns:\n  - pattern-inside: |\n      import yaml\n      ...\n  - pattern-not-inside: |\n      $YAML = ruamel.yaml.YAML(...)\n      ...\n  - pattern-not: yaml.load(..., Loader=yaml.CSafeLoader, ...)\n  - pattern-not: yaml.load(..., Loader=yaml.SafeLoader, ...)\n  - pattern-not: yaml.load_all(..., Loader=yaml.CSafeLoader, ...)\n  - pattern-not: yaml.load_all(..., Loader=yaml.SafeLoader, ...)\n  - pattern-either:\n    - pattern: yaml.load(...)\n    - pattern: yaml.load_all(...)\n", "failed_tests": ["import yaml\n\ndef this_is_ok_as_well(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.BaseLoader)"], "failed_type": "fp", "testsuite_a": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\n#ruleid:avoid-pyyaml-load\nyaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")\n", "testsuite_b": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\n#ruleid:avoid-pyyaml-load\nyaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)\n\ndef this_is_ok_as_well(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.BaseLoader)\n\ndef this_is_ok_too_two(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.BaseLoader)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")\n", "ground_truth": "rules:\n  - id: avoid-pyyaml-load\n    metadata:\n      owasp:\n        - \"A08:2017 - Insecure Deserialization\"\n        - \"A03:2021 - Injection\"\n      cwe: \"CWE-502: Deserialization of Untrusted Data\"\n      references:\n        - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation\n        - https://nvd.nist.gov/vuln/detail/CVE-2017-18342\n      category: security\n      technology:\n        - pyyaml\n    languages:\n      - python\n    message: >-\n      Avoid using `load()`. `PyYAML.load` can create arbitrary Python\n      objects. A malicious actor could exploit this to run arbitrary\n      code. Use `safe_load()` instead.\n    fix-regex:\n      regex: load\n      replacement: safe_load\n      count: 1\n    severity: ERROR\n    patterns:\n      - pattern-inside: |\n          import yaml\n          ...\n      - pattern-not-inside: |\n          $YAML = ruamel.yaml.YAML(...)\n          ...\n      - pattern-not: yaml.load(..., Loader=yaml.CSafeLoader, ...)\n      - pattern-not: yaml.load(..., Loader=yaml.SafeLoader, ...)\n      - pattern-not: yaml.load(..., Loader=yaml.BaseLoader, ...)\n      - pattern-not: yaml.load_all(..., Loader=yaml.CSafeLoader, ...)\n      - pattern-not: yaml.load_all(..., Loader=yaml.SafeLoader, ...)\n      - pattern-not: yaml.load_all(..., Loader=yaml.BaseLoader, ...)\n      - pattern-either:\n          - pattern: yaml.load(...)\n          - pattern: yaml.load_all(...)\n", "rule_path": "extend_dataset/10151151/before/avoid-pyyaml-load.yaml", "test_path": "extend_dataset/10151151/after/avoid-pyyaml-load.py", "category": "historical", "splited_testsuite_b": ["import yaml\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")", "import yaml\n\n#ruleid:avoid-pyyaml-load\nyaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\")", "import yaml\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)", "import yaml\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)", "import yaml\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)", "import yaml\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)", "import yaml\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)", "import yaml\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)", "import yaml\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")", "import yaml\n\ndef this_is_ok_as_well(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.BaseLoader)"], "actual": [true, true, true, true, false, false, false, false, false, true], "expected": [true, true, true, true, false, false, false, false, false, false], "index": 79, "commit_message": "Added BaseLoader as a safe loader for pyyaml (#2178)", "commit_date_str": "2022-06-29 16:27:14 -0700", "leaf_count": 8, "line_count": 18}
{"id": "avoid-pyyaml-load", "rule": "rules:\n- id: avoid-pyyaml-load\n  languages:\n  - python\n  message: >-\n    Avoid using `load()`. `PyYAML.load` can create arbitrary Python\n    objects. A malicious actor could exploit this to run arbitrary\n    code. Use `safe_load()` instead.\n  fix-regex:\n    regex: load\n    replacement: safe_load\n    count: 1\n  severity: ERROR\n  patterns:\n  - pattern-inside: |\n      import yaml\n      ...\n  - pattern-not-inside: |\n      $YAML = ruamel.yaml.YAML(...)\n      ...\n  - pattern-not: yaml.load(..., Loader=yaml.CSafeLoader, ...)\n  - pattern-not: yaml.load(..., Loader=yaml.SafeLoader, ...)\n  - pattern-not: yaml.load_all(..., Loader=yaml.CSafeLoader, ...)\n  - pattern-not: yaml.load_all(..., Loader=yaml.SafeLoader, ...)\n  - pattern-either:\n    - pattern: yaml.load(...)\n    - pattern: yaml.load_all(...)\n", "failed_tests": ["import yaml\n\ndef this_is_ok_too_two(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.BaseLoader)"], "failed_type": "fp", "testsuite_a": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\n#ruleid:avoid-pyyaml-load\nyaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")\n", "testsuite_b": "import yaml\n\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\n#ruleid:avoid-pyyaml-load\nyaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\")\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)\n\ndef this_is_ok_as_well(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.BaseLoader)\n\ndef this_is_ok_too_two(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.BaseLoader)\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")\n", "ground_truth": "rules:\n  - id: avoid-pyyaml-load\n    metadata:\n      owasp:\n        - \"A08:2017 - Insecure Deserialization\"\n        - \"A03:2021 - Injection\"\n      cwe: \"CWE-502: Deserialization of Untrusted Data\"\n      references:\n        - https://github.com/yaml/pyyaml/wiki/PyYAML-yaml.load(input)-Deprecation\n        - https://nvd.nist.gov/vuln/detail/CVE-2017-18342\n      category: security\n      technology:\n        - pyyaml\n    languages:\n      - python\n    message: >-\n      Avoid using `load()`. `PyYAML.load` can create arbitrary Python\n      objects. A malicious actor could exploit this to run arbitrary\n      code. Use `safe_load()` instead.\n    fix-regex:\n      regex: load\n      replacement: safe_load\n      count: 1\n    severity: ERROR\n    patterns:\n      - pattern-inside: |\n          import yaml\n          ...\n      - pattern-not-inside: |\n          $YAML = ruamel.yaml.YAML(...)\n          ...\n      - pattern-not: yaml.load(..., Loader=yaml.CSafeLoader, ...)\n      - pattern-not: yaml.load(..., Loader=yaml.SafeLoader, ...)\n      - pattern-not: yaml.load(..., Loader=yaml.BaseLoader, ...)\n      - pattern-not: yaml.load_all(..., Loader=yaml.CSafeLoader, ...)\n      - pattern-not: yaml.load_all(..., Loader=yaml.SafeLoader, ...)\n      - pattern-not: yaml.load_all(..., Loader=yaml.BaseLoader, ...)\n      - pattern-either:\n          - pattern: yaml.load(...)\n          - pattern: yaml.load_all(...)\n", "rule_path": "extend_dataset/10151151/before/avoid-pyyaml-load.yaml", "test_path": "extend_dataset/10151151/after/avoid-pyyaml-load.py", "category": "historical", "splited_testsuite_b": ["import yaml\n\n#ruleid:avoid-pyyaml-load\nyaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\")", "import yaml\n\n#ruleid:avoid-pyyaml-load\nyaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\")", "import yaml\n\ndef thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)", "import yaml\n\ndef other_thing(**kwargs):\n    #ruleid:avoid-pyyaml-load\n    yaml.load_all(\"!!python/object/new:os.system [echo EXPLOIT!]\", **kwargs)", "import yaml\n\ndef this_is_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.CSafeLoader)", "import yaml\n\ndef this_is_also_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load(stream, Loader=yaml.SafeLoader)", "import yaml\n\ndef this_is_additionally_ok(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.CSafeLoader)", "import yaml\n\ndef this_is_ok_too(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.SafeLoader)", "import yaml\n\ndef check_ruamel_yaml():\n    from ruamel.yaml import YAML\n    yaml = YAML(typ=\"rt\")\n    # ok:avoid-pyyaml-load\n    yaml.load(\"thing.yaml\")\n    # ok:avoid-pyyaml-load\n    yaml.load_all(\"thing.yaml\")", "import yaml\n\ndef this_is_ok_too_two(stream):\n    #ok:avoid-pyyaml-load\n    return yaml.load_all(stream, Loader=yaml.BaseLoader)"], "actual": [true, true, true, true, false, false, false, false, false, true], "expected": [true, true, true, true, false, false, false, false, false, false], "index": 80, "commit_message": "Added BaseLoader as a safe loader for pyyaml (#2178)", "commit_date_str": "2022-06-29 16:27:14 -0700", "leaf_count": 8, "line_count": 18}
{"id": "missing-integrity", "rule": "rules:\n- id: missing-integrity\n  patterns:\n  - pattern-either:\n    - pattern: <script ... src= \"http:// ... \" > ... </script>\n    - pattern: <script ... src= \"https:// ... \" > ... </script>\n    - pattern: <script ... src= 'http:// ... ' > ... </script>\n    - pattern: <script ... src= 'https:// ... ' > ... </script>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"http:// ... \" ...>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"https:// ... \" ...>\n    - pattern: <link ... rel='stylesheet' ... href='http:// ... ' ...>\n    - pattern: <link ... rel='stylesheet' ... href='https:// ... ' ...>\n    - pattern: <link ... href=\"http:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href=\"https:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href='http:// ... ' ... rel='stylesheet' ...>\n    - pattern: <link ... href='https:// ... ' ... rel='stylesheet' ...>\n  - pattern-not: <script ... integrity= ...> ... </script>\n  - pattern-not: <link ... integrity= ...>\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute.\n    The 'integrity' attribute allows for the browser to verify that externally hosted\n    files (for example\n    from a CDN)\n    are delivered without unexpected manipulation. Without this attribute, if an attacker\n    can modify the\n    externally\n    hosted resource, this could lead to XSS and other types of attacks. To prevent\n    this, include the base64-encoded\n    cryptographic hash of the resource (file) you\u2019re telling the browser to fetch\n    in the 'integrity' attribute\n    for\n    all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>"], "failed_type": "fn", "testsuite_a": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>\n", "testsuite_b": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "ground_truth": "rules:\n- id: missing-integrity\n  metadata:\n    category: security\n    technology:\n    - html\n    cwe:\n    - 'CWE-353: Missing Support for Integrity Check'\n    owasp:\n    - A08:2021 - Software and Data Integrity Failures\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A>\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n        - pattern-either:\n          - pattern: src='... :// ...'\n          - pattern: src=\"... :// ...\"\n          - pattern: href='... :// ...'\n          - pattern: href=\"... :// ...\"\n          - pattern: src='//...'\n          - pattern: src=\"//...\"\n          - pattern: href='//...'\n          - pattern: href=\"//...\"\n        - pattern-not-regex: (.*integrity=)\n        - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)\n  paths:\n    include:\n    - '*.html'\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]", "rule_path": "extend_dataset/986cba69/before/missing-integrity.yaml", "test_path": "extend_dataset/986cba69/after/missing-integrity.html", "category": "historical", "splited_testsuite_b": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>"], "actual": [true, false, false, false, true, true, false, false, false, false, false], "expected": [true, false, false, false, true, true, false, false, false, false, true], "index": 81, "commit_message": "Merge pull request #2497 from returntocorp/missing-integrity", "commit_date_str": "2022-10-25 17:29:44 -0700", "leaf_count": 14, "line_count": 16}
{"id": "missing-integrity", "rule": "rules:\n- id: missing-integrity\n  patterns:\n  - pattern-either:\n    - pattern: <script ... src= \"http:// ... \" > ... </script>\n    - pattern: <script ... src= \"https:// ... \" > ... </script>\n    - pattern: <script ... src= 'http:// ... ' > ... </script>\n    - pattern: <script ... src= 'https:// ... ' > ... </script>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"http:// ... \" ...>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"https:// ... \" ...>\n    - pattern: <link ... rel='stylesheet' ... href='http:// ... ' ...>\n    - pattern: <link ... rel='stylesheet' ... href='https:// ... ' ...>\n    - pattern: <link ... href=\"http:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href=\"https:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href='http:// ... ' ... rel='stylesheet' ...>\n    - pattern: <link ... href='https:// ... ' ... rel='stylesheet' ...>\n  - pattern-not: <script ... integrity= ...> ... </script>\n  - pattern-not: <link ... integrity= ...>\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute.\n    The 'integrity' attribute allows for the browser to verify that externally hosted\n    files (for example\n    from a CDN)\n    are delivered without unexpected manipulation. Without this attribute, if an attacker\n    can modify the\n    externally\n    hosted resource, this could lead to XSS and other types of attacks. To prevent\n    this, include the base64-encoded\n    cryptographic hash of the resource (file) you\u2019re telling the browser to fetch\n    in the 'integrity' attribute\n    for\n    all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n</head>\n<body>\n\n</body>\n</html>"], "failed_type": "fp", "testsuite_a": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>\n", "testsuite_b": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "ground_truth": "rules:\n- id: missing-integrity\n  metadata:\n    category: security\n    technology:\n    - html\n    cwe:\n    - 'CWE-353: Missing Support for Integrity Check'\n    owasp:\n    - A08:2021 - Software and Data Integrity Failures\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A>\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n        - pattern-either:\n          - pattern: src='... :// ...'\n          - pattern: src=\"... :// ...\"\n          - pattern: href='... :// ...'\n          - pattern: href=\"... :// ...\"\n          - pattern: src='//...'\n          - pattern: src=\"//...\"\n          - pattern: href='//...'\n          - pattern: href=\"//...\"\n        - pattern-not-regex: (.*integrity=)\n        - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)\n  paths:\n    include:\n    - '*.html'\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]", "rule_path": "extend_dataset/986cba69/before/missing-integrity.yaml", "test_path": "extend_dataset/986cba69/after/missing-integrity.html", "category": "historical", "splited_testsuite_b": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n</head>\n<body>\n\n</body>\n</html>"], "actual": [true, false, false, false, true, true, false, false, false, false, true], "expected": [true, false, false, false, true, true, false, false, false, false, false], "index": 82, "commit_message": "Merge pull request #2497 from returntocorp/missing-integrity", "commit_date_str": "2022-10-25 17:29:44 -0700", "leaf_count": 14, "line_count": 16}
{"id": "missing-integrity", "rule": "rules:\n- id: missing-integrity\n  patterns:\n  - pattern-either:\n    - pattern: <script ... src= \"http:// ... \" > ... </script>\n    - pattern: <script ... src= \"https:// ... \" > ... </script>\n    - pattern: <script ... src= 'http:// ... ' > ... </script>\n    - pattern: <script ... src= 'https:// ... ' > ... </script>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"http:// ... \" ...>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"https:// ... \" ...>\n    - pattern: <link ... rel='stylesheet' ... href='http:// ... ' ...>\n    - pattern: <link ... rel='stylesheet' ... href='https:// ... ' ...>\n    - pattern: <link ... href=\"http:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href=\"https:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href='http:// ... ' ... rel='stylesheet' ...>\n    - pattern: <link ... href='https:// ... ' ... rel='stylesheet' ...>\n  - pattern-not: <script ... integrity= ...> ... </script>\n  - pattern-not: <link ... integrity= ...>\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute.\n    The 'integrity' attribute allows for the browser to verify that externally hosted\n    files (for example\n    from a CDN)\n    are delivered without unexpected manipulation. Without this attribute, if an attacker\n    can modify the\n    externally\n    hosted resource, this could lead to XSS and other types of attacks. To prevent\n    this, include the base64-encoded\n    cryptographic hash of the resource (file) you\u2019re telling the browser to fetch\n    in the 'integrity' attribute\n    for\n    all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n</head>\n<body>\n\n</body>\n</html>"], "failed_type": "fp", "testsuite_a": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>\n", "testsuite_b": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "ground_truth": "rules:\n- id: missing-integrity\n  metadata:\n    category: security\n    technology:\n    - html\n    cwe:\n    - 'CWE-353: Missing Support for Integrity Check'\n    owasp:\n    - A08:2021 - Software and Data Integrity Failures\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A>\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n        - pattern-either:\n          - pattern: src='... :// ...'\n          - pattern: src=\"... :// ...\"\n          - pattern: href='... :// ...'\n          - pattern: href=\"... :// ...\"\n          - pattern: src='//...'\n          - pattern: src=\"//...\"\n          - pattern: href='//...'\n          - pattern: href=\"//...\"\n        - pattern-not-regex: (.*integrity=)\n        - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)\n  paths:\n    include:\n    - '*.html'\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]", "rule_path": "extend_dataset/986cba69/before/missing-integrity.yaml", "test_path": "extend_dataset/986cba69/after/missing-integrity.html", "category": "historical", "splited_testsuite_b": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n</head>\n<body>\n\n</body>\n</html>"], "actual": [true, false, false, false, true, true, false, false, false, false, true], "expected": [true, false, false, false, true, true, false, false, false, false, false], "index": 83, "commit_message": "Merge pull request #2497 from returntocorp/missing-integrity", "commit_date_str": "2022-10-25 17:29:44 -0700", "leaf_count": 14, "line_count": 16}
{"id": "missing-integrity", "rule": "rules:\n- id: missing-integrity\n  patterns:\n  - pattern-either:\n    - pattern: <script ... src= \"http:// ... \" > ... </script>\n    - pattern: <script ... src= \"https:// ... \" > ... </script>\n    - pattern: <script ... src= 'http:// ... ' > ... </script>\n    - pattern: <script ... src= 'https:// ... ' > ... </script>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"http:// ... \" ...>\n    - pattern: <link ... rel=\"stylesheet\" ... href=\"https:// ... \" ...>\n    - pattern: <link ... rel='stylesheet' ... href='http:// ... ' ...>\n    - pattern: <link ... rel='stylesheet' ... href='https:// ... ' ...>\n    - pattern: <link ... href=\"http:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href=\"https:// ... \" ... rel=\"stylesheet\" ...>\n    - pattern: <link ... href='http:// ... ' ... rel='stylesheet' ...>\n    - pattern: <link ... href='https:// ... ' ... rel='stylesheet' ...>\n  - pattern-not: <script ... integrity= ...> ... </script>\n  - pattern-not: <link ... integrity= ...>\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute.\n    The 'integrity' attribute allows for the browser to verify that externally hosted\n    files (for example\n    from a CDN)\n    are delivered without unexpected manipulation. Without this attribute, if an attacker\n    can modify the\n    externally\n    hosted resource, this could lead to XSS and other types of attacks. To prevent\n    this, include the base64-encoded\n    cryptographic hash of the resource (file) you\u2019re telling the browser to fetch\n    in the 'integrity' attribute\n    for\n    all externally hosted files.\n  severity: WARNING\n  languages: [generic]\n", "failed_tests": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>"], "failed_type": "fp", "testsuite_a": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>\n", "testsuite_b": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n    <!-- ruleid: missing-integrity -->\n    <script src='//somewhere-external.com/something-external.js'></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.googletagmanager.com/gtag/js?id=GA_TRACKING_ID\"></script>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://www.google-analytics.com/analytics.js\"></script>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "ground_truth": "rules:\n- id: missing-integrity\n  metadata:\n    category: security\n    technology:\n    - html\n    cwe:\n    - 'CWE-353: Missing Support for Integrity Check'\n    owasp:\n    - A08:2021 - Software and Data Integrity Failures\n    confidence: LOW\n    references:\n    - https://owasp.org/Top10/A08_2021-Software_and_Data_Integrity_Failures\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n  patterns:\n  - pattern-either:\n    - pattern: <script $...A >...</script>\n    - pattern: <link $...A>\n  - metavariable-pattern:\n      metavariable: $...A\n      patterns:\n        - pattern-either:\n          - pattern: src='... :// ...'\n          - pattern: src=\"... :// ...\"\n          - pattern: href='... :// ...'\n          - pattern: href=\"... :// ...\"\n          - pattern: src='//...'\n          - pattern: src=\"//...\"\n          - pattern: href='//...'\n          - pattern: href=\"//...\"\n        - pattern-not-regex: (.*integrity=)\n        - pattern-not-regex: (google-analytics.com|fonts.googleapis.com|googletagmanager.com)\n  paths:\n    include:\n    - '*.html'\n  message: >-\n    This tag is missing an 'integrity' subresource integrity attribute. The\n    'integrity' attribute allows for the browser to verify that externally\n    hosted files (for example from a CDN) are delivered without unexpected\n    manipulation. Without this attribute, if an attacker can modify the\n    externally hosted resource, this could lead to XSS and other types of\n    attacks. To prevent this, include the base64-encoded cryptographic hash of\n    the resource (file) you\u2019re telling the browser to fetch in the 'integrity'\n    attribute for all externally hosted files.\n  severity: WARNING\n  languages: [generic]", "rule_path": "extend_dataset/986cba69/before/missing-integrity.yaml", "test_path": "extend_dataset/986cba69/after/missing-integrity.html", "category": "historical", "splited_testsuite_b": ["<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <script src='https://somewhere-external.com/something-external.js'></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"https://somewhere-external.com/something-external.js\" integrity=\"sha512-blahblah\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script src=\"./something-internal.js\"></script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <script>console.log('something')</script>\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ruleid: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://somewhere-external.com/something-external.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link href=\"https://somewhere-external.com/something-external.css\" rel=\"stylesheet\" integrity=\"sha512-blahblah\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"./something-internal.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://someurl/style.css\" integrity=\"sha256-somehashdigest\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"./css/mystyle.css\">\n</head>\n<body>\n\n</body>\n</html>", "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Document</title>\n    <!-- ok: missing-integrity -->\n    <link rel=\"stylesheet\" href=\"https://fonts.googleapis.com/css?family=Tangerine\">\n</head>\n<body>\n\n</body>\n</html>"], "actual": [true, false, false, false, true, true, false, false, false, false, true], "expected": [true, false, false, false, true, true, false, false, false, false, false], "index": 84, "commit_message": "Merge pull request #2497 from returntocorp/missing-integrity", "commit_date_str": "2022-10-25 17:29:44 -0700", "leaf_count": 14, "line_count": 16}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern: $PROTOCOL://$...USERNAME:$...PASSWORD@$END\n  - metavariable-regex:\n      metavariable: $...USERNAME\n      regex: ({?)([A-Za-z])([A-Za-z0-9_-]){5,31}(}?) #username must start with alphabet letters, be between 6-32 chars of alphanumeric/underscore/dash. Can optionally be surrounded by brackets\n  - metavariable-regex:\n      metavariable: $...PASSWORD\n      regex: (?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]){6,32} #password must have at least one number, one uppercase letter, one 'special character' defined by OWASP, be between 6-32 chars\n  - metavariable-regex:\n      metavariable: $PROTOCOL\n      regex: (.*http.*)|(.*sql.*)|(.*ftp.*)|(.*smtp.*)\n  languages:\n  - generic\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ok: detected-username-and-password-in-uri\nhttps://localhost: Example+1@example.com"], "failed_type": "fp", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:passworD123*@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*D12@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:************@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:Sample%password12@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka-chakkaf:chakkA12+@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://username:f12*Password@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplEpassword12*@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user123:Password12^@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user123:passworD0+@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user123:passw0rD1&@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user123:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwdTest123+@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nhttps://docker.ouroath.com:4443/paranoids/cameo@sha256:35f1ea3d0ae9dc9b058dd8d224f1bb7e053bc58615778f9317c27b73c86dd806\n\n# ok: detected-username-and-password-in-uri\n[https://npm.vzbuilders.com/-/icon/@vzmi/navrail-utils/latest](http://npm.vzbuilders.com/-/package/@vzmi/navrail-utils)\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:passworD123*@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*D12@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:************@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:Sample%password12@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka-chakkaf:chakkA12+@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://username:f12*Password@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplEpassword12*@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user123:Password12^@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user123:passworD0+@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user123:passw0rD1&@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user123:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwdTest123+@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nhttps://docker.ouroath.com:4443/paranoids/cameo@sha256:35f1ea3d0ae9dc9b058dd8d224f1bb7e053bc58615778f9317c27b73c86dd806\n\n# ok: detected-username-and-password-in-uri\n[https://npm.vzbuilders.com/-/icon/@vzmi/navrail-utils/latest](http://npm.vzbuilders.com/-/package/@vzmi/navrail-utils)\n\n# ok: detected-username-and-password-in-uri\nhttps://localhost: Example+1@example.com\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern: $PROTOCOL://$...USERNAME:$...PASSWORD@$END\n  - metavariable-regex:\n      metavariable: $...USERNAME\n      regex: ({?)([A-Za-z])([A-Za-z0-9_-]){5,31}(}?) #username must start with alphabet letters, be between 6-32 chars of alphanumeric/underscore/dash. Can optionally be surrounded by brackets\n  - metavariable-regex:\n      metavariable: $...PASSWORD\n      regex: (?!.*[\\s])(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~]){6,32} #password must have at least one number, one uppercase letter, one 'special character' defined by OWASP, be between 6-32 chars\n  - metavariable-regex:\n      metavariable: $PROTOCOL\n      regex: (.*http.*)|(.*sql.*)|(.*ftp.*)|(.*smtp.*)\n  languages:\n  - generic\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    owasp:\n    - A05:2021 - Security Misconfiguration\n    cwe: \"CWE-798: Use of Hard-coded Credentials\"\n    references:\n    - https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/1a769234/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/1a769234/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:passworD123*@example.com", "# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*D12@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ok: detected-username-and-password-in-uri\nhttps://username:************@example.com", "# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com", "# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:Sample%password12@merchantdb/collection", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka-chakkaf:chakkA12+@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\nsamp=http://username:f12*Password@totalsuccess@megafailure/yourname", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplEpassword12*@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user123:Password12^@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user123:passworD0+@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user123:passw0rD1&@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ok: detected-username-and-password-in-uri\nf\"https://user123:{_github_pat(github_secret_name)}@github.com/\"", "# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"", "# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwdTest123+@github.com/\"", "# ok: detected-username-and-password-in-uri\nhttps://docker.ouroath.com:4443/paranoids/cameo@sha256:35f1ea3d0ae9dc9b058dd8d224f1bb7e053bc58615778f9317c27b73c86dd806", "# ok: detected-username-and-password-in-uri\n[https://npm.vzbuilders.com/-/icon/@vzmi/navrail-utils/latest](http://npm.vzbuilders.com/-/package/@vzmi/navrail-utils)", "# ok: detected-username-and-password-in-uri\nhttps://localhost: Example+1@example.com"], "actual": [true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, true], "expected": [true, true, false, false, false, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false, false, false], "index": 85, "commit_message": "Do not include whitespace in passwords", "commit_date_str": "2022-07-13 09:48:33 -0700", "leaf_count": 7, "line_count": 11}
{"id": "alias-path-traversal", "rule": "rules:\n- id: alias-path-traversal\n  patterns:\n  - pattern: |\n      location ... {\n        ...\n        alias ...;\n        ...\n      }\n  - pattern-not-inside: location /.../ { ... ... }\n  fix-regex:\n    regex: location\\s+([A-Za-z0-9/-_\\.]+)\n    replacement: location \\1/\n  languages:\n  - generic\n  severity: WARNING\n  message: >-\n    The alias in this location block is subject to a path traversal\n    because the location path does not end in a path separator (e.g., '/').\n    To fix, add a path separator to the end of the path.\n", "failed_tests": ["server {\n  listen 80;\n\n  # ok: alias-path-traversal\n  location /i {\n    alias /data/w3/images;\n  }\n}"], "failed_type": "fp", "testsuite_a": "server {\n  listen 80;\n\n  # ruleid: alias-path-traversal\n  location /i {\n    alias /data/w3/images/;\n  }\n\n  # ok: alias-path-traversal\n  location /i/ {\n    alias /data/w3/images/;\n  }\n}\n", "testsuite_b": "server {\n  listen 80;\n\n  # ruleid: alias-path-traversal\n  location /i {\n    alias /data/w3/images/;\n  }\n\n  # ok: alias-path-traversal\n  location /i/ {\n    alias /data/w3/images/;\n  }\n\n  # ok: alias-path-traversal\n  location /i {\n    alias /data/w3/images;\n  }\n}\n", "ground_truth": "rules:\n- id: alias-path-traversal\n  patterns:\n  - pattern: |\n      location ... {\n        ...\n        alias .../;\n        ...\n      }\n  - pattern-not-inside: location /.../ { ... ... }\n  paths:\n    include:\n    - '*.conf'\n    - '*.vhost'\n    - sites-available/*\n    - sites-enabled/*\n  fix-regex:\n    regex: location\\s+([A-Za-z0-9/-_\\.]+)\n    replacement: location \\1/\n  languages:\n  - generic\n  severity: WARNING\n  message: >-\n    The alias in this location block is subject to a path traversal\n    because the location path does not end in a path separator (e.g., '/').\n    To fix, add a path separator to the end of the path.\n  metadata:\n    references:\n    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/aliastraversal.md\n    category: security\n    technology:\n    - nginx\n", "rule_path": "extend_dataset/2cf90489/before/alias-path-traversal.yaml", "test_path": "extend_dataset/2cf90489/after/alias-path-traversal.conf", "category": "historical", "splited_testsuite_b": ["server {\n  listen 80;\n\n  # ruleid: alias-path-traversal\n  location /i {\n    alias /data/w3/images/;\n  }\n}", "server {\n  listen 80;\n\n  # ok: alias-path-traversal\n  location /i/ {\n    alias /data/w3/images/;\n  }\n}", "server {\n  listen 80;\n\n  # ok: alias-path-traversal\n  location /i {\n    alias /data/w3/images;\n  }\n}"], "actual": [true, false, true], "expected": [true, false, false], "index": 86, "commit_message": "Fix false positive in nginx alias-path-traversal rule (#1477)", "commit_date_str": "2021-09-21 18:45:30 -0500", "leaf_count": 2, "line_count": 3}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages:\n  - ruby\n  severity: ERROR\n  message: Detected user input used to manually construct a SQL string. This is usually\n    bad practice because manual construction could accidentally result in a SQL injection.\n    An attacker could use a SQL injection to steal or modify contents of the database.\n    Instead, use a parameterized query which is available by default in most database\n    engines. Alternatively, consider using an object-relational mapper (ORM) such\n    as ActiveRecord which will protect your queries.\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: params\n      - pattern: request\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: |\n            \"...#{$EXPR}...\"\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $EXPR\n        - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\\b|\\w+\\s*!?[<>=].*\n      - patterns:\n        - pattern-either:\n          - pattern: Kernel::sprintf(\"$SQLSTR\", $EXPR)\n          - pattern: |\n              \"$SQLSTR\" + $EXPR\n          - pattern: |\n              \"$SQLSTR\" % $EXPR\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $EXPR\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "failed_tests": ["class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\nend"], "failed_type": "fp", "testsuite_a": "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\n\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\n\n\nend\n", "testsuite_b": "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\n\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\n\n\nend\n", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages:\n    - ruby\n  severity: ERROR\n  message: Detected user input used to manually construct a SQL string. This is\n    usually bad practice because manual construction could accidentally result\n    in a SQL injection. An attacker could use a SQL injection to steal or\n    modify contents of the database. Instead, use a parameterized query which\n    is available by default in most database engines. Alternatively, consider\n    using an object-relational mapper (ORM) such as ActiveRecord which will\n    protect your queries.\n  metadata:\n    cwe: >\n      CWE-89: Improper Neutralization of Special Elements used in an SQL\n      Command ('SQL Injection')\n    owasp:\n      - A01:2017 - Injection\n      - A03:2021 - Injection\n    category: security\n    technology:\n      - rails\n    references:\n      - https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n  mode: taint\n  pattern-sources:\n    - patterns:\n        - pattern-either:\n            - pattern: params\n            - pattern: request\n  pattern-sinks:\n    - patterns:\n        - pattern-either:\n            - patterns:\n                - pattern-either:\n                    - pattern: |\n                        $RECORD.where($X,...)\n                    - pattern: |\n                        $RECORD.find(..., :conditions => $X,...)\n                - focus-metavariable: $X\n            - patterns:\n                - pattern: |\n                    \"$SQLVERB#{$EXPR}...\"\n                - pattern-not-inside: |\n                    $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n                - focus-metavariable: $SQLVERB\n                - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n            - patterns:\n                - pattern-either:\n                    - pattern: Kernel::sprintf(\"$SQLSTR\", $EXPR)\n                    - pattern: |\n                        \"$SQLSTR\" + $EXPR\n                    - pattern: |\n                        \"$SQLSTR\" % $EXPR\n                - pattern-not-inside: |\n                    $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n                - focus-metavariable: $EXPR\n                - metavariable-regex:\n                    metavariable: $SQLSTR\n                    regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "rule_path": "extend_dataset/53193b45/before/tainted-sql-string.yaml", "test_path": "extend_dataset/53193b45/after/tainted-sql-string.rb", "category": "historical", "splited_testsuite_b": ["class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\nend"], "actual": [true, true, true, true, true, false, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false, false], "index": 87, "commit_message": "Merge pull request #2391 from returntocorp/kb/ruby-sqli-regex-fix", "commit_date_str": "2022-09-14 19:22:32 -0700", "leaf_count": 13, "line_count": 33}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: \n      ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ok: detected-username-and-password-in-uri\nhttps://username:***@example.com"], "failed_type": "fp", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:***@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):(?![\\x{2022}*]+?@)([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/84ae4c3f/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/84ae4c3f/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com", "# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"", "# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"", "# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"", "# ok: detected-username-and-password-in-uri\nhttps://username:***@example.com"], "actual": [true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true], "expected": [true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false], "index": 88, "commit_message": "Merge pull request #1471 from returntocorp/semgrep-live-Oelp", "commit_date_str": "2022-03-29 15:15:24 -0700", "leaf_count": 1, "line_count": 2}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: \n      ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com"], "failed_type": "fp", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:***@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):(?![\\x{2022}*]+?@)([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/84ae4c3f/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/84ae4c3f/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com", "# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"", "# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"", "# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"", "# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com"], "actual": [true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true], "expected": [true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false], "index": 89, "commit_message": "Merge pull request #1471 from returntocorp/semgrep-live-Oelp", "commit_date_str": "2022-03-29 15:15:24 -0700", "leaf_count": 1, "line_count": 2}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: \n      ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com"], "failed_type": "fp", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ok: detected-username-and-password-in-uri\nhttps://username:***@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:*********@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):(?![\\x{2022}*]+?@)([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/84ae4c3f/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/84ae4c3f/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com", "# ruleid: detected-username-and-password-in-uri\nhttps://username:**sswor*@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"", "# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"", "# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"", "# ok: detected-username-and-password-in-uri\nhttps://username:\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022@example.com"], "actual": [true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, true], "expected": [true, true, false, false, false, true, true, false, false, true, true, true, true, true, false, false, true, false], "index": 90, "commit_message": "Merge pull request #1471 from returntocorp/semgrep-live-Oelp", "commit_date_str": "2022-03-29 15:15:24 -0700", "leaf_count": 1, "line_count": 2}
{"id": "use-timeout", "rule": "rules:\n- id: use-timeout\n  patterns:\n  - pattern-not: requests.$W(..., timeout=$N, ...)\n  - pattern-not: requests.$W(..., **$KWARGS)\n  - pattern-either:\n    - pattern: requests.request(...)\n    - pattern: requests.get(...)\n    - pattern: requests.post(...)\n    - pattern: requests.put(...)\n    - pattern: requests.delete(...)\n    - pattern: requests.head(...)\n    - pattern: requests.patch(...)\n  fix-regex:\n    regex: (.*)\\)\n    replacement: \\1, timeout=30)\n  message: |\n    By default, 'requests' calls wait until the connection is closed.\n    This means a 'requests' call without a timeout will hang the program\n    if a response is never received. Consider setting a timeout for all\n    'requests'.\n  languages: [python]\n  severity: WARNING\n", "failed_tests": ["import requests\n\ndef test3():\n    # ruleid: use-timeout\n    session = requests.Session()\n    r = session.get(url)"], "failed_type": "fn", "testsuite_a": "import requests\n\nurl = \"www.github.com\"\n\n# ruleid: use-timeout\nr = requests.get(url)\n\n# ruleid: use-timeout\nr = requests.post(url)\n\n# ok: use-timeout\nr = requests.get(url, timeout=50)\n\ndef from_import_test1(url):\n    from requests import get, post\n    # ok: use-timeout\n    r = get(url, timeout=3)\n\n    # ruleid: use-timeout\n    r = post(url)\n\ndef test2():\n    \"\"\"Perform a requests.get and default headers set\"\"\"\n    headers = {**_get_default_headers(), **headers}\n    # ok: use-timeout\n    r = requests.get(\n        url, headers=headers, params=params, **{\"timeout\": TIMEOUT, **kwargs}\n    )\n    return r\n", "testsuite_b": "import requests\n\nurl = \"www.github.com\"\n\n# ruleid: use-timeout\nr = requests.get(url)\n\n# ruleid: use-timeout\nr = requests.post(url)\n\n# ok: use-timeout\nr = requests.get(url, timeout=50)\n\ndef from_import_test1(url):\n    from requests import get, post\n    # ok: use-timeout\n    r = get(url, timeout=3)\n\n    # ruleid: use-timeout\n    r = post(url)\n\ndef test2():\n    \"\"\"Perform a requests.get and default headers set\"\"\"\n    headers = {**_get_default_headers(), **headers}\n    # ok: use-timeout\n    r = requests.get(\n        url, headers=headers, params=params, **{\"timeout\": TIMEOUT, **kwargs}\n    )\n    return r\n\ndef test3():\n    # ruleid: use-timeout\n    session = requests.Session()\n    r = session.get(url)\n\n    # ok: use-timeout\n    r = session.get(url, timeout=3)\n", "ground_truth": "rules:\n- id: use-timeout\n  patterns:\n  - pattern-not: requests.$W(..., timeout=$N, ...)\n  - pattern-not: requests.$W(..., **$KWARGS)\n  - pattern-not: |\n      $SESSION = requests.Session(...)\n      ...\n      $SESSION.$W(..., timeout=$N, ...)\n  - pattern-not: |\n      $SESSION = requests.Session(...)\n      ...\n      $SESSION.$W(..., **$KWARGS)\n  - pattern-either:\n    - pattern: requests.request(...)\n    - pattern: requests.get(...)\n    - pattern: requests.post(...)\n    - pattern: requests.put(...)\n    - pattern: requests.delete(...)\n    - pattern: requests.head(...)\n    - pattern: requests.patch(...)\n    - pattern: |\n        $SESSION = requests.Session(...)\n        ...\n        $SESSION.get(...)\n    - pattern: |\n        $SESSION = requests.Session(...)\n        ...\n        $SESSION.post(...)\n    - pattern: |\n        $SESSION = requests.Session(...)\n        ...\n        $SESSION.put(...)\n    - pattern: |\n        $SESSION = requests.Session(...)\n        ...\n        $SESSION.delete(...)\n    - pattern: |\n        $SESSION = requests.Session(...)\n        ...\n        $SESSION.head(...)\n    - pattern: |\n        $SESSION = requests.Session(...)\n        ...\n        $SESSION.patch(...)\n  fix-regex:\n    regex: (.*)\\)\n    replacement: \\1, timeout=30)\n  message: |\n    By default, 'requests' calls wait until the connection is closed.\n    This means a 'requests' call without a timeout will hang the program\n    if a response is never received. Consider setting a timeout for all\n    'requests'.\n  languages: [python]\n  severity: WARNING\n  metadata:\n    category: best-practice\n    technology:\n    - requests\n", "rule_path": "extend_dataset/ba05bc30/before/use-timeout.yaml", "test_path": "extend_dataset/ba05bc30/after/use-timeout.py", "category": "historical", "splited_testsuite_b": ["import requests\n\nurl = \"www.github.com\"\n\n# ruleid: use-timeout\nr = requests.get(url)", "import requests\n\nurl = \"www.github.com\"\n\n# ruleid: use-timeout\nr = requests.post(url)", "import requests\n\nurl = \"www.github.com\"\n\n# ok: use-timeout\nr = requests.get(url, timeout=50)", "import requests\n\ndef from_import_test1(url):\n    from requests import get, post\n    # ok: use-timeout\n    r = get(url, timeout=3)", "import requests\n\ndef from_import_test1(url):\n    from requests import get, post\n    # ruleid: use-timeout\n    r = post(url)", "import requests\n\ndef test2():\n    \"\"\"Perform a requests.get and default headers set\"\"\"\n    headers = {**_get_default_headers(), **headers}\n    # ok: use-timeout\n    r = requests.get(\n        url, headers=headers, params=params, **{\"timeout\": TIMEOUT, **kwargs}\n    )\n    return r", "import requests\n\ndef test3():\n    # ok: use-timeout\n    r = session.get(url, timeout=3)", "import requests\n\ndef test3():\n    # ruleid: use-timeout\n    session = requests.Session()\n    r = session.get(url)"], "actual": [true, true, false, false, true, false, false, false], "expected": [true, true, false, false, true, false, false, true], "index": 91, "commit_message": "Update use-timeout rule (#1338)", "commit_date_str": "2021-06-22 21:13:41 -0500", "leaf_count": 9, "line_count": 11}
{"id": "django-no-csrf-token", "rule": "rules:\n- id: django-no-csrf-token\n  patterns:\n  - pattern: \"<form...>...</form>\"\n  - pattern-not-inside: \"<form...>...{% csrf_token %}...</form>\"\n  message: Manually-created forms in django templates should specify a csrf_token\n    to prevent CSRF attacks\n  languages: [generic]\n  severity: WARNING\n", "failed_tests": ["<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>"], "failed_type": "fp", "testsuite_a": "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "testsuite_b": "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='POST'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form method=\"GET\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n", "ground_truth": "rules:\n  - id: django-no-csrf-token\n    patterns:\n      - pattern: \"<form...>...</form>\"\n      - pattern-either:\n          - pattern: |\n              <form ... method=\"$METHOD\" ...>...</form>\n          - pattern: |\n              <form ... method='$METHOD' ...>...</form>\n          - pattern: |\n              <form ... method=$METHOD ...>...</form>\n      - metavariable-regex:\n          metavariable: $METHOD\n          regex: (?i)post\n      - pattern-not-inside: \"<form...>...{% csrf_token %}...</form>\"\n    message: Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks\n    languages: [generic]\n    severity: WARNING\n    metadata:\n      category: security\n      cwe: \"CWE-352: Cross-Site Request Forgery (CSRF)\"\n      references:\n      - https://docs.djangoproject.com/en/4.2/howto/csrf/\n      confidence: MEDIUM\n      likelihood: MEDIUM\n      impact: MEDIUM\n      subcategory:\n        - guardrail\n      technology:\n        - django\n    paths:\n      include:\n        - \"*.html\"", "rule_path": "extend_dataset/042f310d/before/django-no-csrf-token.yaml", "test_path": "extend_dataset/042f310d/after/django-no-csrf-token.html", "category": "historical", "splited_testsuite_b": ["<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='POST'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>"], "actual": [true, true, false, true], "expected": [true, true, false, false], "index": 92, "commit_message": "update django-no-csrf-token rule (#3231)", "commit_date_str": "2023-11-30 08:57:49 +0100", "leaf_count": 2, "line_count": 3}
{"id": "django-no-csrf-token", "rule": "rules:\n- id: django-no-csrf-token\n  patterns:\n  - pattern: \"<form...>...</form>\"\n  - pattern-not-inside: \"<form...>...{% csrf_token %}...</form>\"\n  message: Manually-created forms in django templates should specify a csrf_token\n    to prevent CSRF attacks\n  languages: [generic]\n  severity: WARNING\n", "failed_tests": ["<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form method=\"GET\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>"], "failed_type": "fp", "testsuite_a": "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "testsuite_b": "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='POST'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form method=\"GET\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n", "ground_truth": "rules:\n  - id: django-no-csrf-token\n    patterns:\n      - pattern: \"<form...>...</form>\"\n      - pattern-either:\n          - pattern: |\n              <form ... method=\"$METHOD\" ...>...</form>\n          - pattern: |\n              <form ... method='$METHOD' ...>...</form>\n          - pattern: |\n              <form ... method=$METHOD ...>...</form>\n      - metavariable-regex:\n          metavariable: $METHOD\n          regex: (?i)post\n      - pattern-not-inside: \"<form...>...{% csrf_token %}...</form>\"\n    message: Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks\n    languages: [generic]\n    severity: WARNING\n    metadata:\n      category: security\n      cwe: \"CWE-352: Cross-Site Request Forgery (CSRF)\"\n      references:\n      - https://docs.djangoproject.com/en/4.2/howto/csrf/\n      confidence: MEDIUM\n      likelihood: MEDIUM\n      impact: MEDIUM\n      subcategory:\n        - guardrail\n      technology:\n        - django\n    paths:\n      include:\n        - \"*.html\"", "rule_path": "extend_dataset/042f310d/before/django-no-csrf-token.yaml", "test_path": "extend_dataset/042f310d/after/django-no-csrf-token.html", "category": "historical", "splited_testsuite_b": ["<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='POST'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form method=\"GET\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>"], "actual": [true, true, false, true], "expected": [true, true, false, false], "index": 93, "commit_message": "update django-no-csrf-token rule (#3231)", "commit_date_str": "2023-11-30 08:57:49 +0100", "leaf_count": 2, "line_count": 3}
{"id": "file-inclusion", "rule": "rules:\n- id: file-inclusion\n  patterns:\n  - pattern: $FUNC(...);\n  - pattern-not: $FUNC(\"...\");\n  - metavariable-regex:\n      metavariable: $FUNC\n      regex: include|include_once|require|require_once\n  message: |\n    Non-constant file inclusion. This can lead to LFI or RFI if user\n    input reaches this statement.\n  languages: [php]\n  severity: ERROR\n", "failed_tests": ["<?php\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');"], "failed_type": "fp", "testsuite_a": "<?php\n\n// ruleid: file-inclusion\ninclude($user_input);\n\n// ok: file-inclusion\ninclude('constant.php');\n\n// ruleid: file-inclusion\ninclude_once($user_input);\n\n// ok: file-inclusion\ninclude_once('constant.php');\n\n// ruleid: file-inclusion\nrequire($user_input);\n\n// ok: file-inclusion\nrequire('constant.php');\n\n// ruleid: file-inclusion\nrequire_once($user_input);\n\n// ok: file-inclusion\nrequire_once('constant.php');\n", "testsuite_b": "<?php\n\n// ruleid: file-inclusion\ninclude($user_input);\n\n// ok: file-inclusion\ninclude('constant.php');\n\n// ruleid: file-inclusion\ninclude_once($user_input);\n\n// ok: file-inclusion\ninclude_once('constant.php');\n\n// ruleid: file-inclusion\nrequire($user_input);\n\n// ok: file-inclusion\nrequire('constant.php');\n\n// ruleid: file-inclusion\nrequire_once($user_input);\n\n// ok: file-inclusion\nrequire_once('constant.php');\n\n// ruleid: file-inclusion\ninclude(__DIR__ . $user_input);\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');\n", "ground_truth": "rules:\n- id: file-inclusion\n  patterns:\n  - pattern: $FUNC(...);\n  - pattern-not: $FUNC(\"...\");\n  - pattern-not: $FUNC(__DIR__ . \"...\");\n  - metavariable-regex:\n      metavariable: $FUNC\n      regex: include|include_once|require|require_once\n  message: |\n    Non-constant file inclusion. This can lead to LFI or RFI if user\n    input reaches this statement.\n  metadata:\n    references:\n    - https://www.php.net/manual/en/function.include.php\n    - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php\n    - https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion\n  languages: [php]\n  severity: ERROR\n", "rule_path": "extend_dataset/bf7932f5/before/file-inclusion.yaml", "test_path": "extend_dataset/bf7932f5/after/file-inclusion.php", "category": "historical", "splited_testsuite_b": ["<?php\n\n// ruleid: file-inclusion\ninclude($user_input);", "<?php\n\n// ok: file-inclusion\ninclude('constant.php');", "<?php\n\n// ruleid: file-inclusion\ninclude_once($user_input);", "<?php\n\n// ok: file-inclusion\ninclude_once('constant.php');", "<?php\n\n// ruleid: file-inclusion\nrequire($user_input);", "<?php\n\n// ok: file-inclusion\nrequire('constant.php');", "<?php\n\n// ruleid: file-inclusion\nrequire_once($user_input);", "<?php\n\n// ok: file-inclusion\nrequire_once('constant.php');", "<?php\n\n// ruleid: file-inclusion\ninclude(__DIR__ . $user_input);", "<?php\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');"], "actual": [true, false, true, false, true, false, true, false, true, true], "expected": [true, false, true, false, true, false, true, false, true, false], "index": 94, "commit_message": "Update php file inclusion rule set (#1251)", "commit_date_str": "2021-04-21 11:08:01 -0600", "leaf_count": 4, "line_count": 6}
{"id": "check-cookie-store-session-security-attributes", "rule": "rules:\n- id: check-cookie-store-session-security-attributes\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          :$KEY => false\n      - pattern-inside: |\n          ActionController::Base.session = {...}\n    - pattern: |\n        $MODULE::Application.config.session_store :cookie_store, ..., :$KEY => false, ...\n    - pattern: |\n        $CLASS.application.config.session_store :cookie_store, ..., $KEY: false\n  - metavariable-regex:\n      metavariable: $KEY\n      regex: ^(session_)?(http_?only|secure)$\n  message: Found a Rails `cookie_store` session configuration setting the `$KEY` attribute\n    to `false`. If using a cookie-based session store, the HttpOnly and Secure flags\n    should be set.\n  languages:\n  - ruby\n  severity: WARNING\n", "failed_tests": ["#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, key: '_rails3_session', httponly: false, domain: :all"], "failed_type": "fn", "testsuite_a": "#rails2\nActionController::Base.session = {\n  :key         => '_rails2_session',\n  :secret      => 'secret!',\n  # ruleid: check-cookie-store-session-security-attributes\n  :session_http_only   => false\n}\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :httponly => false, :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :httponly => false, :key => '_rails3_session'\n\n# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, httponly: false\n\n# ok: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, some_harmless_key: false\n\n# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp::Application.config.session_store :cookie_store, httponly: false\n\n# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp.application.config.session_store :cookie_store, httponly: false\n", "testsuite_b": "#rails2\nActionController::Base.session = {\n  :key         => '_rails2_session',\n  :secret      => 'secret!',\n  # ruleid: check-cookie-store-session-security-attributes\n  :session_http_only   => false\n}\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :httponly => false, :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :httponly => false, :key => '_rails3_session'\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, key: '_rails3_session', httponly: false, domain: :all\n\n# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, httponly: false\n\n# ok: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, some_harmless_key: false\n\n# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp::Application.config.session_store :cookie_store, httponly: false\n\n# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp.application.config.session_store :cookie_store, httponly: false\n", "ground_truth": "rules:\n- id: check-cookie-store-session-security-attributes\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          :$KEY => false\n      - pattern-inside: |\n          ActionController::Base.session = {...}\n    - pattern: |\n        $MODULE::Application.config.session_store :cookie_store, ..., :$KEY => false, ...\n    - pattern: |\n        $CLASS.application.config.session_store :cookie_store, ..., $KEY: false, ...\n  - metavariable-regex:\n      metavariable: $KEY\n      regex: ^(session_)?(http_?only|secure)$\n  message: Found a Rails `cookie_store` session configuration setting the `$KEY` attribute to `false`.\n    If using a cookie-based session store, the HttpOnly and Secure flags should be set.\n  languages:\n  - ruby\n  severity: WARNING\n  metadata:\n    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_session_settings.rb\n    category: security\n    cwe:\n    - \"CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag\"\n    owasp:\n    - A05:2021 - Security Misconfiguration\n    technology:\n    - ruby\n    - rails\n    references:\n    - https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n    confidence: LOW\n", "rule_path": "extend_dataset/e91cf3c2/before/check-cookie-store-session-security-attributes.yaml", "test_path": "extend_dataset/e91cf3c2/after/check-cookie-store-session-security-attributes.rb", "category": "historical", "splited_testsuite_b": ["#rails2\nActionController::Base.session = {\n  :key         => '_rails2_session',\n  :secret      => 'secret!',\n  # ruleid: check-cookie-store-session-security-attributes\n  :session_http_only   => false\n}", "#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :httponly => false, :secure => false", "#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :secure => false", "#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :httponly => false, :key => '_rails3_session'", "# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, httponly: false", "# ok: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, some_harmless_key: false", "# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp::Application.config.session_store :cookie_store, httponly: false", "# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp.application.config.session_store :cookie_store, httponly: false", "#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, key: '_rails3_session', httponly: false, domain: :all"], "actual": [true, true, true, true, true, false, true, true, false], "expected": [true, true, true, true, true, false, true, true, true], "index": 95, "commit_message": "Match key if it's not the final argument", "commit_date_str": "2023-06-13 15:35:17 -0400", "leaf_count": 6, "line_count": 20}
{"id": "raw-html-format", "rule": "rules:\n- id: raw-html-format\n  languages:\n  - python\n  severity: WARNING\n  message: >-\n    Detected user input flowing into a manually constructed HTML string. You may be\n    accidentally bypassing secure methods\n    of rendering HTML by manually constructing HTML and this could create a cross-site\n    scripting vulnerability, which could\n    let attackers steal sensitive user data. To be sure this is safe, check that the\n    HTML is rendered safely. Otherwise, use\n    templates (`django.shortcuts.render`) which will safely render HTML instead.\n  mode: taint\n  pattern-sanitizers:\n  - pattern: django.utils.html.escape(...)\n  pattern-sources:\n  - patterns:\n    - pattern: request.$ANYTHING\n    - pattern-not: request.build_absolute_uri\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - pattern: '\"$HTMLSTR\" % ...'\n          - pattern: '\"$HTMLSTR\".format(...)'\n          - pattern: f\"$HTMLSTR{...}...\"\n      - patterns:\n        - pattern-inside: |\n            $HTML = \"$HTMLSTR\"\n            ...\n        - pattern-either:\n          - pattern: $HTML % ...\n          - pattern: $HTML.format(...)\n    - metavariable-pattern:\n        metavariable: $HTMLSTR\n        language: generic\n        pattern: <$TAG ...\n", "failed_tests": ["from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def getB(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = '<a href=\"http://external/abc/' + text + '\">Check link href</a>'\n\n        return render(request, self.template_name, context)"], "failed_type": "fn", "testsuite_a": "from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def get(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        link = '<a href=\"http://external/abc/%s\">Check link href</a>'\n\n        # ruleid: raw-html-format\n        context['html'] = link % text\n\n        return render(request, self.template_name, context)\n\n    def get2(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        link = '<a href=\"http://external/abc/{}\">Check link href</a>'\n\n        # ruleid: raw-html-format\n        context['html'] = link.format(text)\n\n        return render(request, self.template_name, context)\n\n    def get3(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = '<a href=\"http://external/abc/%s\">Check link href</a>' % text\n\n        return render(request, self.template_name, context)\n\n    def get4(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = '<a href=\"http://external/abc/%s\">Check link href</a>'.format(text)\n\n        return render(request, self.template_name, context)\n\n    def get5(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = f'<a href=\"http://external/abc/{text}\">Check link href</a>'\n\n        return render(request, self.template_name, context)\n\n    def ok(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        link = 'something other than html, %s!'\n\n        # ok: raw-html-format\n        context['html'] = link % text\n\n        return render(request, self.template_name, context)\n\n    def ok2(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ok: raw-html-format\n        context['html'] = 'this is a random string. {}'.format(text)\n\n        return render(request, self.template_name, context)\n\n    def ok3(self, request):\n        # ok: raw-html-format\n        msg += ' (<a href=\"{}\" target=\"_blank\" rel=\"noopener\">{}</a>)'.format(\n            request.build_absolute_uri(reverse('source')),\n            gettext('source code')\n        )\n\n    def ok4(self, request):\n        form = CreateQuestionForm(request.POST)\n        if '_popup' in request.GET and not error:\n            # ok: raw-html-format\n            resp = '<script type=\"text/javascript\">opener.dismissAddAnotherPopupDojo(window, \"%s\", \"%s\");</script>' \\\n                % (escape(form.cleaned_data['something']), escape(form.cleaned_data['text']))\n            resp += '<script type=\"text/javascript\">window.close();</script>'\n            return HttpResponse(resp)\n", "testsuite_b": "from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def get(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        link = '<a href=\"http://external/abc/%s\">Check link href</a>'\n\n        # ruleid: raw-html-format\n        context['html'] = link % text\n\n        return render(request, self.template_name, context)\n\n    def getB(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = '<a href=\"http://external/abc/' + text + '\">Check link href</a>'\n\n        return render(request, self.template_name, context)\n\n    def get2(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        link = '<a href=\"http://external/abc/{}\">Check link href</a>'\n\n        # ruleid: raw-html-format\n        context['html'] = link.format(text)\n\n        return render(request, self.template_name, context)\n\n    def get3(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = '<a href=\"http://external/abc/%s\">Check link href</a>' % text\n\n        return render(request, self.template_name, context)\n\n    def get4(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = '<a href=\"http://external/abc/%s\">Check link href</a>'.format(text)\n\n        return render(request, self.template_name, context)\n\n    def get5(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = f'<a href=\"http://external/abc/{text}\">Check link href</a>'\n\n        return render(request, self.template_name, context)\n\n    def ok(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        link = 'something other than html, %s!'\n\n        # ok: raw-html-format\n        context['html'] = link % text\n\n        return render(request, self.template_name, context)\n\n    def ok2(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ok: raw-html-format\n        context['html'] = 'this is a random string. {}'.format(text)\n\n        return render(request, self.template_name, context)\n\n    def ok3(self, request):\n        # ok: raw-html-format\n        msg += ' (<a href=\"{}\" target=\"_blank\" rel=\"noopener\">{}</a>)'.format(\n            request.build_absolute_uri(reverse('source')),\n            gettext('source code')\n        )\n\n    def ok4(self, request):\n        form = CreateQuestionForm(request.POST)\n        if '_popup' in request.GET and not error:\n            # ok: raw-html-format\n            resp = '<script type=\"text/javascript\">opener.dismissAddAnotherPopupDojo(window, \"%s\", \"%s\");</script>' \\\n                % (escape(form.cleaned_data['something']), escape(form.cleaned_data['text']))\n            resp += '<script type=\"text/javascript\">window.close();</script>'\n            return HttpResponse(resp)\n", "ground_truth": "rules:\n- id: raw-html-format\n  languages:\n  - python\n  severity: WARNING\n  message: Detected user input flowing into a manually constructed HTML string. You may be accidentally bypassing secure methods\n    of rendering HTML by manually constructing HTML and this could create a cross-site scripting vulnerability, which could\n    let attackers steal sensitive user data. To be sure this is safe, check that the HTML is rendered safely. Otherwise, use\n    templates (`django.shortcuts.render`) which will safely render HTML instead.\n  metadata:\n    cwe: \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp:\n    - A07:2017\n    - A03:2021\n    category: security\n    technology:\n    - django\n    references:\n    - https://docs.djangoproject.com/en/3.2/topics/http/shortcuts/#render\n    - https://docs.djangoproject.com/en/3.2/topics/security/#cross-site-scripting-xss-protection\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n  mode: taint\n  pattern-sanitizers:\n  - pattern: django.utils.html.escape(...)\n  pattern-sources:\n  - patterns:\n    - pattern: request.$ANYTHING\n    - pattern-not: request.build_absolute_uri\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - pattern: '\"$HTMLSTR\" % ...'\n          - pattern: '\"$HTMLSTR\".format(...)'\n          - pattern: '\"$HTMLSTR\" + ...'\n          - pattern: f\"$HTMLSTR{...}...\"\n      - patterns:\n        - pattern-inside: |\n            $HTML = \"$HTMLSTR\"\n            ...\n        - pattern-either:\n          - pattern: $HTML % ...\n          - pattern: $HTML.format(...)\n          - pattern: $HTML + ...\n    - metavariable-pattern:\n        metavariable: $HTMLSTR\n        language: generic\n        pattern: <$TAG ...\n", "rule_path": "extend_dataset/f51bc18b/before/raw-html-format.yaml", "test_path": "extend_dataset/f51bc18b/after/raw-html-format.py", "category": "historical", "splited_testsuite_b": ["from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def get(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        link = '<a href=\"http://external/abc/%s\">Check link href</a>'\n\n        # ruleid: raw-html-format\n        context['html'] = link % text\n\n        return render(request, self.template_name, context)", "from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def get2(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        link = '<a href=\"http://external/abc/{}\">Check link href</a>'\n\n        # ruleid: raw-html-format\n        context['html'] = link.format(text)\n\n        return render(request, self.template_name, context)", "from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def get3(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = '<a href=\"http://external/abc/%s\">Check link href</a>' % text\n\n        return render(request, self.template_name, context)", "from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def get4(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = '<a href=\"http://external/abc/%s\">Check link href</a>'.format(text)\n\n        return render(request, self.template_name, context)", "from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def get5(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = f'<a href=\"http://external/abc/{text}\">Check link href</a>'\n\n        return render(request, self.template_name, context)", "from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def ok(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        link = 'something other than html, %s!'\n\n        # ok: raw-html-format\n        context['html'] = link % text\n\n        return render(request, self.template_name, context)", "from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def ok2(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ok: raw-html-format\n        context['html'] = 'this is a random string. {}'.format(text)\n\n        return render(request, self.template_name, context)", "from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def ok3(self, request):\n        # ok: raw-html-format\n        msg += ' (<a href=\"{}\" target=\"_blank\" rel=\"noopener\">{}</a>)'.format(\n            request.build_absolute_uri(reverse('source')),\n            gettext('source code')\n        )", "from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def ok4(self, request):\n        form = CreateQuestionForm(request.POST)\n        if '_popup' in request.GET and not error:\n            # ok: raw-html-format\n            resp = '<script type=\"text/javascript\">opener.dismissAddAnotherPopupDojo(window, \"%s\", \"%s\");</script>' \\\n                % (escape(form.cleaned_data['something']), escape(form.cleaned_data['text']))\n            resp += '<script type=\"text/javascript\">window.close();</script>'\n            return HttpResponse(resp)", "from django.shortcuts import render\nfrom django.shortcuts import render_to_response\nfrom django.utils.html import escape\n\nclass FalsePositiveCheck499View(VulnerableTemplateView):\n    title = '(almost) Cross-Site Scripting'\n    tags = ['false-positive', 'GET', 'filtered']\n    description = 'Echo query string parameter to HTML tag attribute removing'\\\n                  ' the single quotes which are present in the input.'\n    url_path = '499_check.py?text=1'\n    false_positive_check = True\n    references = ['https://github.com/andresriancho/w3af/pull/499']\n\n    def getB(self, request, *args, **kwds):\n        context = self.get_context_data()\n\n        text = request.GET['text']\n        text = text.replace('\"', '')\n\n        # ruleid: raw-html-format\n        context['html'] = '<a href=\"http://external/abc/' + text + '\">Check link href</a>'\n\n        return render(request, self.template_name, context)"], "actual": [true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, false, false, false, false, true], "index": 96, "commit_message": "Add concat case (#1539)", "commit_date_str": "2021-10-13 15:47:03 -0500", "leaf_count": 12, "line_count": 27}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages:\n  - php\n  severity: ERROR\n  message: >-\n    User data flows into this manually-constructed SQL string. User data\n    can be safely inserted into SQL strings using prepared statements or an\n    object-relational mapper (ORM). Manually-constructed SQL strings is a\n    possible indicator of SQL injection, which could let an attacker steal\n    or manipulate data from the database.\n    Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label)\n    VALUES (?, ?)\");`)\n    or a safe library.\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: $_GET\n      - pattern: $_POST\n      - pattern: $_COOKIE\n      - pattern: $_REQUEST\n  pattern-sinks:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          sprintf($SQLSTR, ...)\n      - metavariable-regex:\n          metavariable: $SQLSTR\n          regex: .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...{$EXPR}...\"\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...$EXPR...\"\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...\".$EXPR\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n", "failed_tests": ["<?php\n\nfunction test5() {\n    $part = $_POST['url'];\n    $part = mysqli_real_escape_string($part);\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '\" . $part . \"'\");\n    $info = mysql_query($query);\n    return $info;\n}"], "failed_type": "fp", "testsuite_a": "<?php\n\n// True Positives\n\nfunction test1() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$_GET['url'].\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $part = $_POST['url'];\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '$part'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$_REQUEST['url']}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    // ruleid: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $_COOKIE['foo']);\n    $info = mysql_query($query);\n    return $info;\n}\n\n// True Negatives\n\nfunction test1() {\n    // ok: tainted-sql-string\n    $query = 'SELECT * FROM table WHERE Id = 1';\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$value.\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$foobar() ? 1 : 2}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $value);\n    $info = mysql_query($query);\n    return $info;\n}\n", "testsuite_b": "<?php\n\n// True Positives\n\nfunction test1() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$_GET['url'].\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $part = $_POST['url'];\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '$part'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$_REQUEST['url']}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    // ruleid: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $_COOKIE['foo']);\n    $info = mysql_query($query);\n    return $info;\n}\n\n// True Negatives\n\nfunction test1() {\n    // ok: tainted-sql-string\n    $query = 'SELECT * FROM table WHERE Id = 1';\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test2() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$value.\"'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test3() {\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$foobar() ? 1 : 2}'\";\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test4() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $value);\n    $info = mysql_query($query);\n    return $info;\n}\n\nfunction test5() {\n    $part = $_POST['url'];\n    $part = mysqli_real_escape_string($part);\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '\" . $part . \"'\");\n    $info = mysql_query($query);\n    return $info;\n}\n", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages:\n  - php\n  severity: ERROR\n  message: User data flows into this manually-constructed SQL string. User data can\n    be safely inserted into SQL strings using prepared statements or an object-relational\n    mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL\n    injection, which could let an attacker steal or manipulate data from the database.\n    Instead, use prepared statements (`$mysqli->prepare(\"INSERT INTO test(id, label)\n    VALUES (?, ?)\");`) or a safe library.\n  metadata:\n    cwe: 'CWE-89: Improper Neutralization of Special Elements used in an SQL Command\n      (''SQL Injection'')'\n    owasp:\n    - A10:2021\n    - A01:2017\n    references:\n    - https://owasp.org/www-community/attacks/SQL_Injection\n    category: security\n    technology:\n    - php\n  mode: taint\n  pattern-sanitizers:\n  - pattern-either:\n    - pattern: mysqli_real_escape_string(...)\n    - pattern: real_escape_string(...)\n    - pattern: $MYSQLI->real_escape_string(...)\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: $_GET\n      - pattern: $_POST\n      - pattern: $_COOKIE\n      - pattern: $_REQUEST\n  pattern-sinks:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          sprintf($SQLSTR, ...)\n      - metavariable-regex:\n          metavariable: $SQLSTR\n          regex: .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...{$EXPR}...\"\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...$EXPR...\"\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - patterns:\n      - pattern: |\n          \"...\".$EXPR\n      - pattern-regex: |\n          .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n", "rule_path": "extend_dataset/7107486a/before/tainted-sql-string.yaml", "test_path": "extend_dataset/7107486a/after/tainted-sql-string.php", "category": "historical", "splited_testsuite_b": ["<?php\n\n// True Positives\n\nfunction test1() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$_GET['url'].\"'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\nfunction test2() {\n    $part = $_POST['url'];\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '$part'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\nfunction test3() {\n    // ruleid: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$_REQUEST['url']}'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\nfunction test4() {\n    // ruleid: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $_COOKIE['foo']);\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\n// True Negatives\n\nfunction test1() {\n    // ok: tainted-sql-string\n    $query = 'SELECT * FROM table WHERE Id = 1';\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\nfunction test2() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '\".$value.\"'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\nfunction test3() {\n    // ok: tainted-sql-string\n    $query = \"SELECT * FROM table WHERE Id = '{$foobar() ? 1 : 2}'\";\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\nfunction test4() {\n    $value = 1;\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '%s'\", $value);\n    $info = mysql_query($query);\n    return $info;\n}", "<?php\n\nfunction test5() {\n    $part = $_POST['url'];\n    $part = mysqli_real_escape_string($part);\n    // ok: tainted-sql-string\n    $query = sprintf(\"SELECT * FROM table WHERE Id = '\" . $part . \"'\");\n    $info = mysql_query($query);\n    return $info;\n}"], "actual": [true, true, true, true, false, false, false, false, true], "expected": [true, true, true, true, false, false, false, false, false], "index": 97, "commit_message": "New Published Rules - php.lang.security.injection.tainted-sql-string (#1899)", "commit_date_str": "2022-03-18 01:03:20 -0400", "leaf_count": 13, "line_count": 37}
{"id": "eval-detected", "rule": "rules:\n- id: eval-detected\n  patterns:\n  - pattern-not: eval(\"...\")\n  - pattern: eval(...)\n  message: >-\n    Detected the use of eval(). eval() can be dangerous if used to evaluate\n    dynamic content. If this content can be input from outside the program, this\n    may be a code injection vulnerability. Ensure evaluated content is not definable\n    by external sources.\n  languages: [python]\n  severity: WARNING\n", "failed_tests": ["# ok:eval-detected\neval(f\"\")"], "failed_type": "fp", "testsuite_a": "# ok:eval-detected\neval(\"x = 1; x = x + 2\")\n\nblah = \"import requests; r = requests.get('https://example.com')\"\n# ok:eval-detected\neval(blah)\n\ndynamic = \"import requests; r = requests.get('{}')\"\n# ruleid:eval-detected\neval(dynamic.format(\"https://example.com\"))\n\ndef eval_something(something):\n    # ruleid:eval-detected\n    eval(something)\n\nfrom something import eval\n\n# ok:eval-detected\neval(\"something\")\n", "testsuite_b": "# ok:eval-detected\neval(\"x = 1; x = x + 2\")\n\n# ok:eval-detected\neval(f\"x = 1; x = x + 2\")\n\nblah = \"import requests; r = requests.get('https://example.com')\"\n# ok:eval-detected\neval(blah)\n\ndynamic = \"import requests; r = requests.get('{}')\"\n# ruleid:eval-detected\neval(dynamic.format(\"https://example.com\"))\n\n\ndef eval_something(something):\n    # ruleid:eval-detected\n    eval(something)\n\n\nfrom something import eval\n\n# ok:eval-detected\neval(\"something\")\n\n# ok:eval-detected\neval(\"somethin(){}\")\n\n# ok:eval-detected\neval(f\"something()\")\n\n# ok:eval-detected\neval(\"\")\n\n# ok:eval-detected\neval(f\"\")\n\nuser_input = get_userinput()\n# ruleid:eval-detected\neval(f\"some_func({user_input})\")\n\ndef eval_something(something):\n    # ruleid:eval-detected\n    eval(f\"some_func({{{something}}})\")\n", "ground_truth": "rules:\n- id: eval-detected\n  patterns:\n  - pattern-not: eval(f\"\")\n  - pattern-not: eval(\"...\")\n  - pattern: eval(...)\n  message: >-\n    Detected the use of eval(). eval() can be dangerous if used to evaluate\n    dynamic content. If this content can be input from outside the program, this\n    may be a code injection vulnerability. Ensure evaluated content is not definable\n    by external sources.\n  metadata:\n    source-rule-url: https://bandit.readthedocs.io/en/latest/blacklists/blacklist_calls.html#b307-eval\n    cwe:\n    - \"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"\n    owasp:\n    - A03:2021 - Injection\n    asvs:\n      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'\n      control_id: 5.2.4 Dyanmic Code Execution Features\n      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v52-sanitization-and-sandboxing-requirements\n      version: '4'\n    category: security\n    technology:\n    - python\n    references:\n    - https://owasp.org/Top10/A03_2021-Injection\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  languages: [python]\n  severity: WARNING\n", "rule_path": "extend_dataset/fd3f31c0/before/eval-detected.yaml", "test_path": "extend_dataset/fd3f31c0/after/eval-detected.py", "category": "historical", "splited_testsuite_b": ["# ok:eval-detected\neval(\"x = 1; x = x + 2\")", "# ok:eval-detected\neval(f\"x = 1; x = x + 2\")", "blah = \"import requests; r = requests.get('https://example.com')\"\n# ok:eval-detected\neval(blah)", "dynamic = \"import requests; r = requests.get('{}')\"\n# ruleid:eval-detected\neval(dynamic.format(\"https://example.com\"))", "def eval_something(something):\n    # ruleid:eval-detected\n    eval(something)", "from something import eval\n\n# ok:eval-detected\neval(\"something\")", "# ok:eval-detected\neval(\"somethin(){}\")", "# ok:eval-detected\neval(f\"something()\")", "# ok:eval-detected\neval(\"\")", "user_input = get_userinput()\n# ruleid:eval-detected\neval(f\"some_func({user_input})\")", "def eval_something(something):\n    # ruleid:eval-detected\n    eval(f\"some_func({{{something}}})\")", "# ok:eval-detected\neval(f\"\")"], "actual": [false, false, false, true, true, false, false, false, false, true, true, true], "expected": [false, false, false, true, true, false, false, false, false, true, true, false], "index": 98, "commit_message": "Enhance Python eval() detection (#2997)", "commit_date_str": "2023-07-10 11:57:12 +0700", "leaf_count": 2, "line_count": 3}
{"id": "dangerous-exec", "rule": "rules:\n- id: dangerous-exec\n  patterns:\n  - pattern-either:\n    - pattern: |\n        $EXEC(...)\n  - pattern-not: |\n      $EXEC(\"...\",...)\n  - pattern-not: |\n      $EXEC([\"...\",...],...)\n  - pattern-not: |\n      $EXEC({...},\"...\",...)\n  - pattern-not: |\n      $EXEC({...},[\"...\",...],...)\n  - metavariable-regex:\n      metavariable: $EXEC\n      regex: \n        ^(system|exec|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$\n  message: |\n    Detected non-static command inside $EXEC. Audit the input to '$EXEC'.\n    If unverified user data can reach this call site, this is a code injection\n    vulnerability. A malicious actor can inject a malicious script to execute\n    arbitrary code.\n  severity: WARNING\n  languages: [ruby]\n", "failed_tests": ["require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  output = exec([\"sh\", \"-c\", user_input])\nend"], "failed_type": "fn", "testsuite_a": "require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  exec(\"ls -lah #{user_input}\")\n\n# ruleid: dangerous-exec\n  Process.spawn([user_input, \"smth\"])\n\n  commands = \"ls -lah /raz/dva\"\n# ok: dangerous-exec\n  system(commands)\n\n  cmd_name = \"sh\"\n# ok: dangerous-exec\n  Process.exec([cmd_name, \"ls\", \"-la\"])\n# ok: dangerous-exec\n  Open3.capture2({\"FOO\" => \"BAR\"}, [cmd_name, \"smth\"])\n# ok: dangerous-exec\n  system(\"ls -lah /tmp\")\n# ok: dangerous-exec\n  exec([\"ls\", \"-lah\", \"/tmp\"])\nend\n", "testsuite_b": "require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  exec(\"ls -lah #{user_input}\")\n\n# ruleid: dangerous-exec\n  Process.spawn([user_input, \"smth\"])\n\n# ruleid: dangerous-exec\n  output = exec([\"sh\", \"-c\", user_input])\n\n# ruleid: dangerous-exec\n  pid = spawn([\"bash\", user_input])\n\n  commands = \"ls -lah /raz/dva\"\n# ok: dangerous-exec\n  system(commands)\n\n  cmd_name = \"sh\"\n# ok: dangerous-exec\n  Process.exec([cmd_name, \"ls\", \"-la\"])\n# ok: dangerous-exec\n  Open3.capture2({\"FOO\" => \"BAR\"}, [cmd_name, \"smth\"])\n# ok: dangerous-exec\n  system(\"ls -lah /tmp\")\n# ok: dangerous-exec\n  exec([\"ls\", \"-lah\", \"/tmp\"])\nend\n", "ground_truth": "rules:\n- id: dangerous-exec\n  pattern-either:\n  - patterns:\n    - pattern: |\n        $EXEC(...)\n    - pattern-not: |\n        $EXEC(\"...\",...)\n    - pattern-not: |\n        $EXEC([\"...\",...],...)\n    - pattern-not: |\n        $EXEC({...},\"...\",...)\n    - pattern-not: |\n        $EXEC({...},[\"...\",...],...)\n    - metavariable-regex:\n        metavariable: $EXEC\n        regex: ^(system|exec|spawn|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          $EXEC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",...)\n      - pattern: |\n          $EXEC({...},\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",...)\n      - pattern: |\n          $EXEC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",...],...)\n      - pattern: |\n          $EXEC({...},[\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",...],...)\n    - pattern-not: |\n        $EXEC(\"...\",\"...\",...)\n    - pattern-not: |\n        $EXEC([\"...\",\"...\",...],...)\n    - pattern-not: |\n        $EXEC({...},\"...\",\"...\",...)\n    - pattern-not: |\n        $EXEC({...},[\"...\",\"...\",...],...)\n    - metavariable-regex:\n        metavariable: $EXEC\n        regex: ^(system|exec|spawn|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          $EXEC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...)\n      - pattern: |\n          $EXEC({...},\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...)\n      - pattern: |\n          $EXEC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...],...)\n      - pattern: |\n          $EXEC({...},[\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...],...)\n    - pattern-not: |\n        $EXEC(\"...\",\"...\",\"...\",...)\n    - pattern-not: |\n        $EXEC([\"...\",\"...\",\"...\",...],...)\n    - pattern-not: |\n        $EXEC({...},\"...\",\"...\",\"...\",...)\n    - pattern-not: |\n        $EXEC({...},[\"...\",\"...\",\"...\",...],...)\n    - metavariable-regex:\n        metavariable: $EXEC\n        regex: ^(system|exec|spawn|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$\n  message: |\n    Detected non-static command inside $EXEC. Audit the input to '$EXEC'.\n    If unverified user data can reach this call site, this is a code injection\n    vulnerability. A malicious actor can inject a malicious script to execute\n    arbitrary code.\n  metadata:\n    cwe: \"CWE-94: Improper Control of Generation of Code ('Code Injection')\"\n    owasp: 'A1: Injection'\n  severity: WARNING\n  languages: [ruby]\n", "rule_path": "extend_dataset/a33b448d/before/dangerous-exec.yaml", "test_path": "extend_dataset/a33b448d/after/dangerous-exec.rb", "category": "historical", "splited_testsuite_b": ["require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  exec(\"ls -lah #{user_input}\")\nend", "require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  Process.spawn([user_input, \"smth\"])\nend", "require 'open3'\n\ndef test_calls(user_input)\n  commands = \"ls -lah /raz/dva\"\n# ok: dangerous-exec\n  system(commands)\nend", "require 'open3'\n\ndef test_calls(user_input)\n  cmd_name = \"sh\"\n# ok: dangerous-exec\n  Process.exec([cmd_name, \"ls\", \"-la\"])\nend", "require 'open3'\n\ndef test_calls(user_input)\n  cmd_name = \"sh\"\n# ok: dangerous-exec\n  Open3.capture2({\"FOO\" => \"BAR\"}, [cmd_name, \"smth\"])\nend", "require 'open3'\n\ndef test_calls(user_input)\n# ok: dangerous-exec\n  system(\"ls -lah /tmp\")\nend", "require 'open3'\n\ndef test_calls(user_input)\n# ok: dangerous-exec\n  exec([\"ls\", \"-lah\", \"/tmp\"])\nend", "require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  output = exec([\"sh\", \"-c\", user_input])\nend"], "actual": [true, true, false, false, false, false, false, false], "expected": [true, true, false, false, false, false, false, true], "index": 99, "commit_message": "update dangerous-exec rule (#1187)", "commit_date_str": "2021-03-24 09:32:50 -0700", "leaf_count": 7, "line_count": 20}
{"id": "dangerous-exec", "rule": "rules:\n- id: dangerous-exec\n  patterns:\n  - pattern-either:\n    - pattern: |\n        $EXEC(...)\n  - pattern-not: |\n      $EXEC(\"...\",...)\n  - pattern-not: |\n      $EXEC([\"...\",...],...)\n  - pattern-not: |\n      $EXEC({...},\"...\",...)\n  - pattern-not: |\n      $EXEC({...},[\"...\",...],...)\n  - metavariable-regex:\n      metavariable: $EXEC\n      regex: \n        ^(system|exec|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$\n  message: |\n    Detected non-static command inside $EXEC. Audit the input to '$EXEC'.\n    If unverified user data can reach this call site, this is a code injection\n    vulnerability. A malicious actor can inject a malicious script to execute\n    arbitrary code.\n  severity: WARNING\n  languages: [ruby]\n", "failed_tests": ["require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  pid = spawn([\"bash\", user_input])\nend"], "failed_type": "fn", "testsuite_a": "require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  exec(\"ls -lah #{user_input}\")\n\n# ruleid: dangerous-exec\n  Process.spawn([user_input, \"smth\"])\n\n  commands = \"ls -lah /raz/dva\"\n# ok: dangerous-exec\n  system(commands)\n\n  cmd_name = \"sh\"\n# ok: dangerous-exec\n  Process.exec([cmd_name, \"ls\", \"-la\"])\n# ok: dangerous-exec\n  Open3.capture2({\"FOO\" => \"BAR\"}, [cmd_name, \"smth\"])\n# ok: dangerous-exec\n  system(\"ls -lah /tmp\")\n# ok: dangerous-exec\n  exec([\"ls\", \"-lah\", \"/tmp\"])\nend\n", "testsuite_b": "require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  exec(\"ls -lah #{user_input}\")\n\n# ruleid: dangerous-exec\n  Process.spawn([user_input, \"smth\"])\n\n# ruleid: dangerous-exec\n  output = exec([\"sh\", \"-c\", user_input])\n\n# ruleid: dangerous-exec\n  pid = spawn([\"bash\", user_input])\n\n  commands = \"ls -lah /raz/dva\"\n# ok: dangerous-exec\n  system(commands)\n\n  cmd_name = \"sh\"\n# ok: dangerous-exec\n  Process.exec([cmd_name, \"ls\", \"-la\"])\n# ok: dangerous-exec\n  Open3.capture2({\"FOO\" => \"BAR\"}, [cmd_name, \"smth\"])\n# ok: dangerous-exec\n  system(\"ls -lah /tmp\")\n# ok: dangerous-exec\n  exec([\"ls\", \"-lah\", \"/tmp\"])\nend\n", "ground_truth": "rules:\n- id: dangerous-exec\n  pattern-either:\n  - patterns:\n    - pattern: |\n        $EXEC(...)\n    - pattern-not: |\n        $EXEC(\"...\",...)\n    - pattern-not: |\n        $EXEC([\"...\",...],...)\n    - pattern-not: |\n        $EXEC({...},\"...\",...)\n    - pattern-not: |\n        $EXEC({...},[\"...\",...],...)\n    - metavariable-regex:\n        metavariable: $EXEC\n        regex: ^(system|exec|spawn|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          $EXEC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",...)\n      - pattern: |\n          $EXEC({...},\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",...)\n      - pattern: |\n          $EXEC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",...],...)\n      - pattern: |\n          $EXEC({...},[\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",...],...)\n    - pattern-not: |\n        $EXEC(\"...\",\"...\",...)\n    - pattern-not: |\n        $EXEC([\"...\",\"...\",...],...)\n    - pattern-not: |\n        $EXEC({...},\"...\",\"...\",...)\n    - pattern-not: |\n        $EXEC({...},[\"...\",\"...\",...],...)\n    - metavariable-regex:\n        metavariable: $EXEC\n        regex: ^(system|exec|spawn|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          $EXEC(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...)\n      - pattern: |\n          $EXEC({...},\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...)\n      - pattern: |\n          $EXEC([\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...],...)\n      - pattern: |\n          $EXEC({...},[\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",...],...)\n    - pattern-not: |\n        $EXEC(\"...\",\"...\",\"...\",...)\n    - pattern-not: |\n        $EXEC([\"...\",\"...\",\"...\",...],...)\n    - pattern-not: |\n        $EXEC({...},\"...\",\"...\",\"...\",...)\n    - pattern-not: |\n        $EXEC({...},[\"...\",\"...\",\"...\",...],...)\n    - metavariable-regex:\n        metavariable: $EXEC\n        regex: ^(system|exec|spawn|Process.exec|Process.spawn|Open3.capture2|Open3.capture2e|Open3.capture3|Open3.popen2|Open3.popen2e|Open3.popen3|IO.popen|Gem::Util.popen|PTY.spawn)$\n  message: |\n    Detected non-static command inside $EXEC. Audit the input to '$EXEC'.\n    If unverified user data can reach this call site, this is a code injection\n    vulnerability. A malicious actor can inject a malicious script to execute\n    arbitrary code.\n  metadata:\n    cwe: \"CWE-94: Improper Control of Generation of Code ('Code Injection')\"\n    owasp: 'A1: Injection'\n  severity: WARNING\n  languages: [ruby]\n", "rule_path": "extend_dataset/a33b448d/before/dangerous-exec.yaml", "test_path": "extend_dataset/a33b448d/after/dangerous-exec.rb", "category": "historical", "splited_testsuite_b": ["require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  exec(\"ls -lah #{user_input}\")\nend", "require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  Process.spawn([user_input, \"smth\"])\nend", "require 'open3'\n\ndef test_calls(user_input)\n  commands = \"ls -lah /raz/dva\"\n# ok: dangerous-exec\n  system(commands)\nend", "require 'open3'\n\ndef test_calls(user_input)\n  cmd_name = \"sh\"\n# ok: dangerous-exec\n  Process.exec([cmd_name, \"ls\", \"-la\"])\nend", "require 'open3'\n\ndef test_calls(user_input)\n  cmd_name = \"sh\"\n# ok: dangerous-exec\n  Open3.capture2({\"FOO\" => \"BAR\"}, [cmd_name, \"smth\"])\nend", "require 'open3'\n\ndef test_calls(user_input)\n# ok: dangerous-exec\n  system(\"ls -lah /tmp\")\nend", "require 'open3'\n\ndef test_calls(user_input)\n# ok: dangerous-exec\n  exec([\"ls\", \"-lah\", \"/tmp\"])\nend", "require 'open3'\n\ndef test_calls(user_input)\n# ruleid: dangerous-exec\n  pid = spawn([\"bash\", user_input])\nend"], "actual": [true, true, false, false, false, false, false, false], "expected": [true, true, false, false, false, false, false, true], "index": 100, "commit_message": "update dangerous-exec rule (#1187)", "commit_date_str": "2021-03-24 09:32:50 -0700", "leaf_count": 7, "line_count": 20}
{"id": "django-no-csrf-token", "rule": "rules:\n- id: django-no-csrf-token\n  patterns:\n  - pattern: \"<form...>...</form>\"\n  - pattern-either:\n    - pattern: |\n        <form ... method=\"$METHOD\" ...>...</form>\n    - pattern: |\n        <form ... method='$METHOD' ...>...</form>\n    - pattern: |\n        <form ... method=$METHOD ...>...</form>\n  - metavariable-regex:\n      metavariable: $METHOD\n      regex: (?i)(post|put|delete|patch)\n  - pattern-not-inside: \"<form...>...{% csrf_token %}...</form>\"\n  message: Manually-created forms in django templates should specify a csrf_token\n    to prevent CSRF attacks\n  languages: [generic]\n  severity: WARNING\n", "failed_tests": ["<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n        <form method=\"POST\" action=\"{{ url_for('web.organization_settings') }}\">\n          {{ name_form.csrf_token }}\n          {{ render_form_row([name_form.organization_name], col_map={'organization_name': 'col-md-6'}) }}\n        \n          <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">\n        </form>\n      </div>\n  </div>\n</div>"], "failed_type": "fp", "testsuite_a": "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='POST'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='PUT'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"delete\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form method=\"GET\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n", "testsuite_b": "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='POST'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='PUT'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"delete\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form method=\"GET\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n        <form method=\"POST\" action=\"{{ url_for('web.organization_settings') }}\">\n          {{ name_form.csrf_token }}\n          {{ render_form_row([name_form.organization_name], col_map={'organization_name': 'col-md-6'}) }}\n        \n          <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">\n        </form>\n      </div>\n  </div>\n</div>\n", "ground_truth": "rules:\n  - id: django-no-csrf-token\n    patterns:\n      - pattern: \"<form...>...</form>\"\n      - pattern-either:\n          - pattern: |\n              <form ... method=\"$METHOD\" ...>...</form>\n          - pattern: |\n              <form ... method='$METHOD' ...>...</form>\n          - pattern: |\n              <form ... method=$METHOD ...>...</form>\n      - metavariable-regex:\n          metavariable: $METHOD\n          regex: (?i)(post|put|delete|patch)\n      - pattern-not-inside: \"<form...>...{% csrf_token %}...</form>\"\n      - pattern-not-inside: \"<form...>...{{ $VAR.csrf_token }}...</form>\"\n    message: Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks\n    languages: [generic]\n    severity: WARNING\n    metadata:\n      category: security\n      cwe: \"CWE-352: Cross-Site Request Forgery (CSRF)\"\n      references:\n      - https://docs.djangoproject.com/en/4.2/howto/csrf/\n      confidence: MEDIUM\n      likelihood: MEDIUM\n      impact: MEDIUM\n      subcategory:\n        - guardrail\n      technology:\n        - django\n    paths:\n      include:\n        - \"*.html\"\n", "rule_path": "extend_dataset/353cd3ae/before/django-no-csrf-token.yaml", "test_path": "extend_dataset/353cd3ae/after/django-no-csrf-token.html", "category": "historical", "splited_testsuite_b": ["<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='POST'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='PUT'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"delete\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form method=\"GET\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n        <form method=\"POST\" action=\"{{ url_for('web.organization_settings') }}\">\n          {{ name_form.csrf_token }}\n          {{ render_form_row([name_form.organization_name], col_map={'organization_name': 'col-md-6'}) }}\n        \n          <input type=\"submit\" value=\"Submit\" class=\"btn btn-primary\">\n        </form>\n      </div>\n  </div>\n</div>"], "actual": [true, true, true, false, false, false, false, true], "expected": [true, true, true, false, false, false, false, false], "index": 101, "commit_message": "Add pattern-not for flask csrf tokens to django csrf rule (#3263)", "commit_date_str": "2024-01-08 10:20:53 +0100", "leaf_count": 7, "line_count": 16}
{"id": "detected-telegram-bot-api-key", "rule": "rules:\n- id: detected-telegram-bot-api-key\n  patterns:\n  - pattern-regex: '[0-9]+:AA[0-9A-Za-z\\-_]{33}'\n  - pattern-not-regex: go\\.mod.*\n  languages:\n  - regex\n  message: Telegram Bot API Key detected\n  severity: ERROR\n", "failed_tests": ["```php\n<?php\n\n// ok: detected-telegram-bot-api-key\ndefine('DO_NOT_DETECT_ME', 'github.com/valyala/fasthttp v1.24.0 h1:AAiG4oLDUArTb7rYf9oO2bkGooOqCaUF6a2u8asBP3I=');\n\n?>\n```"], "failed_type": "fp", "testsuite_a": "<?php\n\n// ruleid: detected-telegram-bot-api-key\ndefine('BOT_TOKEN', '12345678:AA101703Wd8JLT6GCtKzxatRHQREQUk_CpK');\ndefine('API_URL', 'https://api.telegram.org/bot'.BOT_TOKEN.'/');\n\n// ok: detected-telegram-bot-api-key\ndefine('GO.MOD', 'github.com/gorilla/mux v1.7.4/go.mod 11:AAbg23sWSpFRCP0SfiEN6jmj59UnWan46BH5rLB7');\n\n?>\n", "testsuite_b": "<?php\n\n// ruleid: detected-telegram-bot-api-key\ndefine('BOT_TOKEN', '12345678:AA101703Wd8JLT6GCtKzxatRHQREQUk_CpK');\ndefine('API_URL', 'https://api.telegram.org/bot'.BOT_TOKEN.'/');\n\n// ok: detected-telegram-bot-api-key\ndefine('GO.MOD', 'github.com/gorilla/mux v1.7.4/go.mod 11:AAbg23sWSpFRCP0SfiEN6jmj59UnWan46BH5rLB7');\n// ok: detected-telegram-bot-api-key\ndefine('DO_NOT_DETECT_ME', 'github.com/valyala/fasthttp v1.24.0 h1:AAiG4oLDUArTb7rYf9oO2bkGooOqCaUF6a2u8asBP3I=')\n\n?>\n", "ground_truth": "rules:\n- id: detected-telegram-bot-api-key\n  patterns:\n  - pattern-regex: '[0-9]+:AA[0-9A-Za-z\\-_]{33}'\n  - pattern-not-regex: go\\.mod.*\n  - pattern-not-regex: v[\\d]+\\.[\\d]+\\.[\\d]+.*\n  languages:\n  - regex\n  message: Telegram Bot API Key detected\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json\n    category: security\n    technology:\n    - secrets\n    - telegram\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/3a8f8920/before/detected-telegram-bot-api-key.yaml", "test_path": "extend_dataset/3a8f8920/after/detected-telegram-bot-api-key.php", "category": "historical", "splited_testsuite_b": ["```php\n<?php\n\n// ruleid: detected-telegram-bot-api-key\ndefine('BOT_TOKEN', '12345678:AA101703Wd8JLT6GCtKzxatRHQREQUk_CpK');\ndefine('API_URL', 'https://api.telegram.org/bot'.BOT_TOKEN.'/');\n\n?>\n```", "```php\n<?php\n\n// ok: detected-telegram-bot-api-key\ndefine('GO.MOD', 'github.com/gorilla/mux v1.7.4/go.mod 11:AAbg23sWSpFRCP0SfiEN6jmj59UnWan46BH5rLB7');\n\n?>\n```", "```php\n<?php\n\n// ok: detected-telegram-bot-api-key\ndefine('DO_NOT_DETECT_ME', 'github.com/valyala/fasthttp v1.24.0 h1:AAiG4oLDUArTb7rYf9oO2bkGooOqCaUF6a2u8asBP3I=');\n\n?>\n```"], "actual": [true, false, true], "expected": [true, false, false], "index": 102, "commit_message": "Filter telegram key based on presence of semver string (#1568)", "commit_date_str": "2021-11-08 13:40:30 -0600", "leaf_count": 2, "line_count": 3}
{"id": "express-puppeteer-injection", "rule": "rules:\n- id: express-puppeteer-injection\n  message: |\n    If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities\n  severity: ERROR\n  languages: [javascript]\n  patterns:\n  - pattern-inside: |\n      ...\n      require('puppeteer');\n      ...\n  - pattern-inside: |\n      ...\n      require('express');\n      ...\n  - pattern-either:\n    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}\n    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}\n    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};\n    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})\n  - pattern-either:\n    - pattern: $PAGE.goto(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.goto(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.goto(<... $INPUT ...>,...);\n\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.goto(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.setContent(<... $INPUT ...>,...);\n    - pattern: |-\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.setContent(<... $INPUT ...>,...);\n", "failed_tests": ["const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.post('/test2', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    await page.evaluateOnNewDocument(`${req.body.foo}`)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})"], "failed_type": "fn", "testsuite_a": "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.get('/', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    const url = `https://${req.query.name}`\n    await page.goto(url)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})\n\napp.post('/test', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    await page.setContent(`${req.body.foo}`)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ruleid: express-puppeteer-injection\n    const body = req.body.foo;\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}\n\napp.post('/test2', controller)\n\napp.post('/ok-test', async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok\n    await page.goto('https://example.com');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n})\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok\n    const body = '<div>123</div>';\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}\n\napp.post('/ok-test2', controller)\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "testsuite_b": "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.get('/', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    const url = `https://${req.query.name}`\n    await page.goto(url)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})\n\napp.post('/test', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    await page.setContent(`${req.body.foo}`)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ruleid: express-puppeteer-injection\n    const body = req.body.foo;\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}\n\napp.post('/test2', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    await page.evaluateOnNewDocument(`${req.body.foo}`)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})\n\nconst controller2 = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ruleid: express-puppeteer-injection\n    const body = req.body.foo;\n    await page.evaluate('alert(' + body + ')');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}\n\napp.post('/test2', controller)\n\napp.post('/ok-test', async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok\n    await page.goto('https://example.com');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n})\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok\n    const body = '<div>123</div>';\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}\n\napp.post('/ok-test2', controller)\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "ground_truth": "rules:\n- id: express-puppeteer-injection\n  message: |\n    If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'\n  severity: ERROR\n  languages: [javascript]\n  patterns:\n  - pattern-inside: |\n      ...\n      require('puppeteer');\n      ...\n  - pattern-inside: |\n      ...\n      require('express');\n      ...\n  - pattern-either:\n    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}\n    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}\n    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};\n    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})\n  - pattern-either:\n    - pattern: $PAGE.goto(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.goto(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluate(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluate(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluateHandle(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluateHandle(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluate($CODE,<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluate($CODE,<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$BODY ...>,...)\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.goto(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.goto(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.setContent(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.setContent(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluate(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluate(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluateHandle(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluateHandle(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluate($CODE,<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluate($CODE,<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);\n", "rule_path": "extend_dataset/eccde6b0/before/express-puppeteer-injection.yaml", "test_path": "extend_dataset/eccde6b0/after/express-puppeteer-injection.js", "category": "historical", "splited_testsuite_b": ["const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.get('/', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    const url = `https://${req.query.name}`\n    await page.goto(url)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})", "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.post('/test', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    await page.setContent(`${req.body.foo}`)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})", "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ruleid: express-puppeteer-injection\n    const body = req.body.foo;\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}", "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.post('/ok-test', async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok: express-puppeteer-injection\n    await page.goto('https://example.com');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n})", "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok: express-puppeteer-injection\n    const body = '<div>123</div>';\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}", "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.post('/test2', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    await page.evaluateOnNewDocument(`${req.body.foo}`)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})"], "actual": [true, true, true, false, false, false], "expected": [true, true, true, false, false, true], "index": 103, "commit_message": "update express-puppeteer-injection rule (#687)", "commit_date_str": "2020-07-06 14:57:17 -0700", "leaf_count": 14, "line_count": 51}
{"id": "express-puppeteer-injection", "rule": "rules:\n- id: express-puppeteer-injection\n  message: |\n    If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities\n  severity: ERROR\n  languages: [javascript]\n  patterns:\n  - pattern-inside: |\n      ...\n      require('puppeteer');\n      ...\n  - pattern-inside: |\n      ...\n      require('express');\n      ...\n  - pattern-either:\n    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}\n    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}\n    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};\n    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})\n  - pattern-either:\n    - pattern: $PAGE.goto(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.goto(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.goto(<... $INPUT ...>,...);\n\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.goto(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.setContent(<... $INPUT ...>,...);\n    - pattern: |-\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.setContent(<... $INPUT ...>,...);\n", "failed_tests": ["const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\nconst controller2 = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ruleid: express-puppeteer-injection\n    const body = req.body.foo;\n    await page.evaluate('alert(' + body + ')');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}"], "failed_type": "fn", "testsuite_a": "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.get('/', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    const url = `https://${req.query.name}`\n    await page.goto(url)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})\n\napp.post('/test', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    await page.setContent(`${req.body.foo}`)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ruleid: express-puppeteer-injection\n    const body = req.body.foo;\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}\n\napp.post('/test2', controller)\n\napp.post('/ok-test', async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok\n    await page.goto('https://example.com');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n})\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok\n    const body = '<div>123</div>';\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}\n\napp.post('/ok-test2', controller)\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "testsuite_b": "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.get('/', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    const url = `https://${req.query.name}`\n    await page.goto(url)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})\n\napp.post('/test', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    await page.setContent(`${req.body.foo}`)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ruleid: express-puppeteer-injection\n    const body = req.body.foo;\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}\n\napp.post('/test2', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    await page.evaluateOnNewDocument(`${req.body.foo}`)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})\n\nconst controller2 = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ruleid: express-puppeteer-injection\n    const body = req.body.foo;\n    await page.evaluate('alert(' + body + ')');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}\n\napp.post('/test2', controller)\n\napp.post('/ok-test', async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok\n    await page.goto('https://example.com');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n})\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok\n    const body = '<div>123</div>';\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}\n\napp.post('/ok-test2', controller)\n\napp.listen(port, () => console.log(`Example app listening at http://localhost:${port}`))", "ground_truth": "rules:\n- id: express-puppeteer-injection\n  message: |\n    If unverified user data can reach the `puppeteer` methods it can result in Server-Side Request Forgery vulnerabilities\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: 'CWE-918: Server-Side Request Forgery (SSRF)'\n  severity: ERROR\n  languages: [javascript]\n  patterns:\n  - pattern-inside: |\n      ...\n      require('puppeteer');\n      ...\n  - pattern-inside: |\n      ...\n      require('express');\n      ...\n  - pattern-either:\n    - pattern-inside: function $FUNC($REQ, $RES, ...) {...}\n    - pattern-inside: $X = function $FUNC($REQ, $RES, ...) {...}\n    - pattern-inside: var $X = function $FUNC($REQ, $RES, ...) {...};\n    - pattern-inside: $APP.$METHOD(..., function $FUNC($REQ, $RES, ...) {...})\n  - pattern-either:\n    - pattern: $PAGE.goto(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.goto(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.setContent(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.setContent(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluate(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluate(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluateHandle(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluateHandle(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluateOnNewDocument(<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluate($CODE,<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluate($CODE,<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluateHandle($CODE,<... $REQ.$BODY ...>,...)\n    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$QUERY.$FOO ...>,...)\n    - pattern: $PAGE.evaluateOnNewDocument($CODE,<... $REQ.$BODY ...>,...)\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.goto(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.goto(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.setContent(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.setContent(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluate(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluate(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluateHandle(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluateHandle(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluateOnNewDocument(<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluate($CODE,<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluate($CODE,<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluateHandle($CODE,<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$QUERY.$FOO ...>;\n        ...\n        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);\n    - pattern: |\n        $INPUT = <... $REQ.$BODY ...>;\n        ...\n        $PAGE.evaluateOnNewDocument($CODE,<... $INPUT ...>,...);\n", "rule_path": "extend_dataset/eccde6b0/before/express-puppeteer-injection.yaml", "test_path": "extend_dataset/eccde6b0/after/express-puppeteer-injection.js", "category": "historical", "splited_testsuite_b": ["const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.get('/', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    const url = `https://${req.query.name}`\n    await page.goto(url)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})", "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.post('/test', async (req, res) => {\n    const browser = await puppeteer.launch()\n    const page = await browser.newPage()\n// ruleid: express-puppeteer-injection\n    await page.setContent(`${req.body.foo}`)\n\n    await page.screenshot({path: 'example.png'})\n    await browser.close()\n\n    res.send('Hello World!')\n})", "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ruleid: express-puppeteer-injection\n    const body = req.body.foo;\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}", "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\napp.post('/ok-test', async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok: express-puppeteer-injection\n    await page.goto('https://example.com');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n})", "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\nconst controller = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ok: express-puppeteer-injection\n    const body = '<div>123</div>';\n    await page.setContent('<html>' + body + '</html>');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}", "const express = require('express')\nconst app = express()\nconst port = 3000\nconst puppeteer = require('puppeteer')\n\nconst controller2 = async (req, res) => {\n    const browser = await puppeteer.launch();\n    const page = await browser.newPage();\n// ruleid: express-puppeteer-injection\n    const body = req.body.foo;\n    await page.evaluate('alert(' + body + ')');\n\n    await page.screenshot({path: 'example.png'});\n    await browser.close();\n\n    res.send('Hello World!');\n}"], "actual": [true, true, true, false, false, false], "expected": [true, true, true, false, false, true], "index": 104, "commit_message": "update express-puppeteer-injection rule (#687)", "commit_date_str": "2020-07-06 14:57:17 -0700", "leaf_count": 14, "line_count": 51}
{"id": "secret-in-build-arg", "rule": "rules:\n- id: secret-in-build-arg\n  patterns:\n  - pattern: ARG $ARG\n  - metavariable-regex:\n      metavariable: $ARG\n      regex: (?i).*(password|secret|token)\n  message: >-\n    Docker build time arguments are not suited for secrets, because the\n    argument values are saved with the image. Running `docker image history` on the\n    image will show information on how the image was built, including arguments. If\n    these contain secrets, anyone with access to the docker image can access those\n    secrets.\n  languages:\n  - dockerfile\n  severity: WARNING\n", "failed_tests": ["# ruleid: secret-in-build-arg\nARG AUTH_TOKEN=\"this-is-a-secret\""], "failed_type": "fn", "testsuite_a": "# ok: secret-in-build-arg\nARG BASE_IMG=rust\n# ok: secret-in-build-arg\nARG BASE_TAG=latest\n\nFROM ${BASE_IMG}:${BASE_TAG}\n\n# ok: secret-in-build-arg\nARG environment\n\n# ok: secret-in-build-arg\nARG BUILD_PACKAGES=\"ruby-dev build-base curl-dev git openssl bash\"\n\n# ok: secret-in-build-arg\nARG DEV_PACKAGES=\"postgresql-dev\"\n\n# ok: secret-in-build-arg\nARG RUBY_PACKAGES=\"tzdata\"\n\n# ok: secret-in-build-arg\nARG NAME_IS_OK=\"secret password token key\"\n\n# ruleid: secret-in-build-arg\nARG SECRET_KEY_BASE\n\n# ruleid: secret-in-build-arg\nARG SECRET_TOKEN\n\n# ruleid: secret-in-build-arg\nARG DJANGO_SECRET_KEY\n\n# ruleid: secret-in-build-arg\nARG NEXUS_PASSWORD\n\n# ruleid: secret-in-build-arg\nARG nexus_password\n", "testsuite_b": "# ok: secret-in-build-arg\nARG BASE_IMG=rust\n# ok: secret-in-build-arg\nARG BASE_TAG=latest\n\nFROM ${BASE_IMG}:${BASE_TAG}\n\n# ok: secret-in-build-arg\nARG environment\n\n# ok: secret-in-build-arg\nARG BUILD_PACKAGES=\"ruby-dev build-base curl-dev git openssl bash\"\n\n# ok: secret-in-build-arg\nARG DEV_PACKAGES=\"postgresql-dev\"\n\n# ok: secret-in-build-arg\nARG RUBY_PACKAGES=\"tzdata\"\n\n# ok: secret-in-build-arg\nARG NAME_IS_OK=\"secret password token key\"\n\n# ruleid: secret-in-build-arg\nARG SECRET_KEY_BASE\n\n# ruleid: secret-in-build-arg\nARG SECRET_TOKEN\n\n# ruleid: secret-in-build-arg\nARG AUTH_TOKEN=\"this-is-a-secret\"\n\n# ruleid: secret-in-build-arg\nARG SSH_PRIVATE_KEY\n\n# ruleid: secret-in-build-arg\nARG CERT_PASSWORD\n\n# ruleid: secret-in-build-arg\nARG DJANGO_SECRET_KEY\n\n# ruleid: secret-in-build-arg\nARG NEXUS_PASSWORD\n\n# ruleid: secret-in-build-arg\nARG nexus_password\n", "ground_truth": "rules:\n- id: secret-in-build-arg\n  patterns:\n  - pattern-either:\n    - pattern: ARG $ARG\n    - pattern: ARG $ARG=...\n  - metavariable-regex:\n      metavariable: $ARG\n      regex: (?i).*(password|secret|token|key|cert|api|auth)\n  message: >-\n    Docker build time arguments are not suited for secrets, because the\n    argument values are saved with the image. Running `docker image history` on the\n    image will show information on how the image was built, including arguments. If\n    these contain plain text secrets, anyone with access to the docker image can access\n    those secrets and exploit them.\n  metadata:\n    category: security\n    technology:\n    - dockerfile\n    cwe:\n    - 'CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory'\n    owasp:\n    - A01:2021 - Broken Access Control\n    references:\n    - https://cwe.mitre.org/data/definitions/538.html\n    - https://docs.docker.com/engine/reference/builder/#arg\n    subcategory:\n      - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  languages:\n    - dockerfile\n  severity: WARNING\n", "rule_path": "extend_dataset/b4b4cf00/before/secret-in-build-arg.yaml", "test_path": "extend_dataset/b4b4cf00/after/secret-in-build-arg.dockerfile", "category": "historical", "splited_testsuite_b": ["# ok: secret-in-build-arg\nARG BASE_IMG=rust", "# ok: secret-in-build-arg\nARG BASE_TAG=latest", "# ok: secret-in-build-arg\nARG environment", "# ok: secret-in-build-arg\nARG BUILD_PACKAGES=\"ruby-dev build-base curl-dev git openssl bash\"", "# ok: secret-in-build-arg\nARG DEV_PACKAGES=\"postgresql-dev\"", "# ok: secret-in-build-arg\nARG RUBY_PACKAGES=\"tzdata\"", "# ok: secret-in-build-arg\nARG NAME_IS_OK=\"secret password token key\"", "# ruleid: secret-in-build-arg\nARG SECRET_KEY_BASE", "# ruleid: secret-in-build-arg\nARG SECRET_TOKEN", "# ruleid: secret-in-build-arg\nARG CERT_PASSWORD", "# ruleid: secret-in-build-arg\nARG DJANGO_SECRET_KEY", "# ruleid: secret-in-build-arg\nARG NEXUS_PASSWORD", "# ruleid: secret-in-build-arg\nARG nexus_password", "# ruleid: secret-in-build-arg\nARG AUTH_TOKEN=\"this-is-a-secret\""], "actual": [false, false, false, false, false, false, false, true, true, true, true, true, true, false], "expected": [false, false, false, false, false, false, false, true, true, true, true, true, true, true], "index": 105, "commit_message": "Update Regex to detect secrets in Dockerfile (#3028)", "commit_date_str": "2023-08-07 13:16:46 +0800", "leaf_count": 3, "line_count": 5}
{"id": "secret-in-build-arg", "rule": "rules:\n- id: secret-in-build-arg\n  patterns:\n  - pattern: ARG $ARG\n  - metavariable-regex:\n      metavariable: $ARG\n      regex: (?i).*(password|secret|token)\n  message: >-\n    Docker build time arguments are not suited for secrets, because the\n    argument values are saved with the image. Running `docker image history` on the\n    image will show information on how the image was built, including arguments. If\n    these contain secrets, anyone with access to the docker image can access those\n    secrets.\n  languages:\n  - dockerfile\n  severity: WARNING\n", "failed_tests": ["# ruleid: secret-in-build-arg\nARG SSH_PRIVATE_KEY"], "failed_type": "fn", "testsuite_a": "# ok: secret-in-build-arg\nARG BASE_IMG=rust\n# ok: secret-in-build-arg\nARG BASE_TAG=latest\n\nFROM ${BASE_IMG}:${BASE_TAG}\n\n# ok: secret-in-build-arg\nARG environment\n\n# ok: secret-in-build-arg\nARG BUILD_PACKAGES=\"ruby-dev build-base curl-dev git openssl bash\"\n\n# ok: secret-in-build-arg\nARG DEV_PACKAGES=\"postgresql-dev\"\n\n# ok: secret-in-build-arg\nARG RUBY_PACKAGES=\"tzdata\"\n\n# ok: secret-in-build-arg\nARG NAME_IS_OK=\"secret password token key\"\n\n# ruleid: secret-in-build-arg\nARG SECRET_KEY_BASE\n\n# ruleid: secret-in-build-arg\nARG SECRET_TOKEN\n\n# ruleid: secret-in-build-arg\nARG DJANGO_SECRET_KEY\n\n# ruleid: secret-in-build-arg\nARG NEXUS_PASSWORD\n\n# ruleid: secret-in-build-arg\nARG nexus_password\n", "testsuite_b": "# ok: secret-in-build-arg\nARG BASE_IMG=rust\n# ok: secret-in-build-arg\nARG BASE_TAG=latest\n\nFROM ${BASE_IMG}:${BASE_TAG}\n\n# ok: secret-in-build-arg\nARG environment\n\n# ok: secret-in-build-arg\nARG BUILD_PACKAGES=\"ruby-dev build-base curl-dev git openssl bash\"\n\n# ok: secret-in-build-arg\nARG DEV_PACKAGES=\"postgresql-dev\"\n\n# ok: secret-in-build-arg\nARG RUBY_PACKAGES=\"tzdata\"\n\n# ok: secret-in-build-arg\nARG NAME_IS_OK=\"secret password token key\"\n\n# ruleid: secret-in-build-arg\nARG SECRET_KEY_BASE\n\n# ruleid: secret-in-build-arg\nARG SECRET_TOKEN\n\n# ruleid: secret-in-build-arg\nARG AUTH_TOKEN=\"this-is-a-secret\"\n\n# ruleid: secret-in-build-arg\nARG SSH_PRIVATE_KEY\n\n# ruleid: secret-in-build-arg\nARG CERT_PASSWORD\n\n# ruleid: secret-in-build-arg\nARG DJANGO_SECRET_KEY\n\n# ruleid: secret-in-build-arg\nARG NEXUS_PASSWORD\n\n# ruleid: secret-in-build-arg\nARG nexus_password\n", "ground_truth": "rules:\n- id: secret-in-build-arg\n  patterns:\n  - pattern-either:\n    - pattern: ARG $ARG\n    - pattern: ARG $ARG=...\n  - metavariable-regex:\n      metavariable: $ARG\n      regex: (?i).*(password|secret|token|key|cert|api|auth)\n  message: >-\n    Docker build time arguments are not suited for secrets, because the\n    argument values are saved with the image. Running `docker image history` on the\n    image will show information on how the image was built, including arguments. If\n    these contain plain text secrets, anyone with access to the docker image can access\n    those secrets and exploit them.\n  metadata:\n    category: security\n    technology:\n    - dockerfile\n    cwe:\n    - 'CWE-538: Insertion of Sensitive Information into Externally-Accessible File or Directory'\n    owasp:\n    - A01:2021 - Broken Access Control\n    references:\n    - https://cwe.mitre.org/data/definitions/538.html\n    - https://docs.docker.com/engine/reference/builder/#arg\n    subcategory:\n      - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  languages:\n    - dockerfile\n  severity: WARNING\n", "rule_path": "extend_dataset/b4b4cf00/before/secret-in-build-arg.yaml", "test_path": "extend_dataset/b4b4cf00/after/secret-in-build-arg.dockerfile", "category": "historical", "splited_testsuite_b": ["# ok: secret-in-build-arg\nARG BASE_IMG=rust", "# ok: secret-in-build-arg\nARG BASE_TAG=latest", "# ok: secret-in-build-arg\nARG environment", "# ok: secret-in-build-arg\nARG BUILD_PACKAGES=\"ruby-dev build-base curl-dev git openssl bash\"", "# ok: secret-in-build-arg\nARG DEV_PACKAGES=\"postgresql-dev\"", "# ok: secret-in-build-arg\nARG RUBY_PACKAGES=\"tzdata\"", "# ok: secret-in-build-arg\nARG NAME_IS_OK=\"secret password token key\"", "# ruleid: secret-in-build-arg\nARG SECRET_KEY_BASE", "# ruleid: secret-in-build-arg\nARG SECRET_TOKEN", "# ruleid: secret-in-build-arg\nARG CERT_PASSWORD", "# ruleid: secret-in-build-arg\nARG DJANGO_SECRET_KEY", "# ruleid: secret-in-build-arg\nARG NEXUS_PASSWORD", "# ruleid: secret-in-build-arg\nARG nexus_password", "# ruleid: secret-in-build-arg\nARG SSH_PRIVATE_KEY"], "actual": [false, false, false, false, false, false, false, true, true, true, true, true, true, false], "expected": [false, false, false, false, false, false, false, true, true, true, true, true, true, true], "index": 106, "commit_message": "Update Regex to detect secrets in Dockerfile (#3028)", "commit_date_str": "2023-08-07 13:16:46 +0800", "leaf_count": 3, "line_count": 5}
{"id": "ec2-imdsv1-optional", "rule": "rules:\n- id: ec2-imdsv1-optional\n  languages:\n  - hcl\n  message: >-\n    AWS EC2 Instance allowing use of the IMDSv1\n  patterns:\n  - pattern: http_tokens = \"optional\"\n  - pattern-inside: |\n      metadata_options { ... }\n  severity: ERROR\n", "failed_tests": ["# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-no-metadata-options\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n}"], "failed_type": "fn", "testsuite_a": "resource \"aws_instance\" \"test-instance-bad\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}\nresource \"aws_instance\" \"test-instance-good\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ok: ec2-imdsv1-optional\n    http_tokens = \"required\"\n  }\n}\n", "testsuite_b": "resource \"aws_instance\" \"test-instance-bad-http-tokens-optional\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}\n\n# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-no-metadata-options\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n}\n\n# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-v3-http-tokens-default-optional\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n  }\n}\n\nresource \"aws_instance\" \"test-instance-bad-http-tokens-optional-v2\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}\n\n# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-all-default-values\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    instance_metadata_tags = \"enabled\"\n  }\n}\n\n# ok: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-good\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    http_tokens = \"required\"\n  }\n}\n", "ground_truth": "rules:\n- id: ec2-imdsv1-optional\n  languages:\n  - hcl\n  message: >-\n    AWS EC2 Instance allowing use of the IMDSv1\n  metadata:\n    cwe:\n    - 'CWE-918: Server-Side Request Forgery (SSRF)'\n    references:\n    - https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service\n    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options\n    category: security\n    technology:\n    - terraform\n    - aws\n    owasp:\n    - A10:2021 - Server-Side Request Forgery (SSRF)\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: LOW\n    impact: MEDIUM\n    confidence: MEDIUM\n  pattern-either:\n    # Legacy rule for backwards compatibility\n    - patterns:\n      - pattern: http_tokens = \"optional\"\n      - pattern-inside: |\n          metadata_options { ... }\n    - patterns:\n      - pattern: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n          }\n      - pattern-not: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n            metadata_options {\n              ...\n              http_tokens = \"required\"\n              ...\n            }\n            ...\n          }\n      # Don't match previous legacy rule\n      - pattern-not: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n            metadata_options {\n              ...\n              http_tokens = \"optional\"\n              ...\n            }\n            ...\n          }\n      - pattern-not: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n            metadata_options {\n              ...\n              http_endpoint = \"disabled\"\n              ...\n            }\n            ...\n          }\n  severity: ERROR\n", "rule_path": "extend_dataset/f44f6530/before/ec2-imdsv1-optional.yaml", "test_path": "extend_dataset/f44f6530/after/ec2-imdsv1-optional.tf", "category": "historical", "splited_testsuite_b": ["resource \"aws_instance\" \"test-instance-bad-http-tokens-optional\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}", "resource \"aws_instance\" \"test-instance-bad-http-tokens-optional-v2\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}", "# ok: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-good\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    http_tokens = \"required\"\n  }\n}", "# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-no-metadata-options\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n}"], "actual": [true, true, false, false], "expected": [true, true, false, true], "index": 107, "commit_message": "Updated 'ec2-imdsv1-optional' test to ensure default value isn't set", "commit_date_str": "2023-01-12 13:43:21 -0700", "leaf_count": 2, "line_count": 5}
{"id": "ec2-imdsv1-optional", "rule": "rules:\n- id: ec2-imdsv1-optional\n  languages:\n  - hcl\n  message: >-\n    AWS EC2 Instance allowing use of the IMDSv1\n  patterns:\n  - pattern: http_tokens = \"optional\"\n  - pattern-inside: |\n      metadata_options { ... }\n  severity: ERROR\n", "failed_tests": ["# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-v3-http-tokens-default-optional\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n  }\n}"], "failed_type": "fn", "testsuite_a": "resource \"aws_instance\" \"test-instance-bad\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}\nresource \"aws_instance\" \"test-instance-good\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ok: ec2-imdsv1-optional\n    http_tokens = \"required\"\n  }\n}\n", "testsuite_b": "resource \"aws_instance\" \"test-instance-bad-http-tokens-optional\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}\n\n# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-no-metadata-options\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n}\n\n# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-v3-http-tokens-default-optional\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n  }\n}\n\nresource \"aws_instance\" \"test-instance-bad-http-tokens-optional-v2\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}\n\n# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-all-default-values\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    instance_metadata_tags = \"enabled\"\n  }\n}\n\n# ok: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-good\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    http_tokens = \"required\"\n  }\n}\n", "ground_truth": "rules:\n- id: ec2-imdsv1-optional\n  languages:\n  - hcl\n  message: >-\n    AWS EC2 Instance allowing use of the IMDSv1\n  metadata:\n    cwe:\n    - 'CWE-918: Server-Side Request Forgery (SSRF)'\n    references:\n    - https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service\n    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options\n    category: security\n    technology:\n    - terraform\n    - aws\n    owasp:\n    - A10:2021 - Server-Side Request Forgery (SSRF)\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: LOW\n    impact: MEDIUM\n    confidence: MEDIUM\n  pattern-either:\n    # Legacy rule for backwards compatibility\n    - patterns:\n      - pattern: http_tokens = \"optional\"\n      - pattern-inside: |\n          metadata_options { ... }\n    - patterns:\n      - pattern: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n          }\n      - pattern-not: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n            metadata_options {\n              ...\n              http_tokens = \"required\"\n              ...\n            }\n            ...\n          }\n      # Don't match previous legacy rule\n      - pattern-not: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n            metadata_options {\n              ...\n              http_tokens = \"optional\"\n              ...\n            }\n            ...\n          }\n      - pattern-not: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n            metadata_options {\n              ...\n              http_endpoint = \"disabled\"\n              ...\n            }\n            ...\n          }\n  severity: ERROR\n", "rule_path": "extend_dataset/f44f6530/before/ec2-imdsv1-optional.yaml", "test_path": "extend_dataset/f44f6530/after/ec2-imdsv1-optional.tf", "category": "historical", "splited_testsuite_b": ["resource \"aws_instance\" \"test-instance-bad-http-tokens-optional\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}", "resource \"aws_instance\" \"test-instance-bad-http-tokens-optional-v2\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}", "# ok: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-good\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    http_tokens = \"required\"\n  }\n}", "# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-v3-http-tokens-default-optional\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n  }\n}"], "actual": [true, true, false, false], "expected": [true, true, false, true], "index": 108, "commit_message": "Updated 'ec2-imdsv1-optional' test to ensure default value isn't set", "commit_date_str": "2023-01-12 13:43:21 -0700", "leaf_count": 2, "line_count": 5}
{"id": "ec2-imdsv1-optional", "rule": "rules:\n- id: ec2-imdsv1-optional\n  languages:\n  - hcl\n  message: >-\n    AWS EC2 Instance allowing use of the IMDSv1\n  patterns:\n  - pattern: http_tokens = \"optional\"\n  - pattern-inside: |\n      metadata_options { ... }\n  severity: ERROR\n", "failed_tests": ["# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-all-default-values\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    instance_metadata_tags = \"enabled\"\n  }\n}"], "failed_type": "fn", "testsuite_a": "resource \"aws_instance\" \"test-instance-bad\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}\nresource \"aws_instance\" \"test-instance-good\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ok: ec2-imdsv1-optional\n    http_tokens = \"required\"\n  }\n}\n", "testsuite_b": "resource \"aws_instance\" \"test-instance-bad-http-tokens-optional\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}\n\n# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-no-metadata-options\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n}\n\n# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-v3-http-tokens-default-optional\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n  }\n}\n\nresource \"aws_instance\" \"test-instance-bad-http-tokens-optional-v2\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}\n\n# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-all-default-values\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    instance_metadata_tags = \"enabled\"\n  }\n}\n\n# ok: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-good\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    http_tokens = \"required\"\n  }\n}\n", "ground_truth": "rules:\n- id: ec2-imdsv1-optional\n  languages:\n  - hcl\n  message: >-\n    AWS EC2 Instance allowing use of the IMDSv1\n  metadata:\n    cwe:\n    - 'CWE-918: Server-Side Request Forgery (SSRF)'\n    references:\n    - https://aws.amazon.com/blogs/security/defense-in-depth-open-firewalls-reverse-proxies-ssrf-vulnerabilities-ec2-instance-metadata-service\n    - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/instance#metadata-options\n    category: security\n    technology:\n    - terraform\n    - aws\n    owasp:\n    - A10:2021 - Server-Side Request Forgery (SSRF)\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: LOW\n    impact: MEDIUM\n    confidence: MEDIUM\n  pattern-either:\n    # Legacy rule for backwards compatibility\n    - patterns:\n      - pattern: http_tokens = \"optional\"\n      - pattern-inside: |\n          metadata_options { ... }\n    - patterns:\n      - pattern: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n          }\n      - pattern-not: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n            metadata_options {\n              ...\n              http_tokens = \"required\"\n              ...\n            }\n            ...\n          }\n      # Don't match previous legacy rule\n      - pattern-not: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n            metadata_options {\n              ...\n              http_tokens = \"optional\"\n              ...\n            }\n            ...\n          }\n      - pattern-not: |\n          resource \"aws_instance\" \"$NAME\" {\n            ...\n            metadata_options {\n              ...\n              http_endpoint = \"disabled\"\n              ...\n            }\n            ...\n          }\n  severity: ERROR\n", "rule_path": "extend_dataset/f44f6530/before/ec2-imdsv1-optional.yaml", "test_path": "extend_dataset/f44f6530/after/ec2-imdsv1-optional.tf", "category": "historical", "splited_testsuite_b": ["resource \"aws_instance\" \"test-instance-bad-http-tokens-optional\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n\n  metadata_options {\n    http_endpoint = \"enabled\"\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}", "resource \"aws_instance\" \"test-instance-bad-http-tokens-optional-v2\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    # ruleid: ec2-imdsv1-optional\n    http_tokens = \"optional\"\n  }\n}", "# ok: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-good\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    http_endpoint = \"enabled\"\n    http_tokens = \"required\"\n  }\n}", "# ruleid: ec2-imdsv1-optional\nresource \"aws_instance\" \"test-instance-bad-all-default-values\" {\n  ami = \"ami-0d5eff06f840b45e9\"\n  metadata_options {\n    instance_metadata_tags = \"enabled\"\n  }\n}"], "actual": [true, true, false, false], "expected": [true, true, false, true], "index": 109, "commit_message": "Updated 'ec2-imdsv1-optional' test to ensure default value isn't set", "commit_date_str": "2023-01-12 13:43:21 -0700", "leaf_count": 2, "line_count": 5}
{"id": "check-regex-dos", "rule": "rules:\n- id: check-regex-dos\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $X\n        - pattern-inside: |\n            def $F(...,$X,...)\n              ...\n            end\n      - patterns:\n        - pattern: $X\n        - pattern-inside: |\n            params[...]\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            $RECORD.$Y\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            /...#{...}.../\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            Regexp.new(...)\n  message: >-\n    Found a potentially user-controllable argument in the construction of a regular\n    expressions.\n    This may result in excessive resource consumption when applied to certain inputs,\n    or when the user is allowed to control the match target.\n    Avoid allowing users to specify regular expressions processed by the server.\n    If you must support user-controllable input in a regular expression, use an allow-list\n    to restrict the expressions users may supply to limit catastrophic backtracking.\n  languages:\n  - ruby\n  severity: ERROR\n", "failed_tests": ["def some_rails_controller\n  foo = Record[something]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend"], "failed_type": "fn", "testsuite_a": "def some_func(arg1,arg2,arg3)\n    #ruleid: check-regex-dos\n    /#{arg1}/i =~ arg2\nend\n\ndef some_func2(arg1,arg2,arg3)\n    #ruleid: check-regex-dos\n    Regexp.new(arg3).match(\"some_string\")\nend\n\ndef some_rails_controller\n    foo = params[:some_regex]\n    #ruleid: check-regex-dos\n    Regexp.new(foo).match(\"some_string\")\nend\n\ndef use_params_in_regex\n  #ruleid: check-regex-dos\n  @x = something.match /#{params[:x]}/\nend\n\ndef regex_on_params\n  #ok: check-regex-dos\n  @x = params[:x].match /foo/\nend", "testsuite_b": "def some_rails_controller\n  foo = params[:some_regex]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef some_rails_controller\n  foo = Record[something]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef some_rails_controller\n  foo = Record.read_attribute(\"some_attribute\")\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef use_params_in_regex\n#ruleid: check-regex-dos\n@x = something.match /#{params[:x]}/\nend\n\ndef regex_on_params\n#ok: check-regex-dos\n@x = params[:x].match /foo/\nend", "ground_truth": "rules:\n- id: check-regex-dos\n  mode: taint\n  pattern-sources:\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            cookies[...]\n        - patterns:\n          - pattern: |\n              cookies. ... .$PROPERTY[...]\n          - metavariable-regex:\n              metavariable: $PROPERTY\n              regex: (?!signed|encrypted)\n        - pattern: |\n            params[...]\n        - pattern: |\n            request.env[...]\n        - patterns:\n          - pattern: $Y\n          - pattern-either:\n            - pattern-inside: |\n                $RECORD.read_attribute($Y)\n            - pattern-inside: |\n                $RECORD[$Y]\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            /...#{...}.../\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            Regexp.new(...)\n  message: >-\n    Found a potentially user-controllable argument in the construction of a regular expressions.\n    This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target.\n    Avoid allowing users to specify regular expressions processed by the server.\n    If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking.\n  languages:\n  - ruby\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_regex_dos.rb\n    category: security\n    cwe: 'CWE-1333: Inefficient Regular Expression Complexity'\n    technology:\n    - ruby\n    - rails\n    references:\n    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n", "rule_path": "extend_dataset/4077d9ab/before/check-regex-dos.yaml", "test_path": "extend_dataset/4077d9ab/after/check-regex-dos.rb", "category": "historical", "splited_testsuite_b": ["def some_rails_controller\n  foo = params[:some_regex]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend", "def use_params_in_regex\n#ruleid: check-regex-dos\n@x = something.match /#{params[:x]}/\nend", "def regex_on_params\n#ok: check-regex-dos\n@x = params[:x].match /foo/\nend", "def some_rails_controller\n  foo = Record[something]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend"], "actual": [true, true, false, false], "expected": [true, true, false, true], "index": 110, "commit_message": "scope regex DOS to ActiveRecord-like behavior and cookie/params, fix tests", "commit_date_str": "2022-07-14 13:02:44 -0700", "leaf_count": 10, "line_count": 29}
{"id": "check-regex-dos", "rule": "rules:\n- id: check-regex-dos\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $X\n        - pattern-inside: |\n            def $F(...,$X,...)\n              ...\n            end\n      - patterns:\n        - pattern: $X\n        - pattern-inside: |\n            params[...]\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            $RECORD.$Y\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            /...#{...}.../\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            Regexp.new(...)\n  message: >-\n    Found a potentially user-controllable argument in the construction of a regular\n    expressions.\n    This may result in excessive resource consumption when applied to certain inputs,\n    or when the user is allowed to control the match target.\n    Avoid allowing users to specify regular expressions processed by the server.\n    If you must support user-controllable input in a regular expression, use an allow-list\n    to restrict the expressions users may supply to limit catastrophic backtracking.\n  languages:\n  - ruby\n  severity: ERROR\n", "failed_tests": ["def some_rails_controller\n  foo = Record.read_attribute(\"some_attribute\")\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend"], "failed_type": "fn", "testsuite_a": "def some_func(arg1,arg2,arg3)\n    #ruleid: check-regex-dos\n    /#{arg1}/i =~ arg2\nend\n\ndef some_func2(arg1,arg2,arg3)\n    #ruleid: check-regex-dos\n    Regexp.new(arg3).match(\"some_string\")\nend\n\ndef some_rails_controller\n    foo = params[:some_regex]\n    #ruleid: check-regex-dos\n    Regexp.new(foo).match(\"some_string\")\nend\n\ndef use_params_in_regex\n  #ruleid: check-regex-dos\n  @x = something.match /#{params[:x]}/\nend\n\ndef regex_on_params\n  #ok: check-regex-dos\n  @x = params[:x].match /foo/\nend", "testsuite_b": "def some_rails_controller\n  foo = params[:some_regex]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef some_rails_controller\n  foo = Record[something]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef some_rails_controller\n  foo = Record.read_attribute(\"some_attribute\")\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend\n\ndef use_params_in_regex\n#ruleid: check-regex-dos\n@x = something.match /#{params[:x]}/\nend\n\ndef regex_on_params\n#ok: check-regex-dos\n@x = params[:x].match /foo/\nend", "ground_truth": "rules:\n- id: check-regex-dos\n  mode: taint\n  pattern-sources:\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            cookies[...]\n        - patterns:\n          - pattern: |\n              cookies. ... .$PROPERTY[...]\n          - metavariable-regex:\n              metavariable: $PROPERTY\n              regex: (?!signed|encrypted)\n        - pattern: |\n            params[...]\n        - pattern: |\n            request.env[...]\n        - patterns:\n          - pattern: $Y\n          - pattern-either:\n            - pattern-inside: |\n                $RECORD.read_attribute($Y)\n            - pattern-inside: |\n                $RECORD[$Y]\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            /...#{...}.../\n      - patterns:\n        - pattern: $Y\n        - pattern-inside: |\n            Regexp.new(...)\n  message: >-\n    Found a potentially user-controllable argument in the construction of a regular expressions.\n    This may result in excessive resource consumption when applied to certain inputs, or when the user is allowed to control the match target.\n    Avoid allowing users to specify regular expressions processed by the server.\n    If you must support user-controllable input in a regular expression, use an allow-list to restrict the expressions users may supply to limit catastrophic backtracking.\n  languages:\n  - ruby\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_regex_dos.rb\n    category: security\n    cwe: 'CWE-1333: Inefficient Regular Expression Complexity'\n    technology:\n    - ruby\n    - rails\n    references:\n    - https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n", "rule_path": "extend_dataset/4077d9ab/before/check-regex-dos.yaml", "test_path": "extend_dataset/4077d9ab/after/check-regex-dos.rb", "category": "historical", "splited_testsuite_b": ["def some_rails_controller\n  foo = params[:some_regex]\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend", "def use_params_in_regex\n#ruleid: check-regex-dos\n@x = something.match /#{params[:x]}/\nend", "def regex_on_params\n#ok: check-regex-dos\n@x = params[:x].match /foo/\nend", "def some_rails_controller\n  foo = Record.read_attribute(\"some_attribute\")\n  #ruleid: check-regex-dos\n  Regexp.new(foo).match(\"some_string\")\nend"], "actual": [true, true, false, false], "expected": [true, true, false, true], "index": 111, "commit_message": "scope regex DOS to ActiveRecord-like behavior and cookie/params, fix tests", "commit_date_str": "2022-07-14 13:02:44 -0700", "leaf_count": 10, "line_count": 29}
{"id": "dangerous-subprocess-use", "rule": "rules:\n- id: dangerous-subprocess-use\n  patterns:\n  - pattern-not: subprocess.$FUNC(\"...\", ...)\n  - pattern-not: subprocess.$FUNC([...], ...)\n  - pattern: subprocess.$FUNC(...)\n  message: |\n    Detected subprocess function '$FUNC' without a static string. Audit the use of this\n    call to ensure it is not vulnerable to a command injection. You may consider using\n    shlex.escape.\n  languages: [python]\n  severity: WARNING\n", "failed_tests": ["# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nraise subprocess.CalledProcessError(\"{}\".format(\"foo\"))"], "failed_type": "fp", "testsuite_a": "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok\nsubprocess.call(\"echo 'hello'\")\n\n# ok\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n", "testsuite_b": "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nsubprocess.call(\"echo 'hello'\")\n\n# ok:dangerous-subprocess-use\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n# ok:dangerous-subprocess-use\nraise subprocess.CalledProcessError(\"{}\".format(\"foo\"))\n\n# ok:dangerous-subprocess-use\nraise subprocess.SubprocessError(\"{}\".format(\"foo\"))\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n", "ground_truth": "rules:\n- id: dangerous-subprocess-use\n  patterns:\n  - pattern-not: subprocess.$FUNC(\"...\", ...)\n  - pattern-not: subprocess.$FUNC([...], ...)\n  - pattern-not: subprocess.CalledProcessError(...)\n  - pattern-not: subprocess.SubprocessError(...)\n  - pattern: subprocess.$FUNC(...)\n  message: |\n    Detected subprocess function '$FUNC' without a static string. Audit the use of this\n    call to ensure it is not vulnerable to a command injection. You may consider using\n    shlex.escape.\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    references:\n    - https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess\n    - https://docs.python.org/3/library/subprocess.html\n    - https://docs.python.org/3/library/shlex.html\n  languages: [python]\n  severity: WARNING\n", "rule_path": "extend_dataset/38b71d43/before/dangerous-subprocess-use.yaml", "test_path": "extend_dataset/38b71d43/after/dangerous-subprocess-use.py", "category": "historical", "splited_testsuite_b": ["# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nsubprocess.call(\"echo 'hello'\")", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nraise subprocess.CalledProcessError(\"{}\".format(\"foo\"))"], "actual": [false, false, true, true, true, true, true], "expected": [false, false, true, true, true, true, false], "index": 112, "commit_message": "Avoid subprocess false positive (#936)", "commit_date_str": "2020-10-21 10:23:48 -0600", "leaf_count": 3, "line_count": 4}
{"id": "dangerous-subprocess-use", "rule": "rules:\n- id: dangerous-subprocess-use\n  patterns:\n  - pattern-not: subprocess.$FUNC(\"...\", ...)\n  - pattern-not: subprocess.$FUNC([...], ...)\n  - pattern: subprocess.$FUNC(...)\n  message: |\n    Detected subprocess function '$FUNC' without a static string. Audit the use of this\n    call to ensure it is not vulnerable to a command injection. You may consider using\n    shlex.escape.\n  languages: [python]\n  severity: WARNING\n", "failed_tests": ["# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nraise subprocess.SubprocessError(\"{}\".format(\"foo\"))"], "failed_type": "fp", "testsuite_a": "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok\nsubprocess.call(\"echo 'hello'\")\n\n# ok\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n", "testsuite_b": "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nsubprocess.call(\"echo 'hello'\")\n\n# ok:dangerous-subprocess-use\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n# ok:dangerous-subprocess-use\nraise subprocess.CalledProcessError(\"{}\".format(\"foo\"))\n\n# ok:dangerous-subprocess-use\nraise subprocess.SubprocessError(\"{}\".format(\"foo\"))\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n", "ground_truth": "rules:\n- id: dangerous-subprocess-use\n  patterns:\n  - pattern-not: subprocess.$FUNC(\"...\", ...)\n  - pattern-not: subprocess.$FUNC([...], ...)\n  - pattern-not: subprocess.CalledProcessError(...)\n  - pattern-not: subprocess.SubprocessError(...)\n  - pattern: subprocess.$FUNC(...)\n  message: |\n    Detected subprocess function '$FUNC' without a static string. Audit the use of this\n    call to ensure it is not vulnerable to a command injection. You may consider using\n    shlex.escape.\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    references:\n    - https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess\n    - https://docs.python.org/3/library/subprocess.html\n    - https://docs.python.org/3/library/shlex.html\n  languages: [python]\n  severity: WARNING\n", "rule_path": "extend_dataset/38b71d43/before/dangerous-subprocess-use.yaml", "test_path": "extend_dataset/38b71d43/after/dangerous-subprocess-use.py", "category": "historical", "splited_testsuite_b": ["# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nsubprocess.call(\"echo 'hello'\")", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nraise subprocess.SubprocessError(\"{}\".format(\"foo\"))"], "actual": [false, false, true, true, true, true, true], "expected": [false, false, true, true, true, true, false], "index": 113, "commit_message": "Avoid subprocess false positive (#936)", "commit_date_str": "2020-10-21 10:23:48 -0600", "leaf_count": 3, "line_count": 4}
{"id": "detect-child-process", "rule": "rules:\n- id: detect-child-process\n  message: >-\n    Detected non-literal calls to $EXEC(). This could lead to a command\n    injection vulnerability.\n  patterns:\n  - pattern-either:\n    - pattern: exec($CMD,...)\n    - pattern: execSync($CMD,...)\n    - pattern: spawn($CMD,...)\n    - pattern: spawnSync($CMD,...)\n  - pattern-not-inside: $EXEC(\"...\",...)\n  - pattern-not-inside: $EXEC([\"...\",...],...)\n  - pattern-not-inside: |\n      $CMD = \"...\"\n      ...\n  - pattern-not-inside: |\n      $CMD = [\"...\",...]\n      ...\n  severity: ERROR\n  languages:\n  - javascript\n  - typescript\n", "failed_tests": ["const parentMachine = createMachine({\n  id: 'parent',\n  initial: 'waiting',\n  context: {\n    localOne: null\n  },\n  states: {\n    waiting: {\n      entry: assign({\n        // ok:detect-child-process\n        localOne: () => spawn(remoteMachine)  // <--\n      }),\n      on: {\n        'LOCAL.WAKE': {\n          actions: send({ type: 'WAKE' }, { to: (context) => context.localOne })\n        },\n        'REMOTE.ONLINE': { target: 'connected' }\n      }\n    },\n    connected: {}\n  }\n});"], "failed_type": "fp", "testsuite_a": "const {exec, spawnSync} = require('child_process');\n\n// ruleid:detect-child-process\nexec(`cat *.js ${userInput}| wc -l`, (error, stdout, stderr) => {\n  console.log(stdout)\n});\n\n// ruleid:detect-child-process\nspawnSync(userInput);\n\n// ok:detect-child-process\nexec('ls')\n", "testsuite_b": "const {exec, spawnSync} = require('child_process');\n\n// ruleid:detect-child-process\nexec(`cat *.js ${userInput}| wc -l`, (error, stdout, stderr) => {\n  console.log(stdout)\n});\n\n// ruleid:detect-child-process\nspawnSync(userInput);\n\n// ok:detect-child-process\nexec('ls')\n\nconst parentMachine = createMachine({\n  id: 'parent',\n  initial: 'waiting',\n  context: {\n    localOne: null\n  },\n  states: {\n    waiting: {\n      entry: assign({\n        // ok:detect-child-process\n        localOne: () => spawn(remoteMachine)  // <--\n      }),\n      on: {\n        'LOCAL.WAKE': {\n          actions: send({ type: 'WAKE' }, { to: (context) => context.localOne })\n        },\n        'REMOTE.ONLINE': { target: 'connected' }\n      }\n    },\n    connected: {}\n  }\n});\n", "ground_truth": "rules:\n  - id: detect-child-process\n    metadata:\n      cwe: \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n      owasp: \"A01:2017 - Injection\"\n      source-rule-url: https://github.com/nodesecurity/eslint-plugin-security/blob/master/rules/detect-child-process.js\n      category: security\n      technology:\n        - javascript\n      references:\n      - https://nodejs.org/api/child_process.html\n    message: >-\n      Detected non-literal calls to $EXEC(). This could lead to a command\n      injection vulnerability.\n    patterns:\n      - pattern-either:\n          - pattern: child_process.exec($CMD,...)\n          - pattern: child_process.execSync($CMD,...)\n          - pattern: child_process.spawn($CMD,...)\n          - pattern: child_process.spawnSync($CMD,...)\n      - pattern-not-inside: child_process.$EXEC(\"...\",...)\n      - pattern-not-inside: child_process.$EXEC([\"...\",...],...)\n      - pattern-not-inside: |\n          $CMD = \"...\"\n          ...\n      - pattern-not-inside: |\n          $CMD = [\"...\",...]\n          ...\n    severity: ERROR\n    languages:\n      - javascript\n      - typescript\n", "rule_path": "extend_dataset/4cecab3d/before/detect-child-process.yaml", "test_path": "extend_dataset/4cecab3d/after/detect-child-process.js", "category": "historical", "splited_testsuite_b": ["const {exec, spawnSync} = require('child_process');\n\n// ruleid:detect-child-process\nexec(`cat *.js ${userInput}| wc -l`, (error, stdout, stderr) => {\n  console.log(stdout)\n});", "const {exec, spawnSync} = require('child_process');\n\n// ruleid:detect-child-process\nspawnSync(userInput);", "const {exec, spawnSync} = require('child_process');\n\n// ok:detect-child-process\nexec('ls')", "const parentMachine = createMachine({\n  id: 'parent',\n  initial: 'waiting',\n  context: {\n    localOne: null\n  },\n  states: {\n    waiting: {\n      entry: assign({\n        // ok:detect-child-process\n        localOne: () => spawn(remoteMachine)  // <--\n      }),\n      on: {\n        'LOCAL.WAKE': {\n          actions: send({ type: 'WAKE' }, { to: (context) => context.localOne })\n        },\n        'REMOTE.ONLINE': { target: 'connected' }\n      }\n    },\n    connected: {}\n  }\n});"], "actual": [true, true, false, true], "expected": [true, true, false, false], "index": 114, "commit_message": "Merge pull request #2199 from returntocorp/fix-detect-child-process", "commit_date_str": "2022-07-06 10:28:26 -0700", "leaf_count": 8, "line_count": 18}
{"id": "dangerous-subprocess-use", "rule": "rules:\n- id: dangerous-subprocess-use\n  patterns:\n  - pattern-not: subprocess.$FUNC(\"...\", ...)\n  - pattern: subprocess.$FUNC(...)\n  message: |\n    Detected subprocess function '$FUNC' without a static string. Audit the use of this\n    call to ensure it is not vulnerable to a command injection. You may consider using\n    shlex.escape.\n  languages: [python]\n  severity: WARNING\n", "failed_tests": ["# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok: dangerous-subprocess-use\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])"], "failed_type": "fp", "testsuite_a": "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\nsubprocess.call(\"echo 'hello'\")\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)", "testsuite_b": "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok\nsubprocess.call(\"echo 'hello'\")\n\n# ok\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n", "ground_truth": "rules:\n- id: dangerous-subprocess-use\n  patterns:\n  - pattern-not: subprocess.$FUNC(\"...\", ...)\n  - pattern-not: subprocess.$FUNC([...], ...)\n  - pattern: subprocess.$FUNC(...)\n  message: |\n    Detected subprocess function '$FUNC' without a static string. Audit the use of this\n    call to ensure it is not vulnerable to a command injection. You may consider using\n    shlex.escape.\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    references:\n    - https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess\n    - https://docs.python.org/3/library/subprocess.html\n    - https://docs.python.org/3/library/shlex.html\n  languages: [python]\n  severity: WARNING\n", "rule_path": "extend_dataset/d3c21381/before/dangerous-subprocess-use.yaml", "test_path": "extend_dataset/d3c21381/after/dangerous-subprocess-use.py", "category": "historical", "splited_testsuite_b": ["# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok: dangerous-subprocess-use\nsubprocess.call(\"echo 'hello'\")", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok: dangerous-subprocess-use\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])"], "actual": [false, true, true, true, true, true], "expected": [false, true, true, true, true, false], "index": 115, "commit_message": "New Published Rules - python.lang.security.audit.dangerous-subprocess-use (#756)", "commit_date_str": "2020-07-30 11:48:36 -0700", "leaf_count": 2, "line_count": 3}
{"id": "echoed-request", "rule": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  pattern-sanitizers:\n  - pattern: $X = $ANYFUNC(...);\n  - patterns:\n    - pattern-inside: echo <... $ANYFUNC(...) ...>;\n    - pattern: $ANYFUNC(...)\n", "failed_tests": ["```php\n<?php\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n```"], "failed_type": "fp", "testsuite_a": "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        $tpl = createSafeTemplate($name);\n        // ok: echoed-request\n        echo \"Hello :\".$tpl;\n    }\n}", "testsuite_b": "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        $tpl = createSafeTemplate($name);\n        // ok: echoed-request\n        echo \"Hello :\".$tpl;\n    }\n}\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n", "ground_truth": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  pattern-sanitizers:\n  - pattern: isset(...)\n  - pattern: empty(...)\n  - pattern: $X = $ANYFUNC(...);\n  - patterns:\n    - pattern-inside: echo <... $ANYFUNC(...) ...>;\n    - pattern: $ANYFUNC(...)\n  metadata:\n    technology:\n    - php\n    cwe:\n    - \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp:\n    - A07:2017 - Cross-Site Scripting (XSS)\n    - A03:2021 - Injection\n    category: security\n    references:\n    - https://www.php.net/manual/en/function.htmlentities.php\n    - https://www.php.net/manual/ru/reserved.variables.request.php\n    - https://www.php.net/manual/ru/reserved.variables.post.php\n    - https://www.php.net/manual/ru/reserved.variables.get.php\n    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: MEDIUM\n    confidence: MEDIUM\n", "rule_path": "extend_dataset/40f979b7/before/echoed-request.yaml", "test_path": "extend_dataset/40f979b7/after/echoed-request.php", "category": "historical", "splited_testsuite_b": ["```php\n<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n```", "```php\n<?php\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n```", "```php\n<?php\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n```", "```php\n<?php\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n```", "```php\n<?php\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n```", "```php\n<?php\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n```", "```php\n<?php\n\nfunction doOK3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        $tpl = createSafeTemplate($name);\n        // ok: echoed-request\n        echo \"Hello :\".$tpl;\n    }\n}\n```", "```php\n<?php\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n```", "```php\n<?php\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n```"], "actual": [true, true, true, true, false, false, false, false, true], "expected": [true, true, true, true, false, false, false, false, false], "index": 116, "commit_message": "Mark isset() and empty() as sanitizers", "commit_date_str": "2023-02-17 13:01:58 +0100", "leaf_count": 7, "line_count": 11}
{"id": "user-exec", "rule": "rules:\n- id: user-exec\n  message: >-\n    Found user data in a call to 'exec'. This is extremely dangerous because it can\n    enable an attacker to\n    execute arbitrary remote code on the system. Instead, refactor your code to not\n    use 'eval' and\n    instead use a safe library for the specific functionality you need.\n  patterns:\n  - pattern-inside: |\n      def $F(...):\n        ...\n  - pattern-either:\n    - pattern: exec(..., request.$W.get(...), ...)\n    - pattern: |\n        $V = request.$W.get(...)\n        ...\n        exec(..., $V, ...)\n    - pattern: exec(..., request.$W(...), ...)\n    - pattern: |\n        $V = request.$W(...)\n        ...\n        exec(..., $V, ...)\n    - pattern: exec(..., request.$W[...], ...)\n    - pattern: |\n        $V = request.$W[...]\n        ...\n        exec(..., $V, ...)\n  languages: [python]\n  severity: WARNING\n", "failed_tests": ["import asyncio\nfrom textwrap import dedent\n\nasync def run_exec_inline_get_method_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST.get(\"code\"))"], "failed_type": "fn", "testsuite_a": "from textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))\n", "testsuite_b": "import asyncio\nfrom textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))\n\nasync def run_exec_inline_get_method_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST.get(\"code\"))\n\nasync def run_exec_inline_dict_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST[\"code\"])\n\nasync def run_exec_by_get_method_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST.get(\"code\")\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)\n\nasync def run_exec_by_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST[\"code\"]\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)\n", "ground_truth": "rules:\n  - id: user-exec\n    message: >-\n      Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to\n      execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and\n      instead use a safe library for the specific functionality you need.\n    metadata:\n      cwe: \"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"\n      owasp: \"A1: Injection\"\n      category: security\n      technology:\n        - django\n      references:\n        - https://owasp.org/www-community/attacks/Code_Injection\n    patterns:\n      - pattern-inside: |\n          def $F(...):\n            ...\n      - pattern-either:\n          - pattern: exec(..., request.$W.get(...), ...)\n          - pattern: |\n              $V = request.$W.get(...)\n              ...\n              exec(..., $V, ...)\n          - pattern: exec(..., request.$W(...), ...)\n          - pattern: |\n              $V = request.$W(...)\n              ...\n              exec(..., $V, ...)\n          - pattern: exec(..., request.$W[...], ...)\n          - pattern: |\n              $V = request.$W[...]\n              ...\n              exec(..., $V, ...)\n          - pattern: |\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, request.$W[...])\n          - pattern: |\n              $V = request.$W[...]\n              ...\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, $V)\n          - pattern: |\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, request.$W.get(...))\n          - pattern: |\n              $V = request.$W.get(...)\n              ...\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, $V)\n\n    languages: [python]\n    severity: WARNING\n", "rule_path": "extend_dataset/82a9daa5/before/user-exec.yaml", "test_path": "extend_dataset/82a9daa5/after/user-exec.py", "category": "historical", "splited_testsuite_b": ["import asyncio\nfrom textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)", "import asyncio\nfrom textwrap import dedent\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))", "import asyncio\nfrom textwrap import dedent\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])", "import asyncio\nfrom textwrap import dedent\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))", "import asyncio\nfrom textwrap import dedent\n\nasync def run_exec_inline_get_method_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST.get(\"code\"))"], "actual": [true, true, true, false, false], "expected": [true, true, true, false, true], "index": 117, "commit_message": "Add running exec async rules (#2320)", "commit_date_str": "2022-08-22 14:57:58 -0500", "leaf_count": 7, "line_count": 27}
{"id": "user-exec", "rule": "rules:\n- id: user-exec\n  message: >-\n    Found user data in a call to 'exec'. This is extremely dangerous because it can\n    enable an attacker to\n    execute arbitrary remote code on the system. Instead, refactor your code to not\n    use 'eval' and\n    instead use a safe library for the specific functionality you need.\n  patterns:\n  - pattern-inside: |\n      def $F(...):\n        ...\n  - pattern-either:\n    - pattern: exec(..., request.$W.get(...), ...)\n    - pattern: |\n        $V = request.$W.get(...)\n        ...\n        exec(..., $V, ...)\n    - pattern: exec(..., request.$W(...), ...)\n    - pattern: |\n        $V = request.$W(...)\n        ...\n        exec(..., $V, ...)\n    - pattern: exec(..., request.$W[...], ...)\n    - pattern: |\n        $V = request.$W[...]\n        ...\n        exec(..., $V, ...)\n  languages: [python]\n  severity: WARNING\n", "failed_tests": ["import asyncio\nfrom textwrap import dedent\n\nasync def run_exec_inline_dict_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST[\"code\"])"], "failed_type": "fn", "testsuite_a": "from textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))\n", "testsuite_b": "import asyncio\nfrom textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))\n\nasync def run_exec_inline_get_method_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST.get(\"code\"))\n\nasync def run_exec_inline_dict_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST[\"code\"])\n\nasync def run_exec_by_get_method_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST.get(\"code\")\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)\n\nasync def run_exec_by_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST[\"code\"]\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)\n", "ground_truth": "rules:\n  - id: user-exec\n    message: >-\n      Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to\n      execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and\n      instead use a safe library for the specific functionality you need.\n    metadata:\n      cwe: \"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"\n      owasp: \"A1: Injection\"\n      category: security\n      technology:\n        - django\n      references:\n        - https://owasp.org/www-community/attacks/Code_Injection\n    patterns:\n      - pattern-inside: |\n          def $F(...):\n            ...\n      - pattern-either:\n          - pattern: exec(..., request.$W.get(...), ...)\n          - pattern: |\n              $V = request.$W.get(...)\n              ...\n              exec(..., $V, ...)\n          - pattern: exec(..., request.$W(...), ...)\n          - pattern: |\n              $V = request.$W(...)\n              ...\n              exec(..., $V, ...)\n          - pattern: exec(..., request.$W[...], ...)\n          - pattern: |\n              $V = request.$W[...]\n              ...\n              exec(..., $V, ...)\n          - pattern: |\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, request.$W[...])\n          - pattern: |\n              $V = request.$W[...]\n              ...\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, $V)\n          - pattern: |\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, request.$W.get(...))\n          - pattern: |\n              $V = request.$W.get(...)\n              ...\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, $V)\n\n    languages: [python]\n    severity: WARNING\n", "rule_path": "extend_dataset/82a9daa5/before/user-exec.yaml", "test_path": "extend_dataset/82a9daa5/after/user-exec.py", "category": "historical", "splited_testsuite_b": ["import asyncio\nfrom textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)", "import asyncio\nfrom textwrap import dedent\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))", "import asyncio\nfrom textwrap import dedent\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])", "import asyncio\nfrom textwrap import dedent\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))", "import asyncio\nfrom textwrap import dedent\n\nasync def run_exec_inline_dict_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST[\"code\"])"], "actual": [true, true, true, false, false], "expected": [true, true, true, false, true], "index": 118, "commit_message": "Add running exec async rules (#2320)", "commit_date_str": "2022-08-22 14:57:58 -0500", "leaf_count": 7, "line_count": 27}
{"id": "user-exec", "rule": "rules:\n- id: user-exec\n  message: >-\n    Found user data in a call to 'exec'. This is extremely dangerous because it can\n    enable an attacker to\n    execute arbitrary remote code on the system. Instead, refactor your code to not\n    use 'eval' and\n    instead use a safe library for the specific functionality you need.\n  patterns:\n  - pattern-inside: |\n      def $F(...):\n        ...\n  - pattern-either:\n    - pattern: exec(..., request.$W.get(...), ...)\n    - pattern: |\n        $V = request.$W.get(...)\n        ...\n        exec(..., $V, ...)\n    - pattern: exec(..., request.$W(...), ...)\n    - pattern: |\n        $V = request.$W(...)\n        ...\n        exec(..., $V, ...)\n    - pattern: exec(..., request.$W[...], ...)\n    - pattern: |\n        $V = request.$W[...]\n        ...\n        exec(..., $V, ...)\n  languages: [python]\n  severity: WARNING\n", "failed_tests": ["import asyncio\nfrom textwrap import dedent\n\nasync def run_exec_by_get_method_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST.get(\"code\")\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)"], "failed_type": "fn", "testsuite_a": "from textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))\n", "testsuite_b": "import asyncio\nfrom textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))\n\nasync def run_exec_inline_get_method_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST.get(\"code\"))\n\nasync def run_exec_inline_dict_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST[\"code\"])\n\nasync def run_exec_by_get_method_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST.get(\"code\")\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)\n\nasync def run_exec_by_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST[\"code\"]\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)\n", "ground_truth": "rules:\n  - id: user-exec\n    message: >-\n      Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to\n      execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and\n      instead use a safe library for the specific functionality you need.\n    metadata:\n      cwe: \"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"\n      owasp: \"A1: Injection\"\n      category: security\n      technology:\n        - django\n      references:\n        - https://owasp.org/www-community/attacks/Code_Injection\n    patterns:\n      - pattern-inside: |\n          def $F(...):\n            ...\n      - pattern-either:\n          - pattern: exec(..., request.$W.get(...), ...)\n          - pattern: |\n              $V = request.$W.get(...)\n              ...\n              exec(..., $V, ...)\n          - pattern: exec(..., request.$W(...), ...)\n          - pattern: |\n              $V = request.$W(...)\n              ...\n              exec(..., $V, ...)\n          - pattern: exec(..., request.$W[...], ...)\n          - pattern: |\n              $V = request.$W[...]\n              ...\n              exec(..., $V, ...)\n          - pattern: |\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, request.$W[...])\n          - pattern: |\n              $V = request.$W[...]\n              ...\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, $V)\n          - pattern: |\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, request.$W.get(...))\n          - pattern: |\n              $V = request.$W.get(...)\n              ...\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, $V)\n\n    languages: [python]\n    severity: WARNING\n", "rule_path": "extend_dataset/82a9daa5/before/user-exec.yaml", "test_path": "extend_dataset/82a9daa5/after/user-exec.py", "category": "historical", "splited_testsuite_b": ["import asyncio\nfrom textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)", "import asyncio\nfrom textwrap import dedent\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))", "import asyncio\nfrom textwrap import dedent\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])", "import asyncio\nfrom textwrap import dedent\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))", "import asyncio\nfrom textwrap import dedent\n\nasync def run_exec_by_get_method_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST.get(\"code\")\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)"], "actual": [true, true, true, false, false], "expected": [true, true, true, false, true], "index": 119, "commit_message": "Add running exec async rules (#2320)", "commit_date_str": "2022-08-22 14:57:58 -0500", "leaf_count": 7, "line_count": 27}
{"id": "user-exec", "rule": "rules:\n- id: user-exec\n  message: >-\n    Found user data in a call to 'exec'. This is extremely dangerous because it can\n    enable an attacker to\n    execute arbitrary remote code on the system. Instead, refactor your code to not\n    use 'eval' and\n    instead use a safe library for the specific functionality you need.\n  patterns:\n  - pattern-inside: |\n      def $F(...):\n        ...\n  - pattern-either:\n    - pattern: exec(..., request.$W.get(...), ...)\n    - pattern: |\n        $V = request.$W.get(...)\n        ...\n        exec(..., $V, ...)\n    - pattern: exec(..., request.$W(...), ...)\n    - pattern: |\n        $V = request.$W(...)\n        ...\n        exec(..., $V, ...)\n    - pattern: exec(..., request.$W[...], ...)\n    - pattern: |\n        $V = request.$W[...]\n        ...\n        exec(..., $V, ...)\n  languages: [python]\n  severity: WARNING\n", "failed_tests": ["import asyncio\nfrom textwrap import dedent\n\nasync def run_exec_by_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST[\"code\"]\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)"], "failed_type": "fn", "testsuite_a": "from textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))\n", "testsuite_b": "import asyncio\nfrom textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))\n\nasync def run_exec_inline_get_method_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST.get(\"code\"))\n\nasync def run_exec_inline_dict_by_event_loop(request):\n    # ruleid: user-exec\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, request.POST[\"code\"])\n\nasync def run_exec_by_get_method_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST.get(\"code\")\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)\n\nasync def run_exec_by_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST[\"code\"]\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)\n", "ground_truth": "rules:\n  - id: user-exec\n    message: >-\n      Found user data in a call to 'exec'. This is extremely dangerous because it can enable an attacker to\n      execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and\n      instead use a safe library for the specific functionality you need.\n    metadata:\n      cwe: \"CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')\"\n      owasp: \"A1: Injection\"\n      category: security\n      technology:\n        - django\n      references:\n        - https://owasp.org/www-community/attacks/Code_Injection\n    patterns:\n      - pattern-inside: |\n          def $F(...):\n            ...\n      - pattern-either:\n          - pattern: exec(..., request.$W.get(...), ...)\n          - pattern: |\n              $V = request.$W.get(...)\n              ...\n              exec(..., $V, ...)\n          - pattern: exec(..., request.$W(...), ...)\n          - pattern: |\n              $V = request.$W(...)\n              ...\n              exec(..., $V, ...)\n          - pattern: exec(..., request.$W[...], ...)\n          - pattern: |\n              $V = request.$W[...]\n              ...\n              exec(..., $V, ...)\n          - pattern: |\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, request.$W[...])\n          - pattern: |\n              $V = request.$W[...]\n              ...\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, $V)\n          - pattern: |\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, request.$W.get(...))\n          - pattern: |\n              $V = request.$W.get(...)\n              ...\n              loop = asyncio.get_running_loop()\n              ...\n              await loop.run_in_executor(None, exec, $V)\n\n    languages: [python]\n    severity: WARNING\n", "rule_path": "extend_dataset/82a9daa5/before/user-exec.yaml", "test_path": "extend_dataset/82a9daa5/after/user-exec.py", "category": "historical", "splited_testsuite_b": ["import asyncio\nfrom textwrap import dedent\n\ndef unsafe(request):\n    # ruleid: user-exec\n    code = request.POST.get('code')\n    print(\"something\")\n    exec(code)", "import asyncio\nfrom textwrap import dedent\n\ndef unsafe_inline(request):\n    # ruleid: user-exec\n    exec(request.GET.get('code'))", "import asyncio\nfrom textwrap import dedent\n\ndef unsafe_dict(request):\n    # ruleid: user-exec\n    exec(request.POST['code'])", "import asyncio\nfrom textwrap import dedent\n\ndef safe(request):\n    # ok: user-exec\n    code = \"\"\"\n    print('hello')\n    \"\"\"\n    exec(dedent(code))", "import asyncio\nfrom textwrap import dedent\n\nasync def run_exec_by_event_loop(request):\n    # ruleid: user-exec\n    code = request.POST[\"code\"]\n    loop = asyncio.get_running_loop()\n    await loop.run_in_executor(None, exec, code)"], "actual": [true, true, true, false, false], "expected": [true, true, true, false, true], "index": 120, "commit_message": "Add running exec async rules (#2320)", "commit_date_str": "2022-08-22 14:57:58 -0500", "leaf_count": 7, "line_count": 27}
{"id": "insufficient-postmessage-origin-validation", "rule": "rules:\n- id: insufficient-postmessage-origin-validation\n  patterns:\n  - pattern: |\n      window.addEventListener(...)\n  - pattern-not: |\n      window.addEventListener(..., function($OBJECT){ if ($OBJ.origin == $X) {\n                  ...\n              } })\n  - pattern-not: |\n      window.addEventListener(..., function($OBJECT){ if ($REGEX.test($OBJECT.origin)){\n          ...\n      } })\n  - pattern-not: |\n      window.addEventListener(..., function($OBJECT){ if ($OBJ.origin !== $X) {\n                  ...\n              } })\n  message: |\n    No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).\n  languages:\n  - javascript\n  - typescript\n  severity: WARNING\n", "failed_tests": ["// ok: insufficient-postmessage-origin-validation\nfunction normalHandler(evt) {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Normal function handler with origin validation');\n  }\n};\n\nwindow.addEventListener('message', normalHandler, false);"], "failed_type": "fp", "testsuite_a": "//ruleid:insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", receiveMessage, false);\n\n\n//addEventListener Safe Usage (Origin Checked)\nconst globalRegex = RegExp('/^http://www.examplesender.com$/', 'g');\nwindow.addEventListener(\"message\", function(message){\n    if(globalRegex.test(message.origin)){\n         console.log(message.data);\n   }\n});\n\n//addEventListener Safe Usage (Origin Checked)\nwindow.addEventListener(\"message\", function(message){\nif (event.origin !== \"http://example.com\") {\n    return;\n}\n});\n\n//addEventListener Safe Usage (Origin Checked)\nwindow.addEventListener(\"message\", function(message){\nif (event.origin == \"http://example.com\") {\n    alert(\"Works\");\n}\n});\n", "testsuite_b": "// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", function (evt) {\n  console.log('Inline without origin check!');\n});\n\nfunction oldHandler(evt) {\n  console.log('Normal function handler without origin check!');\n};\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", oldHandler, false);\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', (evt) => {\n  console.log('Inline arrow function without origin check!');\n});\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', evt => {\n  console.log('Inline arrow function without parenthesis & origin check!');\n});\n\nconst handler = (evt) => {\n  console.log('Arrow function handler without origin check!');\n};\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", handler, false);\n\n// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", function (evt) {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Normal inline function declaration with origin validation');\n  }\n});\n\n// ok: insufficient-postmessage-origin-validation\nfunction normalHandler(evt) {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Normal function handler with origin validation');\n  }\n};\n\nwindow.addEventListener('message', normalHandler, false);\n\n// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', (evt) => {\n  if (evt.origin !== \"http://example.com\") {\n    console.log('Inline arrow function declaration with origin validation');\n  }\n});\n\n// ok: insufficient-postmessage-origin-validation\nconst arrowHandler = (evt) => {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Arrow function handler with origin validation');\n  }\n};\n\nwindow.addEventListener('message', arrowHandler, false);\n\nconst globalRegex = RegExp('/^http://www\\.example\\.com$/', 'g');\n\n// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", (evt) => {\n  if (globalRegex.test(evt.origin)) {\n    console.log(message.data);\n  }\n});\n", "ground_truth": "rules:\n- id: insufficient-postmessage-origin-validation\n  pattern-either:\n  - patterns:\n    - pattern: |\n        window.addEventListener('message', $FUNC, ...)\n    - metavariable-pattern:\n        metavariable: $FUNC\n        patterns:\n        - pattern: |\n            function($OBJ) { ... }\n        - pattern-not: |\n            function($OBJ) { ... if (<... $OBJ.origin ...>) { ... } ... }\n  - patterns:\n    - pattern-either:\n      - pattern-inside: |\n          function $FNAME($OBJ) { $CONTEXT }\n          ...\n      - pattern-inside: |\n          $FNAME = (...) => { $CONTEXT }\n          ...\n    - pattern: |\n        window.addEventListener('message', $FNAME,...)\n    - metavariable-pattern:\n        metavariable: $CONTEXT\n        patterns:\n        - pattern-not: |\n            ... if (<... $OBJ.origin ...>) { ... } ...\n  message: |\n    No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).\n  languages:\n  - javascript\n  - typescript\n  severity: WARNING\n  metadata:\n    owasp: 'A3: Sensitive Data Exposure'\n    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'\n    category: security\n    technology:\n    - browser\n", "rule_path": "extend_dataset/dfd3f055/before/insufficient-postmessage-origin-validation.yaml", "test_path": "extend_dataset/dfd3f055/after/insufficient-postmessage-origin-validation.js", "category": "historical", "splited_testsuite_b": ["// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", function (evt) {\n  console.log('Inline without origin check!');\n});", "function oldHandler(evt) {\n  console.log('Normal function handler without origin check!');\n};\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", oldHandler, false);", "// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', (evt) => {\n  console.log('Inline arrow function without origin check!');\n});", "// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', evt => {\n  console.log('Inline arrow function without parenthesis & origin check!');\n});", "const handler = (evt) => {\n  console.log('Arrow function handler without origin check!');\n};\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", handler, false);", "// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", function (evt) {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Normal inline function declaration with origin validation');\n  }\n});", "// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', (evt) => {\n  if (evt.origin !== \"http://example.com\") {\n    console.log('Inline arrow function declaration with origin validation');\n  }\n});", "const globalRegex = RegExp('/^http://www\\.example\\.com$/', 'g');\n\n// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", (evt) => {\n  if (globalRegex.test(evt.origin)) {\n    console.log(message.data);\n  }\n});", "// ok: insufficient-postmessage-origin-validation\nfunction normalHandler(evt) {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Normal function handler with origin validation');\n  }\n};\n\nwindow.addEventListener('message', normalHandler, false);"], "actual": [true, true, true, true, true, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false], "index": 121, "commit_message": "Expand rule to cover a broader set of origin validation scenarios (#1415)", "commit_date_str": "2021-08-12 14:11:25 +1000", "leaf_count": 4, "line_count": 10}
{"id": "insufficient-postmessage-origin-validation", "rule": "rules:\n- id: insufficient-postmessage-origin-validation\n  patterns:\n  - pattern: |\n      window.addEventListener(...)\n  - pattern-not: |\n      window.addEventListener(..., function($OBJECT){ if ($OBJ.origin == $X) {\n                  ...\n              } })\n  - pattern-not: |\n      window.addEventListener(..., function($OBJECT){ if ($REGEX.test($OBJECT.origin)){\n          ...\n      } })\n  - pattern-not: |\n      window.addEventListener(..., function($OBJECT){ if ($OBJ.origin !== $X) {\n                  ...\n              } })\n  message: |\n    No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).\n  languages:\n  - javascript\n  - typescript\n  severity: WARNING\n", "failed_tests": ["// ok: insufficient-postmessage-origin-validation\nconst arrowHandler = (evt) => {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Arrow function handler with origin validation');\n  }\n};\n\nwindow.addEventListener('message', arrowHandler, false);"], "failed_type": "fp", "testsuite_a": "//ruleid:insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", receiveMessage, false);\n\n\n//addEventListener Safe Usage (Origin Checked)\nconst globalRegex = RegExp('/^http://www.examplesender.com$/', 'g');\nwindow.addEventListener(\"message\", function(message){\n    if(globalRegex.test(message.origin)){\n         console.log(message.data);\n   }\n});\n\n//addEventListener Safe Usage (Origin Checked)\nwindow.addEventListener(\"message\", function(message){\nif (event.origin !== \"http://example.com\") {\n    return;\n}\n});\n\n//addEventListener Safe Usage (Origin Checked)\nwindow.addEventListener(\"message\", function(message){\nif (event.origin == \"http://example.com\") {\n    alert(\"Works\");\n}\n});\n", "testsuite_b": "// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", function (evt) {\n  console.log('Inline without origin check!');\n});\n\nfunction oldHandler(evt) {\n  console.log('Normal function handler without origin check!');\n};\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", oldHandler, false);\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', (evt) => {\n  console.log('Inline arrow function without origin check!');\n});\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', evt => {\n  console.log('Inline arrow function without parenthesis & origin check!');\n});\n\nconst handler = (evt) => {\n  console.log('Arrow function handler without origin check!');\n};\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", handler, false);\n\n// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", function (evt) {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Normal inline function declaration with origin validation');\n  }\n});\n\n// ok: insufficient-postmessage-origin-validation\nfunction normalHandler(evt) {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Normal function handler with origin validation');\n  }\n};\n\nwindow.addEventListener('message', normalHandler, false);\n\n// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', (evt) => {\n  if (evt.origin !== \"http://example.com\") {\n    console.log('Inline arrow function declaration with origin validation');\n  }\n});\n\n// ok: insufficient-postmessage-origin-validation\nconst arrowHandler = (evt) => {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Arrow function handler with origin validation');\n  }\n};\n\nwindow.addEventListener('message', arrowHandler, false);\n\nconst globalRegex = RegExp('/^http://www\\.example\\.com$/', 'g');\n\n// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", (evt) => {\n  if (globalRegex.test(evt.origin)) {\n    console.log(message.data);\n  }\n});\n", "ground_truth": "rules:\n- id: insufficient-postmessage-origin-validation\n  pattern-either:\n  - patterns:\n    - pattern: |\n        window.addEventListener('message', $FUNC, ...)\n    - metavariable-pattern:\n        metavariable: $FUNC\n        patterns:\n        - pattern: |\n            function($OBJ) { ... }\n        - pattern-not: |\n            function($OBJ) { ... if (<... $OBJ.origin ...>) { ... } ... }\n  - patterns:\n    - pattern-either:\n      - pattern-inside: |\n          function $FNAME($OBJ) { $CONTEXT }\n          ...\n      - pattern-inside: |\n          $FNAME = (...) => { $CONTEXT }\n          ...\n    - pattern: |\n        window.addEventListener('message', $FNAME,...)\n    - metavariable-pattern:\n        metavariable: $CONTEXT\n        patterns:\n        - pattern-not: |\n            ... if (<... $OBJ.origin ...>) { ... } ...\n  message: |\n    No validation of origin is done by the addEventListener API. It may be possible to exploit this flaw to perform Cross Origin attacks such as Cross-Site Scripting(XSS).\n  languages:\n  - javascript\n  - typescript\n  severity: WARNING\n  metadata:\n    owasp: 'A3: Sensitive Data Exposure'\n    cwe: 'CWE-345: Insufficient Verification of Data Authenticity'\n    category: security\n    technology:\n    - browser\n", "rule_path": "extend_dataset/dfd3f055/before/insufficient-postmessage-origin-validation.yaml", "test_path": "extend_dataset/dfd3f055/after/insufficient-postmessage-origin-validation.js", "category": "historical", "splited_testsuite_b": ["// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", function (evt) {\n  console.log('Inline without origin check!');\n});", "function oldHandler(evt) {\n  console.log('Normal function handler without origin check!');\n};\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", oldHandler, false);", "// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', (evt) => {\n  console.log('Inline arrow function without origin check!');\n});", "// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', evt => {\n  console.log('Inline arrow function without parenthesis & origin check!');\n});", "const handler = (evt) => {\n  console.log('Arrow function handler without origin check!');\n};\n\n// ruleid: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", handler, false);", "// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", function (evt) {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Normal inline function declaration with origin validation');\n  }\n});", "// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener('message', (evt) => {\n  if (evt.origin !== \"http://example.com\") {\n    console.log('Inline arrow function declaration with origin validation');\n  }\n});", "const globalRegex = RegExp('/^http://www\\.example\\.com$/', 'g');\n\n// ok: insufficient-postmessage-origin-validation\nwindow.addEventListener(\"message\", (evt) => {\n  if (globalRegex.test(evt.origin)) {\n    console.log(message.data);\n  }\n});", "// ok: insufficient-postmessage-origin-validation\nconst arrowHandler = (evt) => {\n  if (evt.origin == \"http://example.com\") {\n    console.log('Arrow function handler with origin validation');\n  }\n};\n\nwindow.addEventListener('message', arrowHandler, false);"], "actual": [true, true, true, true, true, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false], "index": 122, "commit_message": "Expand rule to cover a broader set of origin validation scenarios (#1415)", "commit_date_str": "2021-08-12 14:11:25 +1000", "leaf_count": 4, "line_count": 10}
{"id": "detect-bracket-object-injection", "rule": "rules:\n- id: detect-bracket-object-injection\n  patterns:\n  - pattern: |\n      const $VAR = $OBJ[$FIELD];\n  - pattern-not: |\n      const $VAR = $OBJ[\"...\"];\n  - pattern-not-inside: |\n      const $FIELD = ...;\n      ...\n  message: |\n    Object injection via bracket notation via $FIELD\n  severity: WARNING\n  languages:\n  - javascript\n  - typescript\n", "failed_tests": ["const { CONSTANTS, SOME_MAP } = ModuleImport;\n\nconst fieldName = CONSTANTS.A_VALUE;\nconst someOtherField = \"FOO\";\nconst validations = SOME_MAP[fieldName];\n\nconst validate = function() {\n  const field = formData[fieldName];\n  if (field !== undefined) {\n    return ValidationManager.validateField(fieldName, field.value, validations);\n  }\n  // ok:detect-bracket-object-injection\n  const email = formData.split(\"@\")[0];\n  return {\n    name: fieldName,\n    value: '',\n    error: '',\n  };\n};\n\nexport default {\n  validate,\n};"], "failed_type": "fp", "testsuite_a": "const { CONSTANTS, SOME_MAP } = ModuleImport;\n\nconst fieldName = CONSTANTS.A_VALUE;\nconst someOtherField = \"FOO\";\nconst validations = SOME_MAP[fieldName];\n\nconst validate = function() {\n  const field = formData[fieldName];\n  if (field !== undefined) {\n    return ValidationManager.validateField(fieldName, field.value, validations);\n  }\n  // ruleid:detect-bracket-object-injection\n  const badField = formData[formData[\"foo\"]];\n  // ok\n  const goodField = formData[someOtherField];\n  // ok\n  const someField = formData[\"bar\"]\n  return {\n    name: fieldName,\n    value: '',\n    error: '',\n  };\n};\n\nexport default {\n  validate,\n};\n", "testsuite_b": "const { CONSTANTS, SOME_MAP } = ModuleImport;\n\nconst fieldName = CONSTANTS.A_VALUE;\nconst someOtherField = \"FOO\";\nconst validations = SOME_MAP[fieldName];\n\nconst validate = function() {\n  const field = formData[fieldName];\n  if (field !== undefined) {\n    return ValidationManager.validateField(fieldName, field.value, validations);\n  }\n  // ruleid:detect-bracket-object-injection\n  const badField = formData[formData[\"foo\"]];\n  // ok:detect-bracket-object-injection\n  const goodField = formData[someOtherField];\n  // ok:detect-bracket-object-injection\n  const someField = formData[\"bar\"]\n  // ok:detect-bracket-object-injection\n  const email = formData.split(\"@\")[0];\n  // ruleid:detect-bracket-object-injection\n  const email = formData.split(\"@\")[0 + a];\n  // ruleid:detect-bracket-object-injection\n  const email = formData.split(\"@\")[a + 0];\n  return {\n    name: fieldName,\n    value: '',\n    error: '',\n  };\n};\n\nexport default {\n  validate,\n};\n", "ground_truth": "rules:\n- id: detect-bracket-object-injection\n  patterns:\n  - pattern: |\n      const $VAR = $OBJ[$FIELD];\n  - pattern-not: |\n      const $VAR = $OBJ[($FIELD : float)]\n  - pattern-not: |\n      const $VAR = $OBJ[\"...\"];\n  - pattern-not-inside: |\n      const $FIELD = ...;\n      ...\n  message: |\n    Object injection via bracket notation via $FIELD\n  severity: WARNING\n  languages:\n  - javascript\n  - typescript\n  metadata:\n    category: security\n", "rule_path": "extend_dataset/5c794f1b/before/detect-bracket-object-injection.yaml", "test_path": "extend_dataset/5c794f1b/after/detect-bracket-object-injection.js", "category": "historical", "splited_testsuite_b": ["const { CONSTANTS, SOME_MAP } = ModuleImport;\n\nconst fieldName = CONSTANTS.A_VALUE;\nconst someOtherField = \"FOO\";\nconst validations = SOME_MAP[fieldName];\n\nconst validate = function() {\n  const field = formData[fieldName];\n  if (field !== undefined) {\n    return ValidationManager.validateField(fieldName, field.value, validations);\n  }\n  // ruleid:detect-bracket-object-injection\n  const badField = formData[formData[\"foo\"]];\n  return {\n    name: fieldName,\n    value: '',\n    error: '',\n  };\n};\n\nexport default {\n  validate,\n};", "const { CONSTANTS, SOME_MAP } = ModuleImport;\n\nconst fieldName = CONSTANTS.A_VALUE;\nconst someOtherField = \"FOO\";\nconst validations = SOME_MAP[fieldName];\n\nconst validate = function() {\n  const field = formData[fieldName];\n  if (field !== undefined) {\n    return ValidationManager.validateField(fieldName, field.value, validations);\n  }\n  // ok:detect-bracket-object-injection\n  const goodField = formData[someOtherField];\n  return {\n    name: fieldName,\n    value: '',\n    error: '',\n  };\n};\n\nexport default {\n  validate,\n};", "const { CONSTANTS, SOME_MAP } = ModuleImport;\n\nconst fieldName = CONSTANTS.A_VALUE;\nconst someOtherField = \"FOO\";\nconst validations = SOME_MAP[fieldName];\n\nconst validate = function() {\n  const field = formData[fieldName];\n  if (field !== undefined) {\n    return ValidationManager.validateField(fieldName, field.value, validations);\n  }\n  // ok:detect-bracket-object-injection\n  const someField = formData[\"bar\"]\n  return {\n    name: fieldName,\n    value: '',\n    error: '',\n  };\n};\n\nexport default {\n  validate,\n};", "const { CONSTANTS, SOME_MAP } = ModuleImport;\n\nconst fieldName = CONSTANTS.A_VALUE;\nconst someOtherField = \"FOO\";\nconst validations = SOME_MAP[fieldName];\n\nconst validate = function() {\n  const field = formData[fieldName];\n  if (field !== undefined) {\n    return ValidationManager.validateField(fieldName, field.value, validations);\n  }\n  // ruleid:detect-bracket-object-injection\n  const email = formData.split(\"@\")[0 + a];\n  return {\n    name: fieldName,\n    value: '',\n    error: '',\n  };\n};\n\nexport default {\n  validate,\n};", "const { CONSTANTS, SOME_MAP } = ModuleImport;\n\nconst fieldName = CONSTANTS.A_VALUE;\nconst someOtherField = \"FOO\";\nconst validations = SOME_MAP[fieldName];\n\nconst validate = function() {\n  const field = formData[fieldName];\n  if (field !== undefined) {\n    return ValidationManager.validateField(fieldName, field.value, validations);\n  }\n  // ruleid:detect-bracket-object-injection\n  const email = formData.split(\"@\")[a + 0];\n  return {\n    name: fieldName,\n    value: '',\n    error: '',\n  };\n};\n\nexport default {\n  validate,\n};", "const { CONSTANTS, SOME_MAP } = ModuleImport;\n\nconst fieldName = CONSTANTS.A_VALUE;\nconst someOtherField = \"FOO\";\nconst validations = SOME_MAP[fieldName];\n\nconst validate = function() {\n  const field = formData[fieldName];\n  if (field !== undefined) {\n    return ValidationManager.validateField(fieldName, field.value, validations);\n  }\n  // ok:detect-bracket-object-injection\n  const email = formData.split(\"@\")[0];\n  return {\n    name: fieldName,\n    value: '',\n    error: '',\n  };\n};\n\nexport default {\n  validate,\n};"], "actual": [true, false, false, true, true, true], "expected": [true, false, false, true, true, false], "index": 123, "commit_message": "detect bracket object injection fix fp (#1344)", "commit_date_str": "2021-06-22 08:09:17 -0600", "leaf_count": 3, "line_count": 12}
{"id": "grpc-server-insecure-connection", "rule": "rules:\n- id: grpc-server-insecure-connection\n  message: Found an insecure gRPC connection. This allows for a connection without\n    encryption to this server. A malicious attacker could tamper with the gRPC message,\n    which could compromise the machine.\n  languages:\n  - go\n  severity: ERROR\n  patterns:\n  - pattern-not: $GRPC.NewServer(..., $GRPC.Creds(...), ...)\n  - pattern: $GRPC.NewServer(...)\n", "failed_tests": ["package insecuregrpc\n\nimport (\n    \"crypto/x509\"\n    \"net/http\"\n    \"net/http/httptest\"\n\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/credentials\"\n)\n\n// False Positive test\n// cf. https://github.com/daghan/invoicer-chapter2/blob/4c5b00408a4aeece86d98ad3ef1c88e610053dfc/vendor/golang.org/x/net/websocket/websocket_test.go#L129\nfunc startServer() {\n\thttp.Handle(\"/echo\", Handler(echoServer))\n\thttp.Handle(\"/count\", Handler(countServer))\n\thttp.Handle(\"/ctrldata\", Handler(ctrlAndDataServer))\n\tsubproto := Server{\n\t\tHandshake: subProtocolHandshake,\n\t\tHandler:   Handler(subProtoServer),\n\t}\n\thttp.Handle(\"/subproto\", subproto)\n    // ok: grpc-server-insecure-connection\n\tserver := httptest.NewServer(nil)\n\tserverAddr = server.Listener.Addr().String()\n\tlog.Print(\"Test WebSocket server listening on \", serverAddr)\n}"], "failed_type": "fp", "testsuite_a": "package insecuregrpc\n\nimport (\n    \"crypto/x509\"\n\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/credentials\"\n)\n\n// cf. https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption\nfunc unsafe() {\n    // Server\n    // ruleid:grpc-server-insecure-connection\n    s := grpc.NewServer()\n    // ... register gRPC services ...\n    if err = s.Serve(lis); err != nil {\n        log.Fatalf(\"failed to serve: %v\", err)\n    }\n}\n\nfunc safe() {\n    // Server\n    // ok\n    s := grpc.NewServer(grpc.Creds(credentials.NewClientTLSFromCert(x509.NewCertPool(), \"\")))\n    // ... register gRPC services ...\n    if err = s.Serve(lis); err != nil {\n        log.Fatalf(\"failed to serve: %v\", err)\n    }\n}", "testsuite_b": "package insecuregrpc\n\nimport (\n    \"crypto/x509\"\n    \"net/http\"\n    \"net/http/httptest\"\n\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/credentials\"\n)\n\n// cf. https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption\nfunc unsafe() {\n    // Server\n    // ruleid:grpc-server-insecure-connection\n    s := grpc.NewServer()\n    // ... register gRPC services ...\n    if err = s.Serve(lis); err != nil {\n        log.Fatalf(\"failed to serve: %v\", err)\n    }\n}\n\nfunc safe() {\n    // Server\n    // ok\n    s := grpc.NewServer(grpc.Creds(credentials.NewClientTLSFromCert(x509.NewCertPool(), \"\")))\n    // ... register gRPC services ...\n    if err = s.Serve(lis); err != nil {\n        log.Fatalf(\"failed to serve: %v\", err)\n    }\n}\n\n// False Positive test\n// cf. https://github.com/daghan/invoicer-chapter2/blob/4c5b00408a4aeece86d98ad3ef1c88e610053dfc/vendor/golang.org/x/net/websocket/websocket_test.go#L129\nfunc startServer() {\n\thttp.Handle(\"/echo\", Handler(echoServer))\n\thttp.Handle(\"/count\", Handler(countServer))\n\thttp.Handle(\"/ctrldata\", Handler(ctrlAndDataServer))\n\tsubproto := Server{\n\t\tHandshake: subProtocolHandshake,\n\t\tHandler:   Handler(subProtoServer),\n\t}\n\thttp.Handle(\"/subproto\", subproto)\n    // ok\n\tserver := httptest.NewServer(nil)\n\tserverAddr = server.Listener.Addr().String()\n\tlog.Print(\"Test WebSocket server listening on \", serverAddr)\n}", "ground_truth": "rules:\n- id: grpc-server-insecure-connection\n  metadata:\n    owasp: 'A8: Insecure Deserialization'\n    cwe: 'CWE-502: Deserialization of Untrusted Data'\n    references:\n    - https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption\n  message: Found an insecure gRPC connection. This allows for a connection without encryption to this server. A malicious\n    attacker could tamper with the gRPC message, which could compromise the machine.\n  languages:\n  - go\n  severity: ERROR\n  patterns:\n  - pattern-not: grpc.NewServer(..., grpc.Creds(...), ...)\n  - pattern: grpc.NewServer(...)\n", "rule_path": "extend_dataset/67d26e31/before/grpc-server-insecure-connection.yaml", "test_path": "extend_dataset/67d26e31/after/grpc-server-insecure-connection.go", "category": "historical", "splited_testsuite_b": ["package insecuregrpc\n\nimport (\n    \"crypto/x509\"\n    \"net/http\"\n    \"net/http/httptest\"\n\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/credentials\"\n)\n\n// cf. https://blog.gopheracademy.com/advent-2019/go-grps-and-tls/#connection-without-encryption\nfunc unsafe() {\n    // Server\n    // ruleid:grpc-server-insecure-connection\n    s := grpc.NewServer()\n    // ... register gRPC services ...\n    if err = s.Serve(lis); err != nil {\n        log.Fatalf(\"failed to serve: %v\", err)\n    }\n}", "package insecuregrpc\n\nimport (\n    \"crypto/x509\"\n    \"net/http\"\n    \"net/http/httptest\"\n\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/credentials\"\n)\n\nfunc safe() {\n    // Server\n    // ok: grpc-server-insecure-connection\n    s := grpc.NewServer(grpc.Creds(credentials.NewClientTLSFromCert(x509.NewCertPool(), \"\")))\n    // ... register gRPC services ...\n    if err = s.Serve(lis); err != nil {\n        log.Fatalf(\"failed to serve: %v\", err)\n    }\n}", "package insecuregrpc\n\nimport (\n    \"crypto/x509\"\n    \"net/http\"\n    \"net/http/httptest\"\n\n    \"google.golang.org/grpc\"\n    \"google.golang.org/grpc/credentials\"\n)\n\n// False Positive test\n// cf. https://github.com/daghan/invoicer-chapter2/blob/4c5b00408a4aeece86d98ad3ef1c88e610053dfc/vendor/golang.org/x/net/websocket/websocket_test.go#L129\nfunc startServer() {\n\thttp.Handle(\"/echo\", Handler(echoServer))\n\thttp.Handle(\"/count\", Handler(countServer))\n\thttp.Handle(\"/ctrldata\", Handler(ctrlAndDataServer))\n\tsubproto := Server{\n\t\tHandshake: subProtocolHandshake,\n\t\tHandler:   Handler(subProtoServer),\n\t}\n\thttp.Handle(\"/subproto\", subproto)\n    // ok: grpc-server-insecure-connection\n\tserver := httptest.NewServer(nil)\n\tserverAddr = server.Listener.Addr().String()\n\tlog.Print(\"Test WebSocket server listening on \", serverAddr)\n}"], "actual": [true, false, true], "expected": [true, false, false], "index": 124, "commit_message": "New Published Rules - go.grpc.security.grpc-server-insecure-connection (#611)", "commit_date_str": "2020-06-17 10:47:36 -0700", "leaf_count": 2, "line_count": 3}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages:\n  - ruby\n  severity: ERROR\n  message: Detected user input used to manually construct a SQL string. This is usually\n    bad practice because manual construction could accidentally result in a SQL injection.\n    An attacker could use a SQL injection to steal or modify contents of the database.\n    Instead, use a parameterized query which is available by default in most database\n    engines. Alternatively, consider using an object-relational mapper (ORM) such\n    as ActiveRecord which will protect your queries.\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: params\n      - pattern: request\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: |\n            \"...#{$EXPR}...\"\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $EXPR\n        - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\\b|\\w+\\s*!?[<>=].*\n      - patterns:\n        - pattern-either:\n          - pattern: Kernel::sprintf(\"$SQLSTR\", $EXPR)\n          - pattern: |\n              \"$SQLSTR\" + $EXPR\n          - pattern: |\n              \"$SQLSTR\" % $EXPR\n        - pattern-not-inside: |\n            $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n        - focus-metavariable: $EXPR\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "failed_tests": ["class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\nend"], "failed_type": "fp", "testsuite_a": "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\n\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\n\n\nend\n", "testsuite_b": "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\n\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\n\n\nend\n", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages:\n    - ruby\n  severity: ERROR\n  message: Detected user input used to manually construct a SQL string. This is\n    usually bad practice because manual construction could accidentally result\n    in a SQL injection. An attacker could use a SQL injection to steal or\n    modify contents of the database. Instead, use a parameterized query which\n    is available by default in most database engines. Alternatively, consider\n    using an object-relational mapper (ORM) such as ActiveRecord which will\n    protect your queries.\n  metadata:\n    cwe: >\n      CWE-89: Improper Neutralization of Special Elements used in an SQL\n      Command ('SQL Injection')\n    owasp:\n      - A01:2017 - Injection\n      - A03:2021 - Injection\n    category: security\n    technology:\n      - rails\n    references:\n      - https://rorsecurity.info/portfolio/ruby-on-rails-sql-injection-cheat-sheet\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n  mode: taint\n  pattern-sources:\n    - patterns:\n        - pattern-either:\n            - pattern: params\n            - pattern: request\n  pattern-sinks:\n    - patterns:\n        - pattern-either:\n            - patterns:\n                - pattern-either:\n                    - pattern: |\n                        $RECORD.where($X,...)\n                    - pattern: |\n                        $RECORD.find(..., :conditions => $X,...)\n                - focus-metavariable: $X\n            - patterns:\n                - pattern: |\n                    \"...#{$EXPR}...\"\n                - pattern-not-inside: |\n                    $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n                - focus-metavariable: $EXPR\n                - pattern-regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n            - patterns:\n                - pattern-either:\n                    - pattern: Kernel::sprintf(\"$SQLSTR\", $EXPR)\n                    - pattern: |\n                        \"$SQLSTR\" + $EXPR\n                    - pattern: |\n                        \"$SQLSTR\" % $EXPR\n                - pattern-not-inside: |\n                    $FUNC(\"...\",  \"...#{$EXPR}...\",...)\n                - focus-metavariable: $EXPR\n                - metavariable-regex:\n                    metavariable: $SQLSTR\n                    regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "rule_path": "extend_dataset/be6967bb/before/tainted-sql-string.yaml", "test_path": "extend_dataset/be6967bb/after/tainted-sql-string.rb", "category": "historical", "splited_testsuite_b": ["class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n\n  def update1\n    message = false\n    # ruleid:tainted-sql-string\n    user = User.find(:first, :conditions => \"user_id = '#{params[:user][:user_id]}'\")\n    user.skip_user_id_assign = true\n    user.update_attributes(params[:user].reject { |k| k == (\"password\" || \"password_confirmation\") || \"user_id\" })\n    pass = params[:user][:password]\n    user.password = pass if !(pass.blank?)\n    message = true if user.save!\n    respond_to do |format|\n      format.html { redirect_to user_account_settings_path(:user_id => current_user.user_id) }\n      format.json { render :json => {:msg => message ? \"success\" : \"false \"} }\n    end\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def update2\n    message = false\n\n    # ruleid:tainted-sql-string\n    user = User.where(\"user_id = '#{params[:user][:id]}'\")[0]\n\n    if user\n      user.update_attributes(user_params_without_password)\n      if params[:user][:password].present? && (params[:user][:password] == params[:user][:password_confirmation])\n        user.password = params[:user][:password]\n      end\n      message = true if user.save!\n      respond_to do |format|\n        format.html { redirect_to user_account_settings_path(user_id: current_user.id) }\n        format.json { render json: {msg: message ? \"success\" : \"false \"} }\n      end\n    else\n      flash[:error] = \"Could not update user!\"\n      redirect_to user_account_settings_path(user_id: current_user.id)\n    end\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test3\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % params[:user])\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test4\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(Kernel::sprintf(\"SELECT FROM person WHERE name='%s'\", params[:user]))\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def test5\n    # ruleid:tainted-sql-string\n    records = ActiveRecord::Base.connection.execute(\"SELECT FROM person WHERE name='\" + params[:user] + \"'\")\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test1\n    # ok:tainted-sql-string\n    message = \"this is just a message ! %s\" % params[:user]\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test2\n    # ok:tainted-sql-string\n    message = Kernel::sprintf(\"this message is ok: '%s'\", params[:user])\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test3\n    # ok:tainted-sql-string\n    records = \"this is ok!\" + params[:user] + \"'\"\n    redirect_to '/'\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test4\n    # ok:tainted-sql-string\n    user = User.where(\"user_id = ?\", \"#{params[:user][:id]}\")[0]\n  end\nend", "class UsersController < ApplicationController\n  skip_before_action :has_info\n  skip_before_action :authenticated, only: [:new, :create]\n\n  def new\n    @user = User.new\n  end\n\n  def ok_test5\n    redirect_url = params[:redirect]\n    # ok:tainted-sql-string\n    redirect_to \"#{authenticator_domain}/application-name/landing?redirect_path=#{redirect_url}\"\n  end\nend"], "actual": [true, true, true, true, true, false, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false, false], "index": 125, "commit_message": "add FP test case, remove overly permissive regex, add find case", "commit_date_str": "2022-09-14 16:54:07 -0700", "leaf_count": 13, "line_count": 33}
{"id": "detected-generic-api-key", "rule": "rules:\n- id: detected-generic-api-key\n  pattern-regex: |-\n    [aA][pP][iI]_?[kK][eE][yY][=_:\\s-]+['|\"]?[0-9a-zA-Z]{32,45}['|\"]?\n  languages: [regex]\n  message: Generic API Key detected\n  severity: ERROR\n", "failed_tests": ["# ok: detected-generic-api-key\nApiKey=\nVirtualgenerateApiKeySomeLongMethodName="], "failed_type": "fp", "testsuite_a": "# ruleid: detected-generic-api-key\napi_key=1234567890123456789012345678901234567890\n\n# ruleid: detected-generic-api-key\nAPIKEY : 123567890123456789012345678901234567890\n\n# ruleid: detected-generic-api-key\nAPIKEY - 123567890123456789012345678901234567890\n\n# ruleid: detected-generic-api-key\nAPIKEY  123567890123456789012345678901234567890\n\n# ruleid: detected-generic-api-key\nAPIKEY=\"123567890123456789012345678901234567890\"\n\n# ok: detected-generic-api-key\nApiKeyGenerator.generateApiKeySomeLongMethodName();\n", "testsuite_b": "# ruleid: detected-generic-api-key\napi_key=1234567890123456789012345678901234567890\n\n# ruleid: detected-generic-api-key\nAPIKEY : 123567890123456789012345678901234567890\n\n# ruleid: detected-generic-api-key\nAPIKEY - 123567890123456789012345678901234567890\n\n# ruleid: detected-generic-api-key\nAPIKEY  123567890123456789012345678901234567890\n\n# ruleid: detected-generic-api-key\nAPIKEY=\"123567890123456789012345678901234567890\"\n\n# ok: detected-generic-api-key\nApiKeyGenerator.generateApiKeySomeLongMethodName();\n\n# ok: detected-generic-api-key\nApiKey=\nVirtualgenerateApiKeySomeLongMethodName=", "ground_truth": "rules:\n- id: detected-generic-api-key\n  patterns:\n  - pattern-regex: \"[aA][pP][iI]_?[kK][eE][yY][=_:\\\\s-]+['|\\\"]?(?<SECRET>[0-9a-zA-Z]{32,45})['|\\\"]?\"\n  - metavariable-analysis:\n      analyzer: entropy\n      metavariable: $SECRET\n  languages: [regex]\n  message: Generic API Key detected\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json\n    category: security\n    technology:\n    - secrets\n    confidence: LOW\n    references:\n    - https://github.com/dxa4481/truffleHogRegexes/blob/master/truffleHogRegexes/regexes.json\n    owasp:\n    - A07:2021 - Identification and Authentication Failures\n    cwe:\n    - 'CWE-798: Use of Hard-coded Credentials'\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: MEDIUM\n", "rule_path": "extend_dataset/4d24cbe6/before/detected-generic-api-key.yaml", "test_path": "extend_dataset/4d24cbe6/after/detected-generic-api-key.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-generic-api-key\napi_key=1234567890123456789012345678901234567890", "# ruleid: detected-generic-api-key\nAPIKEY : 123567890123456789012345678901234567890", "# ruleid: detected-generic-api-key\nAPIKEY - 123567890123456789012345678901234567890", "# ruleid: detected-generic-api-key\nAPIKEY  123567890123456789012345678901234567890", "# ruleid: detected-generic-api-key\nAPIKEY=\"123567890123456789012345678901234567890\"", "# ok: detected-generic-api-key\nApiKeyGenerator.generateApiKeySomeLongMethodName();", "# ok: detected-generic-api-key\nApiKey=\nVirtualgenerateApiKeySomeLongMethodName="], "actual": [true, true, true, true, true, false, true], "expected": [true, true, true, true, true, false, false], "index": 126, "commit_message": "Remove FPs from secrets rule (#3097)", "commit_date_str": "2023-09-07 10:16:30 +0200", "leaf_count": 1, "line_count": 1}
{"id": "django-no-csrf-token", "rule": "rules:\n- id: django-no-csrf-token\n  patterns:\n  - pattern: \"<form...>...</form>\"\n  - pattern-either:\n    - pattern: |\n        <form ... method=\"$METHOD\" ...>...</form>\n    - pattern: |\n        <form ... method='$METHOD' ...>...</form>\n    - pattern: |\n        <form ... method=$METHOD ...>...</form>\n  - metavariable-regex:\n      metavariable: $METHOD\n      regex: (?i)post\n  - pattern-not-inside: \"<form...>...{% csrf_token %}...</form>\"\n  message: Manually-created forms in django templates should specify a csrf_token\n    to prevent CSRF attacks\n  languages: [generic]\n  severity: WARNING\n", "failed_tests": ["<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='PUT'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>"], "failed_type": "fn", "testsuite_a": "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='POST'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form method=\"GET\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n", "testsuite_b": "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='POST'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='PUT'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"delete\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n\n<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form method=\"GET\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>\n", "ground_truth": "rules:\n  - id: django-no-csrf-token\n    patterns:\n      - pattern: \"<form...>...</form>\"\n      - pattern-either:\n          - pattern: |\n              <form ... method=\"$METHOD\" ...>...</form>\n          - pattern: |\n              <form ... method='$METHOD' ...>...</form>\n          - pattern: |\n              <form ... method=$METHOD ...>...</form>\n      - metavariable-regex:\n          metavariable: $METHOD\n          regex: (?i)(post|put|delete|patch)\n      - pattern-not-inside: \"<form...>...{% csrf_token %}...</form>\"\n    message: Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks\n    languages: [generic]\n    severity: WARNING\n    metadata:\n      category: security\n      cwe: \"CWE-352: Cross-Site Request Forgery (CSRF)\"\n      references:\n      - https://docs.djangoproject.com/en/4.2/howto/csrf/\n      confidence: MEDIUM\n      likelihood: MEDIUM\n      impact: MEDIUM\n      subcategory:\n        - guardrail\n      technology:\n        - django\n    paths:\n      include:\n        - \"*.html\"", "rule_path": "extend_dataset/8f3bd512/before/django-no-csrf-token.yaml", "test_path": "extend_dataset/8f3bd512/after/django-no-csrf-token.html", "category": "historical", "splited_testsuite_b": ["<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method=\"post\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='POST'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"post\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n          <form method=\"delete\">\n<!-- ok: django-no-csrf-token -->\n            {% csrf_token %}\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ok: django-no-csrf-token -->\n          <form method=\"GET\">\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>", "<div class=\"container\">\n  <div class=\"row\">\n      <div class=\"col-6\">\n<!-- ruleid: django-no-csrf-token -->\n          <form method='PUT'>\n              <input type=\"text\" name=\"some_field\">Some Field</input>\n              <input type=\"submit\" name=\"submit\">Submit</input>\n          </form>\n      </div>\n  </div>\n</div>"], "actual": [true, true, false, false, false, false, false], "expected": [true, true, false, false, false, false, true], "index": 127, "commit_message": "update django-no-csrf-token rule (#3240)", "commit_date_str": "2023-12-13 15:26:34 +0700", "leaf_count": 7, "line_count": 16}
{"id": "missing-internal", "rule": "rules:\n- id: missing-internal\n  patterns:\n  - pattern-inside: |\n      location ... {\n        ...\n        ...\n      }\n  - pattern-not-inside: |\n      location ... {\n        ...\n        internal;\n        ...\n      }\n  - pattern: proxy_pass ...$...;\n  languages:\n  - generic\n  severity: WARNING\n  message: >-\n    This location block contains a 'proxy_pass' directive but does not contain the\n    'internal'\n    directive. The 'internal' directive restricts access to this location to internal\n    requests.\n    Without 'internal', an attacker could use your server for server-side request\n    forgeries (SSRF).\n    Include the 'internal' directive in this block to limit exposure.\n", "failed_tests": ["server {\n    location / {\n        # ok: missing-internal\n        proxy_pass  http:/backend:42/;\n        set         $false  'positive';\n    }\n}"], "failed_type": "fp", "testsuite_a": "server {\n    location ~ /proxy/(.*)/(.*)/(.*)$ {\n        # ruleid: missing-internal\n        proxy_pass $1://$2/$3;\n    }\n}\n\nserver {\n    location / {\n        # ok: missing-internal\n        proxy_pass http://127.0.0.1:8000/;\n    }\n}\n\nserver {\n    location ~ /proxy/(.*)/(.*)/(.*)$ {\n        internal;\n        # ok: missing-internal\n        proxy_pass $1://$2/$3;\n    }\n}\n", "testsuite_b": "server {\n    location ~ /proxy/(.*)/(.*)/(.*)$ {\n        # ruleid: missing-internal\n        proxy_pass $1://$2/$3;\n    }\n}\n\nserver {\n    location / {\n        # ok: missing-internal\n        proxy_pass http://127.0.0.1:8000/;\n    }\n}\n\nserver {\n    location ~ /proxy/(.*)/(.*)/(.*)$ {\n        internal;\n        # ok: missing-internal\n        proxy_pass $1://$2/$3;\n    }\n}\n\nserver {\n    location / {\n        # ok: missing-internal\n        proxy_pass  http:/backend:42/;\n        set         $false  'positive';\n    }\n}\n", "ground_truth": "rules:\n- id: missing-internal\n  options:\n    generic_ellipsis_max_span: 0\n    generic_engine: aliengrep\n  patterns:\n    - pattern-inside: |\n        location ... {\n          ....\n          ....\n        }\n    - pattern-not-inside: |\n        location ... {\n          ....\n          internal;\n          ....\n        }\n    - pattern: proxy_pass $...URL;\n    - metavariable-regex:\n        metavariable: $...URL\n        regex: (.*\\$.*)\n  paths:\n    include:\n    - '*.conf'\n    - '*.vhost'\n    - sites-available/*\n    - sites-enabled/*\n  languages:\n  - generic\n  severity: WARNING\n  message: >-\n    This location block contains a 'proxy_pass' directive but does not contain the 'internal'\n    directive. The 'internal' directive restricts access to this location to internal requests.\n    Without 'internal', an attacker could use your server for server-side request forgeries (SSRF).\n    Include the 'internal' directive in this block to limit exposure.\n  metadata:\n    cwe:\n    - 'CWE-16: CWE CATEGORY: Configuration'\n    references:\n    - https://github.com/yandex/gixy/blob/master/docs/en/plugins/ssrf.md\n    - https://nginx.org/en/docs/http/ngx_http_core_module.html#internal\n    category: security\n    technology:\n    - nginx\n    confidence: LOW\n    owasp:\n    - A06:2017 - Security Misconfiguration\n    - A05:2021 - Security Misconfiguration\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n", "rule_path": "extend_dataset/89a53118/before/missing-internal.yaml", "test_path": "extend_dataset/89a53118/after/missing-internal.conf", "category": "historical", "splited_testsuite_b": ["server {\n    location ~ /proxy/(.*)/(.*)/(.*)$ {\n        # ruleid: missing-internal\n        proxy_pass $1://$2/$3;\n    }\n}", "server {\n    location / {\n        # ok: missing-internal\n        proxy_pass http://127.0.0.1:8000/;\n    }\n}", "server {\n    location ~ /proxy/(.*)/(.*)/(.*)$ {\n        internal;\n        # ok: missing-internal\n        proxy_pass $1://$2/$3;\n    }\n}", "server {\n    location / {\n        # ok: missing-internal\n        proxy_pass  http:/backend:42/;\n        set         $false  'positive';\n    }\n}"], "actual": [true, false, false, true], "expected": [true, false, false, false], "index": 128, "commit_message": "Restrict match to single line (#3101)", "commit_date_str": "2023-09-08 19:18:51 +0200", "leaf_count": 3, "line_count": 4}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 129, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 130, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 131, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 132, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 133, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 134, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 135, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 136, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 137, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 138, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 139, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 140, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 141, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "sqlalchemy-execute-raw-query", "rule": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - pattern: |\n      $QUERY = $SQL + ...\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL % (...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = $SQL.format(...)\n      ...\n      $CONNECTION.execute($QUERY, ...)\n  - pattern: |\n      $QUERY = f\"...{...}...\"\n      ...\n      $CONNECTION.execute($QUERY, ...)\n", "failed_tests": ["# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)"], "failed_type": "fn", "testsuite_a": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ruleid: sqlalchemy-execute-raw-query\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  connection.execute(stmt, values)\n", "testsuite_b": "##########################################################################\n# Connectionless query\n##########################################################################\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nquery = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# String formating using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n\nquery = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# fstrings\nengine = create_engine('postgresql://user@localhost/database')\nquery: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(query)\n\n# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")\n\n##########################################################################\n# Execute query without \"With\" block\n##########################################################################\n\n# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block\n##########################################################################\n\n# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")\n\n# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))\n\n# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))\n\n# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")\n\n##########################################################################\n# Execute query in With block and using a variable\n##########################################################################\n\n# Execute query in With block from variable set by string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('\" + name + \"')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n\n# Execute query in With block from variable set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (type) set by String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('%s')\" % (name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    query: str = \"INSERT INTO person (name) VALUES ('{}')\".format(name)\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n# Execute query in With block from variable (typed) set by String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    \n    query: str = f\"INSERT INTO person (name) VALUES ('{name}')\"\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(query)\n\n########################################################################\n\n# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')\n\n# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()\n\n\n# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)\n\n# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)\n", "ground_truth": "rules:\n- id: sqlalchemy-execute-raw-query\n  message: >-\n    Avoiding SQL string concatenation: untrusted input concatenated with raw\n    SQL query can result in SQL Injection. In order to execute raw query\n    safely, prepared statement should be used.\n    SQLAlchemy provides TextualSQL to easily used prepared statement with\n    named parameters. For complex SQL composition, use SQL Expression\n    Language or Schema Definition Language. In most cases, SQLAlchemy ORM\n    will be a better option.\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-textual-sql\n    - https://www.tutorialspoint.com/sqlalchemy/sqlalchemy_quick_guide.htm\n    - https://docs.sqlalchemy.org/en/14/core/tutorial.html#using-more-specific-text-with-table-expression-literal-column-and-expression-column\n    category: security\n    technology:\n    - sqlalchemy\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - python\n  pattern-either:\n  - pattern: |\n      $CONNECTION.execute( $SQL + ..., ... )\n  - pattern: |\n      $CONNECTION.execute( $SQL % (...), ...)\n  - pattern: |\n      $CONNECTION.execute( $SQL.format(...), ... )\n  - pattern: |\n      $CONNECTION.execute(f\"...{...}...\", ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL + ...\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns: \n    - pattern-inside: |\n        $QUERY = $SQL % (...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = $SQL.format(...)\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n  - patterns:\n    - pattern-inside: |\n        $QUERY = f\"...{...}...\"\n        ...\n    - pattern: |\n        $CONNECTION.execute($QUERY, ...)\n", "rule_path": "extend_dataset/5730c0ec/before/sqlalchemy-execute-raw-query.yaml", "test_path": "extend_dataset/5730c0ec/after/sqlalchemy-execute-raw-query.py", "category": "historical", "splited_testsuite_b": ["# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\necho(\"database connexion: ok\")\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\", multi=False)", "# String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (firstname, lastname) VALUES ('\" + firstname + \"','\" + lastname + \"')\")", "# String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# String concatenation using fstrings\nengine = create_engine('postgresql://user@localhost/database')\n# ruleid: sqlalchemy-execute-raw-query\nengine.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query without concatenation\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nengine.execute(\"INSERT INTO person (name) VALUES ('Frodon Sacquet')\")", "# Execute query from string concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query from String formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query from string formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query from string concatenation fstrings\nengine = create_engine('postgresql://user@localhost/database')\nconnection = engine.connect()\n# ruleid: sqlalchemy-execute-raw-query\nconnection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Execute query in With block from String concatenation using + operator\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('\" + name + \"')\")", "# Execute query in With block from string formating using % operator (old style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('%s')\" % (name))", "# Execute query in With block from String formating (new style)\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(\"INSERT INTO person (name) VALUES ('{}')\".format(name))", "# Execute query in With block from String concatenation  fstrings\nengine = create_engine('postgresql://user@localhost/database')\nwith engine.connect() as connection:\n    # ruleid: sqlalchemy-execute-raw-query\n    connection.execute(f\"INSERT INTO person (name) VALUES ('{name}')\")", "# Query using prepared statement with named parameters\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nstmt = text(\"INSERT INTO table (name) VALUES(:name)\")\nconnection.execute(stmt, name='Frodon Sacquet')", "# SQL Composition and prepared statement\n# ok: sqlalchemy-execute-raw-query\nengine = create_engine('postgresql://user@localhost/database')\nquery = select(literal_column(\"users.fullname\", String) + ', ' + literal_column(\"addresses.email_address\").label(\"title\")).where(and_(literal_column(\"users.id\") == literal_column(\"addresses.user_id\"), text(\"users.name BETWEEN 'm' AND 'z'\"), text(\"(addresses.email_address LIKE :x OR addresses.email_address LIKE :y)\"))).select_from(table('users')).select_from(table('addresses'))\nconn.execute(query, {\"x\":\"%@aol.com\", \"y\":\"%@msn.com\"}).fetchall()", "# SQL Composition using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = (\n    select(product_table)\n    .where(product_table.columns[field_name] == value_name)\n  )\n  result = connection.execute(stmt)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  # ok: sqlalchemy-execute-raw-query\n  stmt = insert(product_table)\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  print(stmt)\n  connection.execute(stmt, values)", "# Insert multi data record using SQL Expression\nconnection_string = 'sqlite:///db.sqlite'\nengine = create_engine(connection_string, echo=True)\nwith engine.connect() as connection:\n  meta = MetaData()\n  meta.reflect(bind=connection)\n  product_table = meta.tables['product']\n  stmt = insert(product_table) + 'test'\n  values = [\n      {field_name: 'hazelnut', field_price: 5},\n      {field_name: 'banana', field_price: 8}\n  ]\n  # ruleid: sqlalchemy-execute-raw-query\n  connection.execute(stmt, values)"], "actual": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, true, true, false, true, true, true, true, true, true, true, true, false, false, false, false, true], "index": 142, "commit_message": "fix range for audit sql rule (#2808)", "commit_date_str": "2023-03-16 17:16:16 -0700", "leaf_count": 8, "line_count": 41}
{"id": "string-formatted-query", "rule": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  patterns:\n  - pattern-not-inside: |\n      $VAR = \"...\" + \"...\"\n      ...\n      $OBJ.$SINK(..., $VAR, ...)\n  - pattern-either:\n    - pattern: $OBJ.Exec(\"...\" + $X)\n    - pattern: $OBJ.ExecContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Query(\"...\" + $X)\n    - pattern: $OBJ.QueryContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRow(\"...\" + $X)\n    - pattern: $OBJ.QueryRow($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRowContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "failed_tests": ["package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery1(r *http.Request) {\n    // ruleid: string-formatted-query\n    _, err = db.Query(\"INSERT into users (username, password) VALUES(\" + username + \", \" + password)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}"], "failed_type": "fn", "testsuite_a": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQuery(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\n\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\npackage main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, \" +\n    \" description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status)\" +\n    \" value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n\nfunc new2() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status) value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n", "testsuite_b": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\nfunc okDbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = customerId\"\n\n\trow, _ := db.Exec(query)\n}\n\nfunc dbQuery1(r *http.Request) {\n    // ruleid: string-formatted-query\n    _, err = db.Query(\"INSERT into users (username, password) VALUES(\" + username + \", \" + password)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbQuery2(r *http.Request, username string, password string) {\n    // ruleid: string-formatted-query\n    query = \"INSERT into users (username, password) VALUES(\" + username + \", \" + password\n    _, err = db.QueryRow(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbQuery3(r *http.Request, username string) {\n    // ruleid: string-formatted-query\n    query = username + \" AND INSERT into users (username, password)\"\n    _, err = db.Exec(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc okDbQuery1(r *http.Request) {\n    // ok: string-formatted-query\n    _, err = db.Exec(\"INSERT into users (username, password) VALUES(\" + \"username\" + \", \" + \"smth)\")\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\nfunc dbQuery4(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\npackage main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, \" +\n    \" description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status)\" +\n    \" value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n\nfunc new2() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status) value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n", "ground_truth": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    source-rule-url: https://github.com/securego/gosec\n    category: security\n  patterns:\n  - pattern-not-inside: |\n      $VAR = \"...\" + \"...\"\n      ...\n      $OBJ.$SINK(..., $VAR, ...)\n  - pattern-not: $OBJ.Exec(\"...\")\n  - pattern-not: $OBJ.ExecContext($CTX, \"...\")\n  - pattern-not: $OBJ.Query(\"...\")\n  - pattern-not: $OBJ.QueryContext($CTX, \"...\")\n  - pattern-not: $OBJ.QueryRow(\"...\")\n  - pattern-not: $OBJ.QueryRow($CTX, \"...\")\n  - pattern-not: $OBJ.QueryRowContext($CTX, \"...\")\n  - pattern-either:\n    - pattern: $OBJ.Exec($X + ...)\n    - pattern: $OBJ.ExecContext($CTX, $X + ...)\n    - pattern: $OBJ.Query($X + ...)\n    - pattern: $OBJ.QueryContext($CTX, $X + ...)\n    - pattern: $OBJ.QueryRow($X + ...)\n    - pattern: $OBJ.QueryRow($CTX, $X + ...)\n    - pattern: $OBJ.QueryRowContext($CTX, $X + ...)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "rule_path": "extend_dataset/eba59426/before/string-formatted-query.yaml", "test_path": "extend_dataset/eba59426/after/string-formatted-query.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc okDbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = customerId\"\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery4(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery1(r *http.Request) {\n    // ruleid: string-formatted-query\n    _, err = db.Query(\"INSERT into users (username, password) VALUES(\" + username + \", \" + password)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}"], "actual": [true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false], "expected": [true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true], "index": 143, "commit_message": "fix false negative in rule (#1325)", "commit_date_str": "2021-06-14 14:05:32 +1000", "leaf_count": 36, "line_count": 226}
{"id": "string-formatted-query", "rule": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  patterns:\n  - pattern-not-inside: |\n      $VAR = \"...\" + \"...\"\n      ...\n      $OBJ.$SINK(..., $VAR, ...)\n  - pattern-either:\n    - pattern: $OBJ.Exec(\"...\" + $X)\n    - pattern: $OBJ.ExecContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Query(\"...\" + $X)\n    - pattern: $OBJ.QueryContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRow(\"...\" + $X)\n    - pattern: $OBJ.QueryRow($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRowContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "failed_tests": ["package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery2(r *http.Request, username string, password string) {\n    // ruleid: string-formatted-query\n    query = \"INSERT into users (username, password) VALUES(\" + username + \", \" + password\n    _, err = db.QueryRow(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}"], "failed_type": "fn", "testsuite_a": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQuery(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\n\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\npackage main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, \" +\n    \" description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status)\" +\n    \" value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n\nfunc new2() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status) value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n", "testsuite_b": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\nfunc okDbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = customerId\"\n\n\trow, _ := db.Exec(query)\n}\n\nfunc dbQuery1(r *http.Request) {\n    // ruleid: string-formatted-query\n    _, err = db.Query(\"INSERT into users (username, password) VALUES(\" + username + \", \" + password)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbQuery2(r *http.Request, username string, password string) {\n    // ruleid: string-formatted-query\n    query = \"INSERT into users (username, password) VALUES(\" + username + \", \" + password\n    _, err = db.QueryRow(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbQuery3(r *http.Request, username string) {\n    // ruleid: string-formatted-query\n    query = username + \" AND INSERT into users (username, password)\"\n    _, err = db.Exec(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc okDbQuery1(r *http.Request) {\n    // ok: string-formatted-query\n    _, err = db.Exec(\"INSERT into users (username, password) VALUES(\" + \"username\" + \", \" + \"smth)\")\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\nfunc dbQuery4(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\npackage main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, \" +\n    \" description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status)\" +\n    \" value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n\nfunc new2() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status) value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n", "ground_truth": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    source-rule-url: https://github.com/securego/gosec\n    category: security\n  patterns:\n  - pattern-not-inside: |\n      $VAR = \"...\" + \"...\"\n      ...\n      $OBJ.$SINK(..., $VAR, ...)\n  - pattern-not: $OBJ.Exec(\"...\")\n  - pattern-not: $OBJ.ExecContext($CTX, \"...\")\n  - pattern-not: $OBJ.Query(\"...\")\n  - pattern-not: $OBJ.QueryContext($CTX, \"...\")\n  - pattern-not: $OBJ.QueryRow(\"...\")\n  - pattern-not: $OBJ.QueryRow($CTX, \"...\")\n  - pattern-not: $OBJ.QueryRowContext($CTX, \"...\")\n  - pattern-either:\n    - pattern: $OBJ.Exec($X + ...)\n    - pattern: $OBJ.ExecContext($CTX, $X + ...)\n    - pattern: $OBJ.Query($X + ...)\n    - pattern: $OBJ.QueryContext($CTX, $X + ...)\n    - pattern: $OBJ.QueryRow($X + ...)\n    - pattern: $OBJ.QueryRow($CTX, $X + ...)\n    - pattern: $OBJ.QueryRowContext($CTX, $X + ...)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "rule_path": "extend_dataset/eba59426/before/string-formatted-query.yaml", "test_path": "extend_dataset/eba59426/after/string-formatted-query.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc okDbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = customerId\"\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery4(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery2(r *http.Request, username string, password string) {\n    // ruleid: string-formatted-query\n    query = \"INSERT into users (username, password) VALUES(\" + username + \", \" + password\n    _, err = db.QueryRow(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}"], "actual": [true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false], "expected": [true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true], "index": 144, "commit_message": "fix false negative in rule (#1325)", "commit_date_str": "2021-06-14 14:05:32 +1000", "leaf_count": 36, "line_count": 226}
{"id": "string-formatted-query", "rule": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  patterns:\n  - pattern-not-inside: |\n      $VAR = \"...\" + \"...\"\n      ...\n      $OBJ.$SINK(..., $VAR, ...)\n  - pattern-either:\n    - pattern: $OBJ.Exec(\"...\" + $X)\n    - pattern: $OBJ.ExecContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Query(\"...\" + $X)\n    - pattern: $OBJ.QueryContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRow(\"...\" + $X)\n    - pattern: $OBJ.QueryRow($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRowContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "failed_tests": ["package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery3(r *http.Request, username string) {\n    // ruleid: string-formatted-query\n    query = username + \" AND INSERT into users (username, password)\"\n    _, err = db.Exec(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}"], "failed_type": "fn", "testsuite_a": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQuery(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\n\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\npackage main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, \" +\n    \" description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status)\" +\n    \" value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n\nfunc new2() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status) value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n", "testsuite_b": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\nfunc okDbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = customerId\"\n\n\trow, _ := db.Exec(query)\n}\n\nfunc dbQuery1(r *http.Request) {\n    // ruleid: string-formatted-query\n    _, err = db.Query(\"INSERT into users (username, password) VALUES(\" + username + \", \" + password)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbQuery2(r *http.Request, username string, password string) {\n    // ruleid: string-formatted-query\n    query = \"INSERT into users (username, password) VALUES(\" + username + \", \" + password\n    _, err = db.QueryRow(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbQuery3(r *http.Request, username string) {\n    // ruleid: string-formatted-query\n    query = username + \" AND INSERT into users (username, password)\"\n    _, err = db.Exec(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc okDbQuery1(r *http.Request) {\n    // ok: string-formatted-query\n    _, err = db.Exec(\"INSERT into users (username, password) VALUES(\" + \"username\" + \", \" + \"smth)\")\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\nfunc dbQuery4(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\npackage main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, \" +\n    \" description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status)\" +\n    \" value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n\nfunc new2() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status) value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n", "ground_truth": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    source-rule-url: https://github.com/securego/gosec\n    category: security\n  patterns:\n  - pattern-not-inside: |\n      $VAR = \"...\" + \"...\"\n      ...\n      $OBJ.$SINK(..., $VAR, ...)\n  - pattern-not: $OBJ.Exec(\"...\")\n  - pattern-not: $OBJ.ExecContext($CTX, \"...\")\n  - pattern-not: $OBJ.Query(\"...\")\n  - pattern-not: $OBJ.QueryContext($CTX, \"...\")\n  - pattern-not: $OBJ.QueryRow(\"...\")\n  - pattern-not: $OBJ.QueryRow($CTX, \"...\")\n  - pattern-not: $OBJ.QueryRowContext($CTX, \"...\")\n  - pattern-either:\n    - pattern: $OBJ.Exec($X + ...)\n    - pattern: $OBJ.ExecContext($CTX, $X + ...)\n    - pattern: $OBJ.Query($X + ...)\n    - pattern: $OBJ.QueryContext($CTX, $X + ...)\n    - pattern: $OBJ.QueryRow($X + ...)\n    - pattern: $OBJ.QueryRow($CTX, $X + ...)\n    - pattern: $OBJ.QueryRowContext($CTX, $X + ...)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "rule_path": "extend_dataset/eba59426/before/string-formatted-query.yaml", "test_path": "extend_dataset/eba59426/after/string-formatted-query.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc okDbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = customerId\"\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery4(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery3(r *http.Request, username string) {\n    // ruleid: string-formatted-query\n    query = username + \" AND INSERT into users (username, password)\"\n    _, err = db.Exec(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}"], "actual": [true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false], "expected": [true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true], "index": 145, "commit_message": "fix false negative in rule (#1325)", "commit_date_str": "2021-06-14 14:05:32 +1000", "leaf_count": 36, "line_count": 226}
{"id": "string-formatted-query", "rule": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  patterns:\n  - pattern-not-inside: |\n      $VAR = \"...\" + \"...\"\n      ...\n      $OBJ.$SINK(..., $VAR, ...)\n  - pattern-either:\n    - pattern: $OBJ.Exec(\"...\" + $X)\n    - pattern: $OBJ.ExecContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Query(\"...\" + $X)\n    - pattern: $OBJ.QueryContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRow(\"...\" + $X)\n    - pattern: $OBJ.QueryRow($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRowContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "failed_tests": ["package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc okDbQuery1(r *http.Request) {\n    // ok: string-formatted-query\n    _, err = db.Exec(\"INSERT into users (username, password) VALUES(\" + \"username\" + \", \" + \"smth)\")\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}"], "failed_type": "fp", "testsuite_a": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQuery(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\n\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\npackage main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, \" +\n    \" description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status)\" +\n    \" value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n\nfunc new2() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status) value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n", "testsuite_b": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\nfunc okDbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = customerId\"\n\n\trow, _ := db.Exec(query)\n}\n\nfunc dbQuery1(r *http.Request) {\n    // ruleid: string-formatted-query\n    _, err = db.Query(\"INSERT into users (username, password) VALUES(\" + username + \", \" + password)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbQuery2(r *http.Request, username string, password string) {\n    // ruleid: string-formatted-query\n    query = \"INSERT into users (username, password) VALUES(\" + username + \", \" + password\n    _, err = db.QueryRow(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbQuery3(r *http.Request, username string) {\n    // ruleid: string-formatted-query\n    query = username + \" AND INSERT into users (username, password)\"\n    _, err = db.Exec(query)\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc okDbQuery1(r *http.Request) {\n    // ok: string-formatted-query\n    _, err = db.Exec(\"INSERT into users (username, password) VALUES(\" + \"username\" + \", \" + \"smth)\")\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\nfunc dbQuery4(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\npackage main\n\nimport (\n    \"context\"\n    \"database/sql\"\n    \"fmt\"\n    \"http\"\n\n    \"github.com/jackc/pgx/v4\"\n)\n// cf. https://github.com/returntocorp/semgrep-rules/issues/1249\nfunc new() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, \" +\n    \" description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status)\" +\n    \" value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n\nfunc new2() {\n\t// ok: string-formatted-query\n    var insertSql string = \"insert into t_ad_experiment (exp_layer,buckets,opposite_buckets,is_transparent, description,is_full,start_time,end_time,creat_time,update_time,update_user,white_list,extra,status) value (?,?,?,?,?,?,?,?,?,?,?,?,?,?)\"\n    t := time.Now().Unix()\n    InsertResult, err := DbConn.Exec(insertSql, info.Exp_layer, info.Buckets, info.Opposite_buckets,\n        info.Is_transparent, info.Description, info.Is_full, info.Start_time, info.End_time, t, t,\n        session.User, info.White_list, info.Extra, 0)\n}\n", "ground_truth": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    source-rule-url: https://github.com/securego/gosec\n    category: security\n  patterns:\n  - pattern-not-inside: |\n      $VAR = \"...\" + \"...\"\n      ...\n      $OBJ.$SINK(..., $VAR, ...)\n  - pattern-not: $OBJ.Exec(\"...\")\n  - pattern-not: $OBJ.ExecContext($CTX, \"...\")\n  - pattern-not: $OBJ.Query(\"...\")\n  - pattern-not: $OBJ.QueryContext($CTX, \"...\")\n  - pattern-not: $OBJ.QueryRow(\"...\")\n  - pattern-not: $OBJ.QueryRow($CTX, \"...\")\n  - pattern-not: $OBJ.QueryRowContext($CTX, \"...\")\n  - pattern-either:\n    - pattern: $OBJ.Exec($X + ...)\n    - pattern: $OBJ.ExecContext($CTX, $X + ...)\n    - pattern: $OBJ.Query($X + ...)\n    - pattern: $OBJ.QueryContext($CTX, $X + ...)\n    - pattern: $OBJ.QueryRow($X + ...)\n    - pattern: $OBJ.QueryRow($CTX, $X + ...)\n    - pattern: $OBJ.QueryRowContext($CTX, $X + ...)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = $X + ...\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "rule_path": "extend_dataset/eba59426/before/string-formatted-query.yaml", "test_path": "extend_dataset/eba59426/after/string-formatted-query.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc okDbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = customerId\"\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery4(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    \tquery = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc okDbQuery1(r *http.Request) {\n    // ok: string-formatted-query\n    _, err = db.Exec(\"INSERT into users (username, password) VALUES(\" + \"username\" + \", \" + \"smth)\")\n    if err != nil {\n        http.Error(\"mistake\")\n    }\n}"], "actual": [true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, true], "expected": [true, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true, false], "index": 146, "commit_message": "fix false negative in rule (#1325)", "commit_date_str": "2021-06-14 14:05:32 +1000", "leaf_count": 36, "line_count": 226}
{"id": "template-href-var", "rule": "rules:\n- id: template-href-var\n  message: |\n    Detected a template variable used in an anchor tag with\n    the 'href' attribute. This allows a malicious actor to \n    input the 'javascript:' URI and is subject to cross-\n    site scripting (XSS) attacks. Ensure no user data is\n    rendered here, or consider setting the Content Security\n    Policy header.\n  languages:\n  - none\n  severity: WARNING\n  patterns:\n  - pattern-regex: |-\n      .*href\\s*=\\s*[\\\"\\']?{{\\s*.*\n", "failed_tests": ["<h4>From: {{ from_email }}</h4>\n<h4>To:\n    {% for recipient in recipients %}\n    {{ recipient }}&nbsp;\n    {% endfor %}\n</h4>\n<h4>Subject: {{subject}}</h4>\n<div class=\"email\" style=\"display: block;\">\n    {{ message }}\n</div>\n<div class=\"email-text\" style=\"display: none;\">\n    <pre>{{ body }}</pre>\n    <!-- ok: template-href-var -->\n    <a href=\"{{ url_for('index') }}\">{{ link_text }}</a>\n</div>\n<hr>"], "failed_type": "fp", "testsuite_a": "<h4>From: {{ from_email }}</h4>\n<h4>To:\n    {% for recipient in recipients %}\n    {{ recipient }}&nbsp;\n    {% endfor %}\n</h4>\n<h4>Subject: {{subject}}</h4>\n<div class=\"email\" style=\"display: block;\">\n    {{ message }}\n</div>\n<div class=\"email-text\" style=\"display: none;\">\n    <pre>{{ body }}</pre>\n    <!-- ruleid: template-href-var -->\n    <a href='{{ link }}'>{{ link_text }}</a>\n    <!-- ruleid: template-href-var -->\n    <a href = '{{ link }}' >{{ link_text }}</a>\n    <!-- TODO: should not flag here. -->\n    <!-- Might need something like pattern-not-regex. -->\n    <!-- Tried negative lookahead to no avail. -->\n    <!-- ruleid: template-href-var -->\n    <a href=\"{{ url_for('index') }}\">{{ link_text }}</a>\n    <!-- ok -->\n    <a href=\"https://example.com/\">{{ link_text }}</a>\n</div>\n<hr>\n", "testsuite_b": "<h4>From: {{ from_email }}</h4>\n<h4>To:\n    {% for recipient in recipients %}\n    {{ recipient }}&nbsp;\n    {% endfor %}\n</h4>\n<h4>Subject: {{subject}}</h4>\n<div class=\"email\" style=\"display: block;\">\n    {{ message }}\n</div>\n<div class=\"email-text\" style=\"display: none;\">\n    <pre>{{ body }}</pre>\n    <!-- ruleid: template-href-var -->\n    <a href='{{ link }}'>{{ link_text }}</a>\n    <!-- ruleid: template-href-var -->\n    <a href = '{{ link }}' >{{ link_text }}</a>\n    <!-- ok: template-href-var -->\n    <a href=\"{{ url_for('index') }}\">{{ link_text }}</a>\n    <!-- ok: template-href-var -->\n    <a href=\"https://example.com/\">{{ link_text }}</a>\n</div>\n<hr>\n", "ground_truth": "rules:\n- id: template-href-var\n  message: |\n    Detected a template variable used in an anchor tag with\n    the 'href' attribute. This allows a malicious actor to \n    input the 'javascript:' URI and is subject to cross-\n    site scripting (XSS) attacks. Use 'url_for()' to safely\n    generate a URL. You may also consider setting the Content \n    Security Policy (CSP) header.\n  metadata:\n    cwe: \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp: 'A7: Cross-site Scripting (XSS)'\n    references:\n    - https://flask.palletsprojects.com/en/1.1.x/security/#cross-site-scripting-xss\n    - https://content-security-policy.com/\n  languages:\n  - none\n  paths:\n    include:\n    - '*.html'\n  severity: WARNING\n  pattern-regex: |-\n    .*href\\s*=\\s*[\\\"\\']?{{\\s*(?!.*url_for).*\n", "rule_path": "extend_dataset/386ce2c2/before/template-href-var.yaml", "test_path": "extend_dataset/386ce2c2/after/template-href-var.html", "category": "historical", "splited_testsuite_b": ["<h4>From: {{ from_email }}</h4>\n<h4>To:\n    {% for recipient in recipients %}\n    {{ recipient }}&nbsp;\n    {% endfor %}\n</h4>\n<h4>Subject: {{subject}}</h4>\n<div class=\"email\" style=\"display: block;\">\n    {{ message }}\n</div>\n<div class=\"email-text\" style=\"display: none;\">\n    <pre>{{ body }}</pre>\n    <!-- ruleid: template-href-var -->\n    <a href='{{ link }}'>{{ link_text }}</a>\n</div>\n<hr>", "<h4>From: {{ from_email }}</h4>\n<h4>To:\n    {% for recipient in recipients %}\n    {{ recipient }}&nbsp;\n    {% endfor %}\n</h4>\n<h4>Subject: {{subject}}</h4>\n<div class=\"email\" style=\"display: block;\">\n    {{ message }}\n</div>\n<div class=\"email-text\" style=\"display: none;\">\n    <pre>{{ body }}</pre>\n    <!-- ruleid: template-href-var -->\n    <a href = '{{ link }}' >{{ link_text }}</a>\n</div>\n<hr>", "<h4>From: {{ from_email }}</h4>\n<h4>To:\n    {% for recipient in recipients %}\n    {{ recipient }}&nbsp;\n    {% endfor %}\n</h4>\n<h4>Subject: {{subject}}</h4>\n<div class=\"email\" style=\"display: block;\">\n    {{ message }}\n</div>\n<div class=\"email-text\" style=\"display: none;\">\n    <pre>{{ body }}</pre>\n    <!-- ok: template-href-var -->\n    <a href=\"https://example.com/\">{{ link_text }}</a>\n</div>\n<hr>", "<h4>From: {{ from_email }}</h4>\n<h4>To:\n    {% for recipient in recipients %}\n    {{ recipient }}&nbsp;\n    {% endfor %}\n</h4>\n<h4>Subject: {{subject}}</h4>\n<div class=\"email\" style=\"display: block;\">\n    {{ message }}\n</div>\n<div class=\"email-text\" style=\"display: none;\">\n    <pre>{{ body }}</pre>\n    <!-- ok: template-href-var -->\n    <a href=\"{{ url_for('index') }}\">{{ link_text }}</a>\n</div>\n<hr>"], "actual": [true, true, false, true], "expected": [true, true, false, false], "index": 147, "commit_message": "Filter 'url_for' out from template-href-var rule. (#840)", "commit_date_str": "2020-09-04 12:24:46 -0700", "leaf_count": 1, "line_count": 2}
{"id": "string-formatted-query", "rule": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  patterns:\n  - pattern-either:\n    - pattern: $OBJ.Exec(\"...\" + $X)\n    - pattern: $OBJ.ExecContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Query(\"...\" + $X)\n    - pattern: $OBJ.QueryContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRow(\"...\" + $X)\n    - pattern: $OBJ.QueryRowContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "failed_tests": ["package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}"], "failed_type": "fn", "testsuite_a": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n)\n\nvar db *sql.DB\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQuery(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\n\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n", "testsuite_b": "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQuery(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\n\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}\n\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}\n\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}\n\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}\n\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}\n\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}\n", "ground_truth": "rules:\n- id: string-formatted-query\n  languages: [go]\n  message: |\n    String-formatted SQL query detected. This could lead to SQL injection if\n    the string is not sanitized properly. Audit this call to ensure the\n    SQL is not manipulatable by external data.\n  severity: WARNING\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    source-rule-url: https://github.com/securego/gosec\n  patterns:\n  - pattern-either:\n    - pattern: $OBJ.Exec(\"...\" + $X)\n    - pattern: $OBJ.ExecContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Query(\"...\" + $X)\n    - pattern: $OBJ.QueryContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRow(\"...\" + $X)\n    - pattern: $OBJ.QueryRow($CTX, \"...\" + $X)\n    - pattern: $OBJ.QueryRowContext($CTX, \"...\" + $X)\n    - pattern: $OBJ.Exec(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.ExecContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.Query(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow(fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRow($CTX, fmt.$P(\"...\", ...))\n    - pattern: $OBJ.QueryRowContext($CTX, fmt.$P(\"...\", ...))\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $QUERY = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Exec($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.Query($OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.ExecContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRow($CTX, $OTHER)\n    - pattern: |\n        $QUERY = \"...\"\n        ...\n        $OTHER = $FXN(..., $QUERY, ...)\n        ...\n        $OBJ.QueryRowContext($CTX, $OTHER, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Exec($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.Query($QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.ExecContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryContext($CTX, $QUERY, ...)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRow($CTX, $QUERY)\n    - pattern: |\n        $QUERY = \"...\" + $X\n        ...\n        $OBJ.QueryRowContext($CTX, $QUERY, ...)\n", "rule_path": "extend_dataset/3f17acc1/before/string-formatted-query.yaml", "test_path": "extend_dataset/3f17acc1/after/string-formatted-query.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExec(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQuery(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRow(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContext(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Exec(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbExecContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.ExecContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowFmt(r *http.Request) {\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRow(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc dbQueryRowContextFmt(r *http.Request) {\n\tctx := context.Background()\n\tcustomerId := r.URL.Query().Get(\"id\")\n\t// ruleid: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\"\n    query = fmt.Printf(query, customerId)\n\n\trow, _ := db.QueryRowContext(ctx, query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedString() {\n\t// ok: string-formatted-query\n\tquery := \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\"\n\trow, _ := db.Query(query)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc unmodifiedStringDirectly() {\n    // ok: string-formatted-query\n\trow, _ := db.Query(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = 1234\")\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryAdd(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, \"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = \" + customerId)\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc badDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := db.QueryRowContext(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}", "package main\n\nimport (\n\t\"context\"\n\t\"database/sql\"\n\t\"fmt\"\n\t\"http\"\n\n\t\"github.com/jackc/pgx/v4\"\n)\n\nvar db *sql.DB\nvar postgresDb *pgx.Conn\n\nfunc postgresBadDirectQueryFmt(r *http.Request) {\n    ctx := context.Background()\n    customerId := r.URL.Query().Get(\"id\")\n\n\t// ruleid: string-formatted-query\n    row, _ := postgresDb.QueryRow(ctx, fmt.Printf(\"SELECT number, expireDate, cvv FROM creditcards WHERE customerId = %s\", customerId))\n}"], "actual": [true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, false], "expected": [true, true, true, true, true, true, true, true, true, true, true, true, false, false, true, true, true], "index": 148, "commit_message": "Added support for Golang format string issues from the pgx package (#951)", "commit_date_str": "2020-10-26 14:20:23 -0700", "leaf_count": 30, "line_count": 188}
{"id": "eks-insufficient-control-plane-logging", "rule": "rules:\n- id: eks-insufficient-control-plane-logging\n  patterns:\n  - pattern: |\n      name = ...\n  - pattern-inside: |\n      resource \"aws_eks_cluster\" \"...\" {\n        ...\n      }\n  - pattern-not-inside: |\n      resource \"aws_eks_cluster\" \"...\" {\n        ...\n        enabled_cluster_log_types = [..., \"api\", ..., \"audit\"]\n        ...\n      }\n  - pattern-not-inside: |\n      resource \"aws_eks_cluster\" \"...\" {\n        ...\n        enabled_cluster_log_types = [..., \"audit\", ..., \"api\"]\n        ...\n      }\n  languages:\n  - hcl\n  message: >-\n    Missing EKS control plane logging.\n    It is recommended to enable at least Kubernetes API server component logs (\"api\")\n    and audit logs (\"audit\")\n    of the EKS control plane\n    through the enabled_cluster_log_types attribute.\n  severity: WARNING\n", "failed_tests": ["resource \"aws_eks_cluster\" \"eks_cluster\" {\n  name                      = \"my-cluster-${var.test}\"\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\n    \"api\",\n    \"audit\",\n    \"authenticator\",\n    \"controllerManager\",\n    \"scheduler\"\n  ]\n\n  dynamic \"encryption_config\" {\n    for_each = 1\n    content {\n      provider {\n        key_arn = aws_kms_key.k8s_cluster_secret_encryption_key.arn\n      }\n      resources = [\n        \"secrets\"\n      ]\n    }\n  }\n}"], "failed_type": "fp", "testsuite_a": "resource \"aws_eks_cluster\" \"insecure_defaults\" {\n  # ruleid: eks-insufficient-control-plane-logging\n  name                      = \"my-cluster\"\n}\n\nresource \"aws_eks_cluster\" \"missing_api_logging\" {\n  # ruleid: eks-insufficient-control-plane-logging\n  name                      = \"my-cluster\"\n  enabled_cluster_log_types = [\"audit\"]\n}\n\n\nresource \"aws_eks_cluster\" \"ok_1\" {\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\"api\", \"audit\"]\n  name                      = \"my-cluster\"\n}\n\nresource \"aws_eks_cluster\" \"ok_2\" {\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\"audit\", \"api\"]\n  name                      = \"my-cluster\"\n}\n\nresource \"aws_eks_cluster\" \"ok_3\" {\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\"api\", \"somethingelse\", \"audit\"]\n  name                      = \"my-cluster\"\n}", "testsuite_b": "resource \"aws_eks_cluster\" \"insecure_defaults\" {\n  # ruleid: eks-insufficient-control-plane-logging\n  name                      = \"my-cluster\"\n}\n\nresource \"aws_eks_cluster\" \"missing_api_logging\" {\n  # ruleid: eks-insufficient-control-plane-logging\n  name                      = \"my-cluster\"\n  enabled_cluster_log_types = [\"audit\"]\n}\n\n\nresource \"aws_eks_cluster\" \"ok_1\" {\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\"api\", \"audit\"]\n  name                      = \"my-cluster\"\n}\n\nresource \"aws_eks_cluster\" \"ok_2\" {\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\"audit\", \"api\"]\n  name                      = \"my-cluster\"\n}\n\nresource \"aws_eks_cluster\" \"ok_3\" {\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\"api\", \"somethingelse\", \"audit\"]\n  name                      = \"my-cluster\"\n}\n\nresource \"aws_eks_cluster\" \"eks_cluster\" {\n  name                      = \"my-cluster-${var.test}\"\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\n    \"api\",\n    \"audit\",\n    \"authenticator\",\n    \"controllerManager\",\n    \"scheduler\"\n  ]\n\n  dynamic \"encryption_config\" {\n    for_each = 1\n    content {\n      provider {\n        key_arn = aws_kms_key.k8s_cluster_secret_encryption_key.arn\n      }\n      resources = [\n        \"secrets\"\n      ]\n    }\n  }\n}\n", "ground_truth": "rules:\n  - id: eks-insufficient-control-plane-logging\n    patterns:\n      - pattern: |\n          name = ...\n      - pattern-inside: |\n          resource \"aws_eks_cluster\" \"...\" {\n            ...\n          }\n      - pattern-not-inside: |\n          resource \"aws_eks_cluster\" \"...\" {\n            ...\n            enabled_cluster_log_types = [..., \"api\", ..., \"audit\", ...]\n            ...\n          }\n      - pattern-not-inside: |\n          resource \"aws_eks_cluster\" \"...\" {\n            ...\n            enabled_cluster_log_types = [..., \"audit\", ..., \"api\", ...]\n            ...\n          }\n    languages:\n      - hcl\n    message: Missing EKS control plane logging. It is recommended to enable at least\n      Kubernetes API server component logs (\"api\") and audit logs (\"audit\") of\n      the EKS control plane through the enabled_cluster_log_types attribute.\n    severity: WARNING\n    metadata:\n      references:\n        - https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/eks_cluster#enabling-control-plane-logging\n        - https://docs.aws.amazon.com/eks/latest/userguide/control-plane-logs.html\n      category: security\n      cwe:\n        - \"CWE-778: Insufficient Logging\"\n      technology:\n        - terraform\n        - aws\n      owasp:\n        - A10:2017 - Insufficient Logging & Monitoring\n        - A09:2021 - Security Logging and Monitoring Failures\n      subcategory:\n        - audit\n      likelihood: LOW\n      impact: LOW\n      confidence: LOW\n      license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/e51e07b2/before/eks-insufficient-control-plane-logging.yaml", "test_path": "extend_dataset/e51e07b2/after/eks-insufficient-control-plane-logging.tf", "category": "historical", "splited_testsuite_b": ["resource \"aws_eks_cluster\" \"insecure_defaults\" {\n  # ruleid: eks-insufficient-control-plane-logging\n  name                      = \"my-cluster\"\n}", "resource \"aws_eks_cluster\" \"missing_api_logging\" {\n  # ruleid: eks-insufficient-control-plane-logging\n  name                      = \"my-cluster\"\n  enabled_cluster_log_types = [\"audit\"]\n}", "resource \"aws_eks_cluster\" \"ok_1\" {\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\"api\", \"audit\"]\n  name                      = \"my-cluster\"\n}", "resource \"aws_eks_cluster\" \"ok_2\" {\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\"audit\", \"api\"]\n  name                      = \"my-cluster\"\n}", "resource \"aws_eks_cluster\" \"ok_3\" {\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\"api\", \"somethingelse\", \"audit\"]\n  name                      = \"my-cluster\"\n}", "resource \"aws_eks_cluster\" \"eks_cluster\" {\n  name                      = \"my-cluster-${var.test}\"\n  # ok: eks-insufficient-control-plane-logging\n  enabled_cluster_log_types = [\n    \"api\",\n    \"audit\",\n    \"authenticator\",\n    \"controllerManager\",\n    \"scheduler\"\n  ]\n\n  dynamic \"encryption_config\" {\n    for_each = 1\n    content {\n      provider {\n        key_arn = aws_kms_key.k8s_cluster_secret_encryption_key.arn\n      }\n      resources = [\n        \"secrets\"\n      ]\n    }\n  }\n}"], "actual": [true, true, false, false, false, true], "expected": [true, true, false, false, false, false], "index": 149, "commit_message": "fixing fp", "commit_date_str": "2022-10-14 15:58:02 -0700", "leaf_count": 4, "line_count": 9}
{"id": "access-foreign-keys", "rule": "rules:\n- id: access-foreign-keys\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        from django.$Y import $Z\n        ...\n    - pattern-inside: |\n        import django\n        ...\n  - pattern: $X.user.id\n  - pattern-not: request.user.id\n  message: You should use ITEM.user_id rather than ITEM.user.id to prevent running\n    an extra query.\n  languages: [python]\n  severity: WARNING\n", "failed_tests": ["```python\nfrom django.http import HttpResponse\nfrom models import User\n\nclass View(APIView):\n    def get_queryset(self):\n        # ok: access-foreign-keys\n        print(self.request.user.id)\n        return super().get_queryset()\n```"], "failed_type": "fp", "testsuite_a": "from django.http import HttpResponse\nfrom models import User\n\ndef cool_view(request):\n    # ok: access-foreign-keys\n    return HttpResponse({'user_id': request.user.id})\n\ndef other():\n    # ruleid: access-foreign-keys\n    print(User.user.id)\n", "testsuite_b": "from django.http import HttpResponse\nfrom models import User\n\n\ndef cool_view(request):\n    # ok: access-foreign-keys\n    return HttpResponse({\"user_id\": request.user.id})\n\n\ndef other():\n    # ruleid: access-foreign-keys\n    print(User.user.id)\n\n\nclass View(APIView):\n    def get_queryset(self):\n        # ok: access-foreign-keys\n        print(self.request.user.id)\n        return super().get_queryset()\n", "ground_truth": "rules:\n  - id: access-foreign-keys\n    patterns:\n      - pattern-either:\n          - pattern-inside: |\n              from django.$Y import $Z\n              ...\n          - pattern-inside: |\n              import django\n              ...\n      - pattern: $X.user.id\n      - pattern-not: request.user.id\n      - pattern-not: self.request.user.id\n    message: You should use ITEM.user_id rather than ITEM.user.id to prevent running an extra query.\n    languages: [python]\n    severity: WARNING\n    metadata:\n      category: performance\n      technology:\n        - django\n", "rule_path": "extend_dataset/11d1ee7d/before/access-foreign-keys.yaml", "test_path": "extend_dataset/11d1ee7d/after/access-foreign-keys.py", "category": "historical", "splited_testsuite_b": ["```python\nfrom django.http import HttpResponse\nfrom models import User\n\ndef cool_view(request):\n    # ok: access-foreign-keys\n    return HttpResponse({\"user_id\": request.user.id})\n```", "```python\nfrom django.http import HttpResponse\nfrom models import User\n\ndef other():\n    # ruleid: access-foreign-keys\n    print(User.user.id)\n```", "```python\nfrom django.http import HttpResponse\nfrom models import User\n\nclass View(APIView):\n    def get_queryset(self):\n        # ok: access-foreign-keys\n        print(self.request.user.id)\n        return super().get_queryset()\n```"], "actual": [false, true, true], "expected": [false, true, false], "index": 150, "commit_message": "fix: Exclude access to request.user from view (#3241)", "commit_date_str": "2023-12-20 19:07:25 +0100", "leaf_count": 4, "line_count": 14}
{"id": "dangerous-subprocess-use", "rule": "rules:\n- id: dangerous-subprocess-use\n  patterns:\n  - pattern-not: subprocess.$FUNC(\"...\", ...)\n  - pattern-not: subprocess.$FUNC([...], ...)\n  - pattern-not: subprocess.CalledProcessError(...)\n  - pattern-not: subprocess.SubprocessError(...)\n  - pattern: subprocess.$FUNC(...)\n  message: |\n    Detected subprocess function '$FUNC' without a static string. If this data can be\n    controlled by a malicious actor, it may be an instance of command injection.\n    Audit the use of this call to ensure it is not controllable by an external resource.\n    You may consider using 'shlex.escape()'.\n  languages: [python]\n  severity: WARNING\n", "failed_tests": ["# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\ndef foobar(user_input):\n  cmd = user_input.split()\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])"], "failed_type": "fn", "testsuite_a": "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nsubprocess.call(\"echo 'hello'\")\n\n# ok:dangerous-subprocess-use\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n# ok:dangerous-subprocess-use\nraise subprocess.CalledProcessError(\"{}\".format(\"foo\"))\n\n# ok:dangerous-subprocess-use\nraise subprocess.SubprocessError(\"{}\".format(\"foo\"))\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n", "testsuite_b": "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nsubprocess.call(\"echo 'hello'\")\n\n# ok:dangerous-subprocess-use\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])\n\n# ok:dangerous-subprocess-use\nraise subprocess.CalledProcessError(\"{}\".format(\"foo\"))\n\n# ok:dangerous-subprocess-use\nraise subprocess.SubprocessError(\"{}\".format(\"foo\"))\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))\n\ndef foobar(user_input):\n  cmd = user_input.split()\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)\n", "ground_truth": "rules:\n- id: dangerous-subprocess-use\n  patterns:\n  - pattern-not: subprocess.$FUNC(\"...\", ...)\n  - pattern-not: subprocess.$FUNC([\"...\",...], ...)\n  - pattern-not: subprocess.CalledProcessError(...)\n  - pattern-not: subprocess.SubprocessError(...)\n  - pattern: subprocess.$FUNC(...)\n  message: |\n    Detected subprocess function '$FUNC' without a static string. If this data can be\n    controlled by a malicious actor, it may be an instance of command injection.\n    Audit the use of this call to ensure it is not controllable by an external resource.\n    You may consider using 'shlex.escape()'.\n  metadata:\n    owasp: 'A1: Injection'\n    cwe: \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    references:\n    - https://stackoverflow.com/questions/3172470/actual-meaning-of-shell-true-in-subprocess\n    - https://docs.python.org/3/library/subprocess.html\n    - https://docs.python.org/3/library/shlex.html\n  languages: [python]\n  severity: WARNING\n", "rule_path": "extend_dataset/0f21a465/before/dangerous-subprocess-use.yaml", "test_path": "extend_dataset/0f21a465/after/dangerous-subprocess-use.py", "category": "historical", "splited_testsuite_b": ["# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nsubprocess.call(\"echo 'hello'\")", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nsubprocess.call([\"echo\", \"a\", \";\", \"rm\", \"-rf\", \"/\"])", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nraise subprocess.CalledProcessError(\"{}\".format(\"foo\"))", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ok:dangerous-subprocess-use\nraise subprocess.SubprocessError(\"{}\".format(\"foo\"))", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]))", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True)", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.call(\"grep -R {} .\".format(sys.argv[1]), shell=True, cwd=\"/home/user\")", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\n# ruleid:dangerous-subprocess-use\nsubprocess.run(\"grep -R {} .\".format(sys.argv[1]), shell=True)", "# cf. https://github.com/returntocorp/semgrep/blob/develop/docs/writing_rules/examples.md#auditing-dangerous-function-use\n\nimport subprocess\nimport sys\n\ndef foobar(user_input):\n  cmd = user_input.split()\n  # ruleid:dangerous-subprocess-use\n  subprocess.call([cmd[0], cmd[1], \"some\", \"args\"])"], "actual": [false, false, false, false, true, true, true, true, false], "expected": [false, false, false, false, true, true, true, true, true], "index": 151, "commit_message": "update dangerous-subprocess-use rule (#1168)", "commit_date_str": "2021-03-16 08:52:43 -0700", "leaf_count": 5, "line_count": 6}
{"id": "bad-deserialization", "rule": "rules:\n- id: bad-deserialization\n  patterns:\n  - pattern-either:\n    - pattern: |\n        YAML.load(...)\n    - pattern: |\n        CSV.load(...)\n    - pattern: |\n        Marshal.load(...)\n    - pattern: |\n        Marshal.restore(...)\n    - pattern: |\n        $OBJ.object_load(...)\n  - pattern-not: |\n      YAML.load(..., safe: true, ...)\n  message: >-\n    Checks for unsafe deserialization. Objects in Ruby can be serialized into strings,\n    then later loaded from strings. However, uses of load and object_load can cause\n    remote code execution.\n    Loading user input with YAML, MARSHAL, or CSV can potentially be dangerous. Use\n    JSON securely instead.\n  languages:\n  - ruby\n  severity: ERROR\n", "failed_tests": ["def ok_deserialization\n    filename = File.read(\"test.txt\")\n    data = YAML.dump(filename)\n    # ok: bad-deserialization\n    YAML.load(filename)\nend"], "failed_type": "fp", "testsuite_a": " def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = Marshal.dump(o)\n    # ruleid: bad-deserialization\n    obj = Marshal.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    # ruleid: bad-deserialization\n    obj = YAML.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = CSV.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = data.object_load()\n end\n\n def ok_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    obj = YAML.load(data, safe: true)\n end\n", "testsuite_b": " def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = Marshal.dump(o)\n    # ruleid: bad-deserialization\n    obj = Marshal.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    # ruleid: bad-deserialization\n    obj = YAML.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = CSV.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = data.object_load()\n end\n\n def ok_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    # ok: bad-deserialization\n    obj = YAML.load(data, safe: true)\n\n    filename = File.read(\"test.txt\")\n    data = YAML.dump(filename)\n    # ok: bad-deserialization\n    YAML.load(filename)\n\n    # ok: bad-deserialization\n    YAML.load(File.read(\"test.txt\"))\n end\n", "ground_truth": "rules:\n- id: bad-deserialization\n  patterns:\n  - pattern-either:\n    - pattern: |\n        YAML.load(...)\n    - pattern: |\n        CSV.load(...)\n    - pattern: |\n        Marshal.load(...)\n    - pattern: |\n        Marshal.restore(...)\n    - pattern: |\n        $OBJ.object_load(...)\n  - pattern-not: |\n      YAML.load(..., safe: true, ...)\n  - pattern-not: |\n      YAML.load(\"...\", ...)\n  - pattern-not-inside: |\n      $FILE = File.read(\"...\", ...)\n      ...\n      YAML.load(..., $FILE, ...)\n  - pattern-not-inside: |\n      $FILENAME = \"...\"\n      ...\n      $FILE = File.read($FILENAME, ...)\n      ...\n      YAML.load(..., $FILE, ...)\n  - pattern-not-inside: |\n      YAML.load(..., File.read(\"...\", ...), ...)\n  message: >-\n    Checks for unsafe deserialization. Objects in Ruby can be serialized into strings,\n    then later loaded from strings. However, uses of load and object_load can cause remote code execution.\n    Loading user input with YAML, MARSHAL, or CSV can potentially be dangerous. Use JSON securely instead.\n    However, loading YAML from a static file is not dangerous and should not be flagged.\n  metadata:\n    references:\n    - https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ\n    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb\n    category: security\n    technology:\n    - ruby\n  languages:\n  - ruby\n  severity: ERROR\n", "rule_path": "extend_dataset/fef8ff2c/before/bad-deserialization.yaml", "test_path": "extend_dataset/fef8ff2c/after/bad-deserialization.rb", "category": "historical", "splited_testsuite_b": ["def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = Marshal.dump(o)\n    # ruleid: bad-deserialization\n    obj = Marshal.load(data)\nend", "def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    # ruleid: bad-deserialization\n    obj = YAML.load(data)\nend", "def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = CSV.load(data)\nend", "def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = data.object_load()\nend", "def ok_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    # ok: bad-deserialization\n    obj = YAML.load(data, safe: true)\nend", "def ok_deserialization\n    filename = File.read(\"test.txt\")\n    data = YAML.dump(filename)\n    # ok: bad-deserialization\n    YAML.load(filename)\nend"], "actual": [true, true, true, true, false, true], "expected": [true, true, true, true, false, false], "index": 152, "commit_message": "Eliminate FPs from static file reads into YAML.loads (#1547)", "commit_date_str": "2021-10-15 22:50:05 -0500", "leaf_count": 6, "line_count": 20}
{"id": "bad-deserialization", "rule": "rules:\n- id: bad-deserialization\n  patterns:\n  - pattern-either:\n    - pattern: |\n        YAML.load(...)\n    - pattern: |\n        CSV.load(...)\n    - pattern: |\n        Marshal.load(...)\n    - pattern: |\n        Marshal.restore(...)\n    - pattern: |\n        $OBJ.object_load(...)\n  - pattern-not: |\n      YAML.load(..., safe: true, ...)\n  message: >-\n    Checks for unsafe deserialization. Objects in Ruby can be serialized into strings,\n    then later loaded from strings. However, uses of load and object_load can cause\n    remote code execution.\n    Loading user input with YAML, MARSHAL, or CSV can potentially be dangerous. Use\n    JSON securely instead.\n  languages:\n  - ruby\n  severity: ERROR\n", "failed_tests": ["def ok_deserialization\n    # ok: bad-deserialization\n    YAML.load(File.read(\"test.txt\"))\nend"], "failed_type": "fp", "testsuite_a": " def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = Marshal.dump(o)\n    # ruleid: bad-deserialization\n    obj = Marshal.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    # ruleid: bad-deserialization\n    obj = YAML.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = CSV.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = data.object_load()\n end\n\n def ok_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    obj = YAML.load(data, safe: true)\n end\n", "testsuite_b": " def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = Marshal.dump(o)\n    # ruleid: bad-deserialization\n    obj = Marshal.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    # ruleid: bad-deserialization\n    obj = YAML.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = CSV.load(data)\n\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = data.object_load()\n end\n\n def ok_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    # ok: bad-deserialization\n    obj = YAML.load(data, safe: true)\n\n    filename = File.read(\"test.txt\")\n    data = YAML.dump(filename)\n    # ok: bad-deserialization\n    YAML.load(filename)\n\n    # ok: bad-deserialization\n    YAML.load(File.read(\"test.txt\"))\n end\n", "ground_truth": "rules:\n- id: bad-deserialization\n  patterns:\n  - pattern-either:\n    - pattern: |\n        YAML.load(...)\n    - pattern: |\n        CSV.load(...)\n    - pattern: |\n        Marshal.load(...)\n    - pattern: |\n        Marshal.restore(...)\n    - pattern: |\n        $OBJ.object_load(...)\n  - pattern-not: |\n      YAML.load(..., safe: true, ...)\n  - pattern-not: |\n      YAML.load(\"...\", ...)\n  - pattern-not-inside: |\n      $FILE = File.read(\"...\", ...)\n      ...\n      YAML.load(..., $FILE, ...)\n  - pattern-not-inside: |\n      $FILENAME = \"...\"\n      ...\n      $FILE = File.read($FILENAME, ...)\n      ...\n      YAML.load(..., $FILE, ...)\n  - pattern-not-inside: |\n      YAML.load(..., File.read(\"...\", ...), ...)\n  message: >-\n    Checks for unsafe deserialization. Objects in Ruby can be serialized into strings,\n    then later loaded from strings. However, uses of load and object_load can cause remote code execution.\n    Loading user input with YAML, MARSHAL, or CSV can potentially be dangerous. Use JSON securely instead.\n    However, loading YAML from a static file is not dangerous and should not be flagged.\n  metadata:\n    references:\n    - https://groups.google.com/g/rubyonrails-security/c/61bkgvnSGTQ/m/nehwjA8tQ8EJ\n    - https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_deserialize.rb\n    category: security\n    technology:\n    - ruby\n  languages:\n  - ruby\n  severity: ERROR\n", "rule_path": "extend_dataset/fef8ff2c/before/bad-deserialization.yaml", "test_path": "extend_dataset/fef8ff2c/after/bad-deserialization.rb", "category": "historical", "splited_testsuite_b": ["def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = Marshal.dump(o)\n    # ruleid: bad-deserialization\n    obj = Marshal.load(data)\nend", "def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    # ruleid: bad-deserialization\n    obj = YAML.load(data)\nend", "def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = CSV.load(data)\nend", "def bad_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = CSV.dump(o)\n    # ruleid: bad-deserialization\n    obj = data.object_load()\nend", "def ok_deserialization\n    o = Klass.new(\"hello\\n\")\n    data = YAML.dump(o)\n    # ok: bad-deserialization\n    obj = YAML.load(data, safe: true)\nend", "def ok_deserialization\n    # ok: bad-deserialization\n    YAML.load(File.read(\"test.txt\"))\nend"], "actual": [true, true, true, true, false, true], "expected": [true, true, true, true, false, false], "index": 153, "commit_message": "Eliminate FPs from static file reads into YAML.loads (#1547)", "commit_date_str": "2021-10-15 22:50:05 -0500", "leaf_count": 6, "line_count": 20}
{"id": "file-inclusion", "rule": "rules:\n- id: file-inclusion\n  patterns:\n  - pattern: $FUNC(...);\n  - pattern-not: $FUNC(\"...\");\n  - pattern-not: $FUNC(__DIR__ . \"...\");\n  - metavariable-regex:\n      metavariable: $FUNC\n      regex: \\b(include|include_once|require|require_once)\\b\n  message: >-\n    Detected non-constant file inclusion. This can lead to local file inclusion (LFI)\n    or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI\n    could lead to sensitive files being obtained by attackers. Instead, explicitly\n    specify what to include. If that is not a viable solution, validate user input\n    thoroughly.\n  languages: [php]\n  severity: ERROR\n", "failed_tests": ["<?php\n\n// ok: file-inclusion\nrequire_once(CONFIG_DIR . '/constant.php');"], "failed_type": "fp", "testsuite_a": "<?php\n\n// ruleid: file-inclusion\ninclude($user_input);\n\n// ok: file-inclusion\ninclude('constant.php');\n\n// ruleid: file-inclusion\ninclude_once($user_input);\n\n// ok: file-inclusion\ninclude_once('constant.php');\n\n// ruleid: file-inclusion\nrequire($user_input);\n\n// ok: file-inclusion\nrequire('constant.php');\n\n// ruleid: file-inclusion\nrequire_once($user_input);\n\n// ok: file-inclusion\nrequire_once('constant.php');\n\n// ruleid: file-inclusion\ninclude(__DIR__ . $user_input);\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');\n\n// ok: file-inclusion\ninclude_safe(__DIR__ . $user_input);\n", "testsuite_b": "<?php\n\n// ruleid: file-inclusion\ninclude($user_input);\n\n// ok: file-inclusion\ninclude('constant.php');\n\n// ruleid: file-inclusion\ninclude_once($user_input);\n\n// ok: file-inclusion\ninclude_once('constant.php');\n\n// ruleid: file-inclusion\nrequire($user_input);\n\n// ok: file-inclusion\nrequire('constant.php');\n\n// ruleid: file-inclusion\nrequire_once($user_input);\n\n// ok: file-inclusion\nrequire_once('constant.php');\n\n// ruleid: file-inclusion\ninclude(__DIR__ . $user_input);\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');\n\n// ok: file-inclusion\ninclude_safe(__DIR__ . $user_input);\n\n// ok: file-inclusion\nrequire_once(CONFIG_DIR . '/constant.php');\n\n// ok: file-inclusion\nrequire_once( dirname( __FILE__ ) . '/admin.php' );\n", "ground_truth": "rules:\n  - id: file-inclusion\n    patterns:\n      - pattern-inside: $FUNC(...);\n      - pattern: $VAR\n      - metavariable-regex:\n          metavariable: $FUNC\n          regex: \\b(include|include_once|require|require_once)\\b\n      - metavariable-regex:\n          metavariable: $VAR\n          regex: \\W?\\$.+\n    message: >-\n      Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.\n    metadata:\n      references:\n        - https://www.php.net/manual/en/function.include.php\n        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php\n        - https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion\n      category: security\n      technology:\n        - php\n    languages: [php]\n    severity: ERROR\n", "rule_path": "extend_dataset/02ab62e0/before/file-inclusion.yaml", "test_path": "extend_dataset/02ab62e0/after/file-inclusion.php", "category": "historical", "splited_testsuite_b": ["<?php\n\n// ruleid: file-inclusion\ninclude($user_input);", "<?php\n\n// ok: file-inclusion\ninclude('constant.php');", "<?php\n\n// ruleid: file-inclusion\ninclude_once($user_input);", "<?php\n\n// ok: file-inclusion\ninclude_once('constant.php');", "<?php\n\n// ruleid: file-inclusion\nrequire($user_input);", "<?php\n\n// ok: file-inclusion\nrequire('constant.php');", "<?php\n\n// ruleid: file-inclusion\nrequire_once($user_input);", "<?php\n\n// ok: file-inclusion\nrequire_once('constant.php');", "<?php\n\n// ruleid: file-inclusion\ninclude(__DIR__ . $user_input);", "<?php\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');", "<?php\n\n// ok: file-inclusion\ninclude_safe(__DIR__ . $user_input);", "<?php\n\n// ok: file-inclusion\nrequire_once(CONFIG_DIR . '/constant.php');"], "actual": [true, false, true, false, true, false, true, false, true, false, false, true], "expected": [true, false, true, false, true, false, true, false, true, false, false, false], "index": 154, "commit_message": "Exclude constants from file inclusion in PHP (#2318)", "commit_date_str": "2022-08-23 11:41:22 -0500", "leaf_count": 5, "line_count": 7}
{"id": "file-inclusion", "rule": "rules:\n- id: file-inclusion\n  patterns:\n  - pattern: $FUNC(...);\n  - pattern-not: $FUNC(\"...\");\n  - pattern-not: $FUNC(__DIR__ . \"...\");\n  - metavariable-regex:\n      metavariable: $FUNC\n      regex: \\b(include|include_once|require|require_once)\\b\n  message: >-\n    Detected non-constant file inclusion. This can lead to local file inclusion (LFI)\n    or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI\n    could lead to sensitive files being obtained by attackers. Instead, explicitly\n    specify what to include. If that is not a viable solution, validate user input\n    thoroughly.\n  languages: [php]\n  severity: ERROR\n", "failed_tests": ["<?php\n\n// ok: file-inclusion\nrequire_once( dirname( __FILE__ ) . '/admin.php' );"], "failed_type": "fp", "testsuite_a": "<?php\n\n// ruleid: file-inclusion\ninclude($user_input);\n\n// ok: file-inclusion\ninclude('constant.php');\n\n// ruleid: file-inclusion\ninclude_once($user_input);\n\n// ok: file-inclusion\ninclude_once('constant.php');\n\n// ruleid: file-inclusion\nrequire($user_input);\n\n// ok: file-inclusion\nrequire('constant.php');\n\n// ruleid: file-inclusion\nrequire_once($user_input);\n\n// ok: file-inclusion\nrequire_once('constant.php');\n\n// ruleid: file-inclusion\ninclude(__DIR__ . $user_input);\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');\n\n// ok: file-inclusion\ninclude_safe(__DIR__ . $user_input);\n", "testsuite_b": "<?php\n\n// ruleid: file-inclusion\ninclude($user_input);\n\n// ok: file-inclusion\ninclude('constant.php');\n\n// ruleid: file-inclusion\ninclude_once($user_input);\n\n// ok: file-inclusion\ninclude_once('constant.php');\n\n// ruleid: file-inclusion\nrequire($user_input);\n\n// ok: file-inclusion\nrequire('constant.php');\n\n// ruleid: file-inclusion\nrequire_once($user_input);\n\n// ok: file-inclusion\nrequire_once('constant.php');\n\n// ruleid: file-inclusion\ninclude(__DIR__ . $user_input);\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');\n\n// ok: file-inclusion\ninclude_safe(__DIR__ . $user_input);\n\n// ok: file-inclusion\nrequire_once(CONFIG_DIR . '/constant.php');\n\n// ok: file-inclusion\nrequire_once( dirname( __FILE__ ) . '/admin.php' );\n", "ground_truth": "rules:\n  - id: file-inclusion\n    patterns:\n      - pattern-inside: $FUNC(...);\n      - pattern: $VAR\n      - metavariable-regex:\n          metavariable: $FUNC\n          regex: \\b(include|include_once|require|require_once)\\b\n      - metavariable-regex:\n          metavariable: $VAR\n          regex: \\W?\\$.+\n    message: >-\n      Detected non-constant file inclusion. This can lead to local file inclusion (LFI) or remote file inclusion (RFI) if user input reaches this statement. LFI and RFI could lead to sensitive files being obtained by attackers. Instead, explicitly specify what to include. If that is not a viable solution, validate user input thoroughly.\n    metadata:\n      references:\n        - https://www.php.net/manual/en/function.include.php\n        - https://github.com/FloeDesignTechnologies/phpcs-security-audit/blob/master/Security/Sniffs/BadFunctions/EasyRFISniff.php\n        - https://en.wikipedia.org/wiki/File_inclusion_vulnerability#Types_of_Inclusion\n      category: security\n      technology:\n        - php\n    languages: [php]\n    severity: ERROR\n", "rule_path": "extend_dataset/02ab62e0/before/file-inclusion.yaml", "test_path": "extend_dataset/02ab62e0/after/file-inclusion.php", "category": "historical", "splited_testsuite_b": ["<?php\n\n// ruleid: file-inclusion\ninclude($user_input);", "<?php\n\n// ok: file-inclusion\ninclude('constant.php');", "<?php\n\n// ruleid: file-inclusion\ninclude_once($user_input);", "<?php\n\n// ok: file-inclusion\ninclude_once('constant.php');", "<?php\n\n// ruleid: file-inclusion\nrequire($user_input);", "<?php\n\n// ok: file-inclusion\nrequire('constant.php');", "<?php\n\n// ruleid: file-inclusion\nrequire_once($user_input);", "<?php\n\n// ok: file-inclusion\nrequire_once('constant.php');", "<?php\n\n// ruleid: file-inclusion\ninclude(__DIR__ . $user_input);", "<?php\n\n// ok: file-inclusion\ninclude(__DIR__ . 'constant.php');", "<?php\n\n// ok: file-inclusion\ninclude_safe(__DIR__ . $user_input);", "<?php\n\n// ok: file-inclusion\nrequire_once( dirname( __FILE__ ) . '/admin.php' );"], "actual": [true, false, true, false, true, false, true, false, true, false, false, true], "expected": [true, false, true, false, true, false, true, false, true, false, false, false], "index": 155, "commit_message": "Exclude constants from file inclusion in PHP (#2318)", "commit_date_str": "2022-08-23 11:41:22 -0500", "leaf_count": 5, "line_count": 7}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  pattern-regex: \n    ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\""], "failed_type": "fp", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/b4e58447/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/b4e58447/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"", "# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\""], "actual": [true, false, false, false, true, true, false, false, true, true, true, true, true, true, true], "expected": [true, false, false, false, true, true, false, false, true, true, true, true, true, true, false], "index": 156, "commit_message": "fix for fp (#1933)", "commit_date_str": "2022-03-25 18:10:54 -0500", "leaf_count": 1, "line_count": 1}
{"id": "detected-username-and-password-in-uri", "rule": "rules:\n- id: detected-username-and-password-in-uri\n  pattern-regex: \n    ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n", "failed_tests": ["# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\""], "failed_type": "fp", "testsuite_a": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n", "testsuite_b": "# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something\n\n# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection\n\n# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com\n\n# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#\n\n# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek\n\n# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname\n\n# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection\n\n# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)\n\n# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://user:{_github_pat(github_secret_name)}@github.com/\"\n\n# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\"\n\n# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"\n", "ground_truth": "rules:\n- id: detected-username-and-password-in-uri\n  patterns:\n  - pattern-regex: ([\\w+]{1,24})(://)([^$<]{1})([^\\s\";]{1,}):([^$<\\{]{1})([^\\s\";]{1,})@[-a-zA-Z0-9@:%._\\+~#=]{1,256}[a-zA-Z0-9()]{1,24}([^\\s]+)\n  languages:\n  - regex\n  message: Username and password in URI detected\n  severity: ERROR\n  metadata:\n    source-rule-url: https://github.com/grab/secret-scanner/blob/master/scanner/signatures/pattern.go\n    category: security\n    technology:\n    - secrets\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n", "rule_path": "extend_dataset/b4e58447/before/detected-username-and-password-in-uri.yaml", "test_path": "extend_dataset/b4e58447/after/detected-username-and-password-in-uri.txt", "category": "historical", "splited_testsuite_b": ["# ruleid: detected-username-and-password-in-uri\nhttps://username:password@example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something", "# ok: detected-username-and-password-in-uri\nhttps://example.com/path/to/something?pass=word", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb/collection", "# ruleid: detected-username-and-password-in-uri\nzxc=https://makka+chakka:chakka@example.com", "# ok: detected-username-and-password-in-uri\nxvy=https://www.googly@yoyo.com/yomax#", "# ok: detected-username-and-password-in-uri\nyy=http://google@seeyou.com/mandrek", "# ruleid: detected-username-and-password-in-uri\nsamp=http://uu:pp@totalsuccess@megafailure/yourname", "# ruleid: detected-username-and-password-in-uri\ndb_url=mysql+pymysql://sampleuser:samplepassword@merchantdb.com/collection", "# ruleid: detected-username-and-password-in-uri\nHTTP (ex : `http://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\nHTTPS (ex : `https://user:password@192.168.0.1:3128/`)", "# ruleid: detected-username-and-password-in-uri\ncurl -kvsX PUT \\\"https://user:pass@something.host.test:8088/search/\\\" -H \\\"Content-Type: application/xml\\\"", "# ruleid: detected-username-and-password-in-uri\nf\"https://{get_user_name}:pwd@github.com/\"", "# ok: detected-username-and-password-in-uri\nf\"https://{get_user_name}:{_github_pat(github_secret_name)}@github.com/\""], "actual": [true, false, false, false, true, true, false, false, true, true, true, true, true, true, true], "expected": [true, false, false, false, true, true, false, false, true, true, true, true, true, true, false], "index": 157, "commit_message": "fix for fp (#1933)", "commit_date_str": "2022-03-25 18:10:54 -0500", "leaf_count": 1, "line_count": 1}
{"id": "c-string-equality", "rule": "rules:\n- id: c-string-equality\n  pattern: (char *$X) == (char *$Y)\n  message: Using == on char* performs pointer comparison, use strcmp instead\n  languages: [c]\n  severity: ERROR\n", "failed_tests": ["#include <stddef.h>\n#include <string.h>\n\nint main()\n{\n    char *s = \"Hello\";\n\n    // ok:c-string-equality\n    if (NULL == s) {\n      return 1;\n    }\n\n    return 0;\n}"], "failed_type": "fp", "testsuite_a": "#include <string.h>\n\nint main()\n{\n    char *s = \"Hello\";\n\n    // ruleid:c-string-equality\n    if (s == \"World\") {\n        return -1;\n    }\n\n    // ok:c-string-equality\n    if (strcmp(s, \"World\") == 0) {\n        return 1;\n    }\n\n    // ok:c-string-equality\n    if (!strcmp(s, \"World\")) {\n        return 1;\n    }\n\n    return 0;\n}\n", "testsuite_b": "#include <stddef.h>\n#include <string.h>\n\nint main()\n{\n    char *s = \"Hello\";\n\n    // ruleid:c-string-equality\n    if (s == \"World\") {\n        return -1;\n    }\n\n    // ok:c-string-equality\n    if (strcmp(s, \"World\") == 0) {\n        return 1;\n    }\n\n    // ok:c-string-equality\n    if (!strcmp(s, \"World\")) {\n        return 1;\n    }\n\n    // ok:c-string-equality\n    if (s == 0) {\n      return 1;\n    }\n\n    // ok:c-string-equality\n    if (NULL == s) {\n      return 1;\n    }\n\n    return 0;\n}\n", "ground_truth": "rules:\n  - id: c-string-equality\n    patterns:\n      - pattern: (char *$X) == (char *$Y)\n      - metavariable-comparison:\n          metavariable: $X\n          comparison: $X != 0\n      - metavariable-comparison:\n          metavariable: $Y\n          comparison: $Y != 0\n    message: Using == on char* performs pointer comparison, use strcmp instead\n    fix: strcmp($X, $Y) == 0\n    languages: [c]\n    severity: ERROR\n    metadata:\n      category: correctness\n      technology:\n        - c\n", "rule_path": "extend_dataset/57e7b37a/before/c-string-equality.yaml", "test_path": "extend_dataset/57e7b37a/after/c-string-equality.c", "category": "historical", "splited_testsuite_b": ["#include <stddef.h>\n#include <string.h>\n\nint main()\n{\n    char *s = \"Hello\";\n\n    // ruleid:c-string-equality\n    if (s == \"World\") {\n        return -1;\n    }\n\n    return 0;\n}", "#include <stddef.h>\n#include <string.h>\n\nint main()\n{\n    char *s = \"Hello\";\n\n    // ok:c-string-equality\n    if (strcmp(s, \"World\") == 0) {\n        return 1;\n    }\n\n    return 0;\n}", "#include <stddef.h>\n#include <string.h>\n\nint main()\n{\n    char *s = \"Hello\";\n\n    // ok:c-string-equality\n    if (!strcmp(s, \"World\")) {\n        return 1;\n    }\n\n    return 0;\n}", "#include <stddef.h>\n#include <string.h>\n\nint main()\n{\n    char *s = \"Hello\";\n\n    // ok:c-string-equality\n    if (s == 0) {\n      return 1;\n    }\n\n    return 0;\n}", "#include <stddef.h>\n#include <string.h>\n\nint main()\n{\n    char *s = \"Hello\";\n\n    // ok:c-string-equality\n    if (NULL == s) {\n      return 1;\n    }\n\n    return 0;\n}"], "actual": [true, false, false, false, true], "expected": [true, false, false, false, false], "index": 158, "commit_message": "Fix false positive: No need to use C strcmp when comparing to null", "commit_date_str": "2022-02-17 13:05:26 -0500", "leaf_count": 1, "line_count": 1}
{"id": "pg-orm-sqli", "rule": "rules:\n- id: pg-orm-sqli\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern: $DB.$METHOD(...,$QUERY,...)\n      - pattern-either:\n        - pattern-inside: |\n            $QUERY = $X + $Y\n            ...\n        - pattern-inside: |\n            $QUERY += $X\n            ...\n        - pattern-inside: |\n            $QUERY = fmt.Sprintf(\"...\", $PARAM1, ...)\n            ...\n      - pattern-not-inside: |\n          $QUERY += \"...\"\n          ...\n      - pattern-not-inside: |\n          $QUERY = \"...\" + \"...\"\n          ...\n    - pattern: |\n        $DB.$INTFUNC1(...).$METHOD(..., $X + $Y, ...).$INTFUNC2(...)\n    - pattern: |\n        $DB.$METHOD(..., fmt.Sprintf(\"...\", $PARAM1, ...), ...)\n    - pattern-inside: |\n        $DB = pg.Connect(...)\n        ...\n    - pattern-inside: |\n        func $FUNCNAME(..., $DB *pg.DB, ...) {\n          ...\n        }\n  - pattern-not: |\n      $DB.$INTFUNC1(...).$METHOD(..., \"...\" + \"...\", ...).$INTFUNC2(...)\n  - metavariable-regex:\n      metavariable: $METHOD\n      regex: ^(Where|WhereOr|Join|GroupExpr|OrderExpr|ColumnExpr)$\n  languages:\n  - go\n  message: >-\n    Detected string concatenation with a non-literal variable in a go-pg ORM\n    SQL statement. This could lead to SQL injection if the variable is user-controlled\n    and not properly sanitized. In order to prevent SQL injection,\n    do not use strings concatenated with user-controlled input.\n    Instead, use parameterized statements.\n  severity: ERROR\n", "failed_tests": ["package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok7() {\n    // ok: pg-orm-sqli\n    path.Join(\"foo\", fmt.Sprintf(\"%s.baz\", \"bar\"))\n}"], "failed_type": "fp", "testsuite_a": "package main\n\nimport (\n    \"fmt\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad1() {\n    db := pg.Connect(&pg.Options{\n        Addr:     \":5432\",\n        User:     \"user\",\n        Password: \"pass\",\n        Database: \"db_name\",\n    })\n    query = \"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n        Where(\"id > ?\", 100).\n        WhereOr(query).\n        Limit(1).\n        Select()\n}\n\nfunc bad2() {\n    db := pg.Connect(opt)\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    story := new(Story)\n    // ruleid: pg-orm-sqli\n    err = db.Model(story).\n        Relation(\"Author\").\n        From(\"Hello\").\n        Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n        Select()\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc bad3() {\n   opt, err := pg.ParseURL(\"postgres://user:pass@localhost:5432/db_name\")\n    if err != nil {\n        panic(err)\n    }\n\n    db := pg.Connect(opt)\n\n    query = \"SELECT name FROM users WHERE age=\"\n    query += req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n    Where(query).\n    WhereGroup(func(q *pg.Query) (*pg.Query, error) {\n        q = q.WhereOr(\"id = 1\").\n            WhereOr(\"id = 2\")\n        return q, nil\n    }).\n    Limit(1).\n    Select()\n}\n\nfunc bad4(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    // ruleid: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"author_id\").\n    ColumnExpr(query).\n    Group(\"author_id\").\n    Order(\"book_count DESC\").\n    Select(&res)\n}\n\nfunc bad5(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n    Select()\n}\n\nfunc bad6(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\",    email)).\n    Select()\n}\n\nfunc ok1(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\")\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}\n\nfunc ok2(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\" + \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    ColumnExpr(query).\n    Select()\n}\n\nfunc ok3(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\"\n    query += \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}\n\nfunc ok4(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"id = ?\", 1).\n    Select(&title, &text)\n}\n\nfunc ok5(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + \"3\").\n    Select(&title, &text)\n}\n\nfunc ok6(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model().\n    ColumnExpr(fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\"))\n}\n", "testsuite_b": "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad1() {\n    db := pg.Connect(&pg.Options{\n        Addr:     \":5432\",\n        User:     \"user\",\n        Password: \"pass\",\n        Database: \"db_name\",\n    })\n    query = \"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n        Where(\"id > ?\", 100).\n        WhereOr(query).\n        Limit(1).\n        Select()\n}\n\nfunc bad2() {\n    db := pg.Connect(opt)\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    story := new(Story)\n    // ruleid: pg-orm-sqli\n    err = db.Model(story).\n        Relation(\"Author\").\n        From(\"Hello\").\n        Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n        Select()\n    if err != nil {\n        panic(err)\n    }\n}\n\nfunc bad3() {\n   opt, err := pg.ParseURL(\"postgres://user:pass@localhost:5432/db_name\")\n    if err != nil {\n        panic(err)\n    }\n\n    db := pg.Connect(opt)\n\n    query = \"SELECT name FROM users WHERE age=\"\n    query += req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n    Where(query).\n    WhereGroup(func(q *pg.Query) (*pg.Query, error) {\n        q = q.WhereOr(\"id = 1\").\n            WhereOr(\"id = 2\")\n        return q, nil\n    }).\n    Limit(1).\n    Select()\n}\n\nfunc bad4(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    // ruleid: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"author_id\").\n    ColumnExpr(query).\n    Group(\"author_id\").\n    Order(\"book_count DESC\").\n    Select(&res)\n}\n\nfunc bad5(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n    Select()\n}\n\nfunc bad6(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\",    email)).\n    Select()\n}\n\nfunc ok1(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\")\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}\n\nfunc ok2(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\" + \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    ColumnExpr(query).\n    Select()\n}\n\nfunc ok3(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\"\n    query += \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}\n\nfunc ok4(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"id = ?\", 1).\n    Select(&title, &text)\n}\n\nfunc ok5(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + \"3\").\n    Select(&title, &text)\n}\n\nfunc ok6(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model().\n    ColumnExpr(fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\"))\n}\n\nfunc ok7() {\n    // ok: pg-orm-sqli\n    path.Join(\"foo\", fmt.Sprintf(\"%s.baz\", \"bar\"))\n}\n", "ground_truth": "rules:\n  - id: pg-orm-sqli\n    patterns:\n      - pattern-either:\n          - patterns:\n              - pattern: $DB.$METHOD(...,$QUERY,...)\n              - pattern-either:\n                  - pattern-inside: |\n                      $QUERY = $X + $Y\n                      ...\n                  - pattern-inside: |\n                      $QUERY += $X\n                      ...\n                  - pattern-inside: |\n                      $QUERY = fmt.Sprintf(\"...\", $PARAM1, ...)\n                      ...\n              - pattern-not-inside: |\n                  $QUERY += \"...\"\n                  ...\n              - pattern-not-inside: |\n                  $QUERY = \"...\" + \"...\"\n                  ...\n          - pattern: |\n              $DB.$INTFUNC1(...).$METHOD(..., $X + $Y, ...).$INTFUNC2(...)\n          - pattern: |\n              $DB.$METHOD(..., fmt.Sprintf(\"...\", $PARAM1, ...), ...)\n          - pattern-inside: |\n              $DB = pg.Connect(...)\n              ...\n          - pattern-inside: |\n              func $FUNCNAME(..., $DB *pg.DB, ...) {\n                ...\n              }\n      - pattern-not: |\n          $DB.$INTFUNC1(...).$METHOD(..., \"...\" + \"...\", ...).$INTFUNC2(...)\n      - pattern-not: path.Join(...)\n      - metavariable-regex:\n          metavariable: $METHOD\n          regex: ^(Where|WhereOr|Join|GroupExpr|OrderExpr|ColumnExpr)$\n    languages:\n      - go\n    message: >-\n      Detected string concatenation with a non-literal variable in a go-pg ORM\n      SQL statement. This could lead to SQL injection if the variable is user-controlled\n      and not properly sanitized. In order to prevent SQL injection,\n      do not use strings concatenated with user-controlled input.\n      Instead, use parameterized statements.\n    metadata:\n      references:\n        - https://pg.uptrace.dev/queries/\n      category: security\n      technology:\n        - go-pg\n      confidence: MEDIUM\n    severity: ERROR\n", "rule_path": "extend_dataset/a50dd601/before/pg-orm-sqli.yaml", "test_path": "extend_dataset/a50dd601/after/pg-orm-sqli.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad1() {\n    db := pg.Connect(&pg.Options{\n        Addr:     \":5432\",\n        User:     \"user\",\n        Password: \"pass\",\n        Database: \"db_name\",\n    })\n    query = \"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n        Where(\"id > ?\", 100).\n        WhereOr(query).\n        Limit(1).\n        Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad2() {\n    db := pg.Connect(opt)\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    story := new(Story)\n    // ruleid: pg-orm-sqli\n    err = db.Model(story).\n        Relation(\"Author\").\n        From(\"Hello\").\n        Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n        Select()\n    if err != nil {\n        panic(err)\n    }\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad3() {\n   opt, err := pg.ParseURL(\"postgres://user:pass@localhost:5432/db_name\")\n    if err != nil {\n        panic(err)\n    }\n\n    db := pg.Connect(opt)\n\n    query = \"SELECT name FROM users WHERE age=\"\n    query += req.FormValue(\"age\")\n    // ruleid: pg-orm-sqli\n    err := db.Model(book).\n    Where(query).\n    WhereGroup(func(q *pg.Query) (*pg.Query, error) {\n        q = q.WhereOr(\"id = 1\").\n            WhereOr(\"id = 2\")\n        return q, nil\n    }).\n    Limit(1).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad4(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\", email)\n    // ruleid: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"author_id\").\n    ColumnExpr(query).\n    Group(\"author_id\").\n    Order(\"book_count DESC\").\n    Select(&res)\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad5(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + req.FormValue(\"age\")).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc bad6(db *pg.DB) {\n    // ruleid: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(fmt.Sprintf(\"SELECT * FROM users WHERE email='%s';\",    email)).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok1(db *pg.DB) {\n    query = fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\")\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok2(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\" + \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    ColumnExpr(query).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok3(db *pg.DB) {\n    query = \"SELECT name FROM users WHERE age=\"\n    query += \"3\"\n    // ok: pg-orm-sqli\n    err = db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(query).\n    Select()\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok4(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"id = ?\", 1).\n    Select(&title, &text)\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok5(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model((*Book)(nil)).\n    Column(\"title\", \"text\").\n    Where(\"SELECT name FROM users WHERE age=\" + \"3\").\n    Select(&title, &text)\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok6(db *pg.DB) {\n    // ok: pg-orm-sqli\n    err := db.Model().\n    ColumnExpr(fmt.Sprintf(\"SELECT * FROM users WHERE email=hello;\"))\n}", "package main\n\nimport (\n    \"fmt\"\n    \"path\"\n\n    \"github.com/go-pg/pg/v10\"\n    \"github.com/go-pg/pg/v10/orm\"\n)\n\nfunc ok7() {\n    // ok: pg-orm-sqli\n    path.Join(\"foo\", fmt.Sprintf(\"%s.baz\", \"bar\"))\n}"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false], "index": 159, "commit_message": "Fix pg-orm-sqli rule (#1666)", "commit_date_str": "2022-01-21 16:11:23 -0600", "leaf_count": 13, "line_count": 48}
{"id": "missing-apk-no-cache", "rule": "rules:\n- id: missing-apk-no-cache\n  patterns:\n  - pattern: |\n      RUN apk $COMMAND ...\n  - pattern-not: |\n      RUN apk $CMD ... --no-cache ...\n  languages:\n  - dockerfile\n  message: >-\n    This apk command is missing '--no-cache'. This forces apk to use a package\n    index instead of a local package cache, removing the need for '--update'\n    and the deletion of '/var/cache/apk/*'. Add '--no-cache' to your apk command.\n  severity: INFO\n", "failed_tests": ["FROM alpine:3.7\n\n# ok: missing-apk-no-cache\nRUN apk --no-cache add"], "failed_type": "fp", "testsuite_a": "FROM alpine:3.7\n\n# ruleid: missing-apk-no-cache\nRUN apk update \\\n    && apk add foo=1.0 \\\n    && rm -rf /var/cache/apk/*\n\n# ruleid: missing-apk-no-cache\nRUN apk add --update foo=1.0 \\\n    && rm -rf /var/cache/apk/*\n\n# ok: missing-apk-no-cache\nRUN apk add --no-cache foo=1.0\n\n# ok: missing-apk-no-cache\nRUN apk add --no-cache --update foo=1.0\n\n# ok: missing-apk-no-cache\nRUN apk add --update --no-cache foo=1.0\n\n# ruleid: missing-apk-no-cache\nRUN apk add --virtual .build-deps \\\ngcc \\\nfreetype-dev \\\nmusl-dev\n\n# ok: missing-apk-no-cache\nRUN apk add --no-cache --virtual .build-deps \\\ngcc \\\nfreetype-dev \\\nmusl-dev\n", "testsuite_b": "FROM alpine:3.7\n\n# ruleid: missing-apk-no-cache\nRUN apk update \\\n    && apk add foo=1.0 \\\n    && rm -rf /var/cache/apk/*\n\n# ruleid: missing-apk-no-cache\nRUN apk add --update foo=1.0 \\\n    && rm -rf /var/cache/apk/*\n\n# ok: missing-apk-no-cache\nRUN apk add --no-cache foo=1.0\n\n# ok: missing-apk-no-cache\nRUN apk add --no-cache --update foo=1.0\n\n# ok: missing-apk-no-cache\nRUN apk add --update --no-cache foo=1.0\n\n# ruleid: missing-apk-no-cache\nRUN apk add --virtual .build-deps \\\ngcc \\\nfreetype-dev \\\nmusl-dev\n\n# ok: missing-apk-no-cache\nRUN apk add --no-cache --virtual .build-deps \\\ngcc \\\nfreetype-dev \\\nmusl-dev\n\n\n# ok: missing-apk-no-cache\nRUN apk --no-cache add", "ground_truth": "rules:\n  - id: missing-apk-no-cache\n    patterns:\n      - pattern: |\n          RUN apk $COMMAND ...\n      - pattern-not-inside: |\n          RUN apk ... --no-cache ...\n    languages:\n      - dockerfile\n    message: >-\n      This apk command is missing '--no-cache'. This forces apk to use a package\n      index instead of a local package cache, removing the need for '--update'\n      and the deletion of '/var/cache/apk/*'. Add '--no-cache' to your apk command.\n    severity: INFO\n    metadata:\n      source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3019\n      references:\n        - https://github.com/hadolint/hadolint/wiki/DL3019\n      category: best-practice\n      technology:\n        - dockerfile\n#   fix: RUN apk $COMMAND --no-cache $SOMETHING\n", "rule_path": "extend_dataset/81f7928f/before/missing-apk-no-cache.yaml", "test_path": "extend_dataset/81f7928f/after/missing-apk-no-cache.dockerfile", "category": "historical", "splited_testsuite_b": ["FROM alpine:3.7\n\n# ruleid: missing-apk-no-cache\nRUN apk update \\\n    && apk add foo=1.0 \\\n    && rm -rf /var/cache/apk/*", "FROM alpine:3.7\n\n# ruleid: missing-apk-no-cache\nRUN apk add --update foo=1.0 \\\n    && rm -rf /var/cache/apk/*", "FROM alpine:3.7\n\n# ok: missing-apk-no-cache\nRUN apk add --no-cache foo=1.0", "FROM alpine:3.7\n\n# ok: missing-apk-no-cache\nRUN apk add --no-cache --update foo=1.0", "FROM alpine:3.7\n\n# ok: missing-apk-no-cache\nRUN apk add --update --no-cache foo=1.0", "FROM alpine:3.7\n\n# ruleid: missing-apk-no-cache\nRUN apk add --virtual .build-deps \\\ngcc \\\nfreetype-dev \\\nmusl-dev", "FROM alpine:3.7\n\n# ok: missing-apk-no-cache\nRUN apk add --no-cache --virtual .build-deps \\\ngcc \\\nfreetype-dev \\\nmusl-dev", "FROM alpine:3.7\n\n# ok: missing-apk-no-cache\nRUN apk --no-cache add"], "actual": [true, true, false, false, false, true, false, true], "expected": [true, true, false, false, false, true, false, false], "index": 160, "commit_message": "Fix cache issue for customer report", "commit_date_str": "2024-03-07 12:05:27 -0800", "leaf_count": 2, "line_count": 7}
{"id": "missing-template-string-indicator", "rule": "rules:\n- id: missing-template-string-indicator\n  patterns:\n  - pattern: '`... {...} ...`'\n  - pattern-not-inside: '`... ${...} ...`'\n  languages: [generic]\n  message: >-\n    This looks like a JavaScript template string. Are you missing a '$' in front of\n    '{...}'?\n  severity: ERROR\n", "failed_tests": ["function ok() {\n  // ok: missing-template-string-indicator\n  `test`;\n  if (true) { a = 3; }\n  `test`;\n}"], "failed_type": "fp", "testsuite_a": "function name() {\n  // ok: missing-template-string-indicator\n  return `this is ${start.line}`\n}\n\nfunction name2() {\n  // ruleid: missing-template-string-indicator\n  return `this is {start.line}`\n}\n", "testsuite_b": "function name() {\n  // ok: missing-template-string-indicator\n  return `this is ${start.line}`\n}\n\nfunction ok() {\n  // ok: missing-template-string-indicator\n  `test`;\n  if (true) { a = 3; }\n  `test`;\n}\n\nfunction name2() {\n  // ruleid: missing-template-string-indicator\n  return `this is {start.line}`\n}\n\nfunction name3() {\n  // ok: missing-template-string-indicator\n  return \"this is ${start.line}\"\n}\n\n\nfunction name3() {\n  // ok: missing-template-string-indicator\n  return \"this is {start.line}\"\n}\n", "ground_truth": "rules:\n- id: missing-template-string-indicator\n  patterns:\n  - pattern-inside: |\n      `...`\n  - pattern: $STR\n  - metavariable-regex:\n      metavariable: $STR\n      regex: .*[^$]+{[^{}]*}.*\n  languages: [js, ts]\n  message: >-\n    This looks like a JavaScript template string. Are you missing a '$' in front of '{...}'?\n  severity: ERROR\n", "rule_path": "extend_dataset/1cb41fc2/before/missing-template-string-indicator.yaml", "test_path": "extend_dataset/1cb41fc2/after/missing-template-string-indicator.js", "category": "historical", "splited_testsuite_b": ["function name() {\n  // ok: missing-template-string-indicator\n  return `this is ${start.line}`\n}", "function name2() {\n  // ruleid: missing-template-string-indicator\n  return `this is {start.line}`\n}", "function name3() {\n  // ok: missing-template-string-indicator\n  return \"this is ${start.line}\"\n}", "function name3() {\n  // ok: missing-template-string-indicator\n  return \"this is {start.line}\"\n}", "function ok() {\n  // ok: missing-template-string-indicator\n  `test`;\n  if (true) { a = 3; }\n  `test`;\n}"], "actual": [false, true, false, false, true], "expected": [false, true, false, false, false], "index": 161, "commit_message": "update missing-template-string-indicator rule (#1473)", "commit_date_str": "2021-09-15 00:18:10 -0500", "leaf_count": 2, "line_count": 3}
{"id": "hardcoded-password-default-argument", "rule": "rules:\n- id: hardcoded-password-default-argument\n  message: >-\n    Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous\n    if\n    a real password is not supplied.\n  languages: [python]\n  severity: WARNING\n  pattern: |\n    def $FUNC(..., password=\"...\", ...):\n      ...\n", "failed_tests": ["# ok:hardcoded-password-default-argument\ndef ok(password=\"\"):\n    print(password)"], "failed_type": "fp", "testsuite_a": "# ok:hardcoded-password-default-argument\npassword = \"this-is-probably-a-test\"\n\ndef say_something(something):\n    print(something)\n\n# ok:hardcoded-password-default-argument\nsay_something(password)\n\n# ok:hardcoded-password-default-argument\ndef say_something_else(something_else=\"something else\"):\n    print(something_else)\n\n# ruleid:hardcoded-password-default-argument\ndef whoops(password=\"this-could-be-bad\"):\n    print(password)\n\n# ok:hardcoded-password-default-argument\ndef ok(password=None):\n    print(password)\n", "testsuite_b": "# ok:hardcoded-password-default-argument\npassword = \"this-is-probably-a-test\"\n\ndef say_something(something):\n    print(something)\n\n# ok:hardcoded-password-default-argument\nsay_something(password)\n\n# ok:hardcoded-password-default-argument\ndef say_something_else(something_else=\"something else\"):\n    print(something_else)\n\n# ruleid:hardcoded-password-default-argument\ndef whoops(password=\"this-could-be-bad\"):\n    print(password)\n\n# ok:hardcoded-password-default-argument\ndef ok(password=None):\n    print(password)\n\n# ok:hardcoded-password-default-argument\ndef ok(password=\"\"):\n    print(password)\n", "ground_truth": "rules:\n- id: hardcoded-password-default-argument\n  message: >-\n    Hardcoded password is used as a default argument to '$FUNC'. This could be dangerous\n    if\n    a real password is not supplied.\n  languages: [python]\n  severity: WARNING\n  patterns:\n    - pattern: |\n        def $FUNC(..., password=\"...\", ...):\n          ...\n    - pattern-not: |\n        def $FUNC(..., password=\"\", ...):\n          ...\n  metadata:\n    cwe:\n    - 'CWE-798: Use of Hard-coded Credentials'\n    category: security\n    technology:\n    - python\n    owasp:\n    - A07:2021 - Identification and Authentication Failures\n    references:\n    - https://owasp.org/Top10/A07_2021-Identification_and_Authentication_Failures\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: MEDIUM\n    confidence: LOW\n", "rule_path": "extend_dataset/6106c6fa/before/hardcoded-password-default-argument.yaml", "test_path": "extend_dataset/6106c6fa/after/hardcoded-password-default-argument.py", "category": "historical", "splited_testsuite_b": ["# ok:hardcoded-password-default-argument\npassword = \"this-is-probably-a-test\"\n\ndef say_something(something):\n    print(something)", "# ok:hardcoded-password-default-argument\nsay_something(password)", "# ok:hardcoded-password-default-argument\ndef say_something_else(something_else=\"something else\"):\n    print(something_else)", "# ruleid:hardcoded-password-default-argument\ndef whoops(password=\"this-could-be-bad\"):\n    print(password)", "# ok:hardcoded-password-default-argument\ndef ok(password=None):\n    print(password)", "# ok:hardcoded-password-default-argument\ndef ok(password=\"\"):\n    print(password)"], "actual": [false, false, false, true, false, true], "expected": [false, false, false, true, false, false], "index": 162, "commit_message": "Fix FPs in python empty hardcoded password (#2934)", "commit_date_str": "2023-06-01 18:06:13 +0700", "leaf_count": 1, "line_count": 1}
{"id": "check-cookie-store-session-security-attributes", "rule": "rules:\n- id: check-cookie-store-session-security-attributes\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          :$KEY => false\n      - pattern-inside: |\n          ActionController::Base.session = {...}\n    - pattern: |\n        Rails3::Application.config.session_store :cookie_store, ..., :$KEY => false, ...\n    - pattern: |\n        Rails.application.config.session_store :cookie_store, ..., $KEY: false\n  - metavariable-regex:\n      metavariable: $KEY\n      regex: ^(session_)?(http_?only|secure)$\n  message: Found a Rails `cookie_store` session configuration setting the `$KEY` attribute\n    to `false`. If using a cookie-based session store, the HttpOnly and Secure flags\n    should be set.\n  languages:\n  - ruby\n  severity: WARNING\n", "failed_tests": ["# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp::Application.config.session_store :cookie_store, httponly: false"], "failed_type": "fn", "testsuite_a": "#rails2\nActionController::Base.session = {\n  :key         => '_rails2_session',\n  :secret      => 'secret!',\n  # ruleid: check-cookie-store-session-security-attributes\n  :session_http_only   => false\n}\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :httponly => false, :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :httponly => false, :key => '_rails3_session'\n\n# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, httponly: false\n\n# ok: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, some_harmless_key: false\n", "testsuite_b": "#rails2\nActionController::Base.session = {\n  :key         => '_rails2_session',\n  :secret      => 'secret!',\n  # ruleid: check-cookie-store-session-security-attributes\n  :session_http_only   => false\n}\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :httponly => false, :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :httponly => false, :key => '_rails3_session'\n\n# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, httponly: false\n\n# ok: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, some_harmless_key: false\n\n# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp::Application.config.session_store :cookie_store, httponly: false\n\n# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp.application.config.session_store :cookie_store, httponly: false\n", "ground_truth": "rules:\n- id: check-cookie-store-session-security-attributes\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          :$KEY => false\n      - pattern-inside: |\n          ActionController::Base.session = {...}\n    - pattern: |\n        $MODULE::Application.config.session_store :cookie_store, ..., :$KEY => false, ...\n    - pattern: |\n        $CLASS.application.config.session_store :cookie_store, ..., $KEY: false\n  - metavariable-regex:\n      metavariable: $KEY\n      regex: ^(session_)?(http_?only|secure)$\n  message: Found a Rails `cookie_store` session configuration setting the `$KEY` attribute to `false`.\n    If using a cookie-based session store, the HttpOnly and Secure flags should be set.\n  languages:\n  - ruby\n  severity: WARNING\n  metadata:\n    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_session_settings.rb\n    category: security\n    cwe:\n    - \"CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag\"\n    owasp:\n    - A05:2021 - Security Misconfiguration\n    technology:\n    - ruby\n    - rails\n    references:\n    - https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n    confidence: LOW\n", "rule_path": "extend_dataset/94a4c070/before/check-cookie-store-session-security-attributes.yaml", "test_path": "extend_dataset/94a4c070/after/check-cookie-store-session-security-attributes.rb", "category": "historical", "splited_testsuite_b": ["#rails2\nActionController::Base.session = {\n  :key         => '_rails2_session',\n  :secret      => 'secret!',\n  # ruleid: check-cookie-store-session-security-attributes\n  :session_http_only   => false\n}", "#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :httponly => false, :secure => false", "#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :secure => false", "#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :httponly => false, :key => '_rails3_session'", "# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, httponly: false", "# ok: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, some_harmless_key: false", "# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp::Application.config.session_store :cookie_store, httponly: false"], "actual": [true, true, true, true, true, false, false], "expected": [true, true, true, true, true, false, true], "index": 163, "commit_message": "Allow app-specific module/class", "commit_date_str": "2023-06-13 15:35:17 -0400", "leaf_count": 6, "line_count": 19}
{"id": "check-cookie-store-session-security-attributes", "rule": "rules:\n- id: check-cookie-store-session-security-attributes\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          :$KEY => false\n      - pattern-inside: |\n          ActionController::Base.session = {...}\n    - pattern: |\n        Rails3::Application.config.session_store :cookie_store, ..., :$KEY => false, ...\n    - pattern: |\n        Rails.application.config.session_store :cookie_store, ..., $KEY: false\n  - metavariable-regex:\n      metavariable: $KEY\n      regex: ^(session_)?(http_?only|secure)$\n  message: Found a Rails `cookie_store` session configuration setting the `$KEY` attribute\n    to `false`. If using a cookie-based session store, the HttpOnly and Secure flags\n    should be set.\n  languages:\n  - ruby\n  severity: WARNING\n", "failed_tests": ["# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp.application.config.session_store :cookie_store, httponly: false"], "failed_type": "fn", "testsuite_a": "#rails2\nActionController::Base.session = {\n  :key         => '_rails2_session',\n  :secret      => 'secret!',\n  # ruleid: check-cookie-store-session-security-attributes\n  :session_http_only   => false\n}\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :httponly => false, :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :httponly => false, :key => '_rails3_session'\n\n# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, httponly: false\n\n# ok: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, some_harmless_key: false\n", "testsuite_b": "#rails2\nActionController::Base.session = {\n  :key         => '_rails2_session',\n  :secret      => 'secret!',\n  # ruleid: check-cookie-store-session-security-attributes\n  :session_http_only   => false\n}\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :httponly => false, :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :secure => false\n\n#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :httponly => false, :key => '_rails3_session'\n\n# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, httponly: false\n\n# ok: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, some_harmless_key: false\n\n# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp::Application.config.session_store :cookie_store, httponly: false\n\n# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp.application.config.session_store :cookie_store, httponly: false\n", "ground_truth": "rules:\n- id: check-cookie-store-session-security-attributes\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          :$KEY => false\n      - pattern-inside: |\n          ActionController::Base.session = {...}\n    - pattern: |\n        $MODULE::Application.config.session_store :cookie_store, ..., :$KEY => false, ...\n    - pattern: |\n        $CLASS.application.config.session_store :cookie_store, ..., $KEY: false\n  - metavariable-regex:\n      metavariable: $KEY\n      regex: ^(session_)?(http_?only|secure)$\n  message: Found a Rails `cookie_store` session configuration setting the `$KEY` attribute to `false`.\n    If using a cookie-based session store, the HttpOnly and Secure flags should be set.\n  languages:\n  - ruby\n  severity: WARNING\n  metadata:\n    source-rule-url: https://github.com/presidentbeef/brakeman/blob/main/lib/brakeman/checks/check_session_settings.rb\n    category: security\n    cwe:\n    - \"CWE-1004: Sensitive Cookie Without 'HttpOnly' Flag\"\n    owasp:\n    - A05:2021 - Security Misconfiguration\n    technology:\n    - ruby\n    - rails\n    references:\n    - https://owasp.org/www-project-web-security-testing-guide/latest/4-Web_Application_Security_Testing/06-Session_Management_Testing/02-Testing_for_Cookies_Attributes\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n    confidence: LOW\n", "rule_path": "extend_dataset/94a4c070/before/check-cookie-store-session-security-attributes.yaml", "test_path": "extend_dataset/94a4c070/after/check-cookie-store-session-security-attributes.rb", "category": "historical", "splited_testsuite_b": ["#rails2\nActionController::Base.session = {\n  :key         => '_rails2_session',\n  :secret      => 'secret!',\n  # ruleid: check-cookie-store-session-security-attributes\n  :session_http_only   => false\n}", "#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :httponly => false, :secure => false", "#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :key => '_rails3_session', :secure => false", "#rails3\n# ruleid: check-cookie-store-session-security-attributes\nRails3::Application.config.session_store :cookie_store, :httponly => false, :key => '_rails3_session'", "# ruleid: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, httponly: false", "# ok: check-cookie-store-session-security-attributes\nRails.application.config.session_store :cookie_store, some_harmless_key: false", "# ruleid: check-cookie-store-session-security-attributes\nMyRailsApp.application.config.session_store :cookie_store, httponly: false"], "actual": [true, true, true, true, true, false, false], "expected": [true, true, true, true, true, false, true], "index": 164, "commit_message": "Allow app-specific module/class", "commit_date_str": "2023-06-13 15:35:17 -0400", "leaf_count": 6, "line_count": 19}
{"id": "avoid-latest-version", "rule": "rules:\n- id: avoid-latest-version\n  message: >-\n    Images should be tagged with an explicit version to produce\n    deterministic container images. The 'latest' tag may change\n    the base container without warning.\n  severity: WARNING\n  languages: [generic]\n  pattern: FROM $IMAGE:latest\n", "failed_tests": ["# ruleid: avoid-latest-version\nFROM myregistry.local/testing/test-image:latest"], "failed_type": "fn", "testsuite_a": "# ruleid: avoid-latest-version\nFROM debian:latest\n\n# ruleid: avoid-latest-version\nFROM debian:latest as blah\n\n# ok: avoid-latest-version\nFROM debian:jessie\n\n# ok: avoid-latest-version\nFORM debian:jessie as blah2\n", "testsuite_b": "# ruleid: avoid-latest-version\nFROM debian:latest\n\n# ruleid: avoid-latest-version\nFROM myregistry.local/testing/test-image:latest\n\n# ruleid: avoid-latest-version\nFROM debian:latest as blah\n\n# ruleid: avoid-latest-version\nFROM myregistry.local/testing/test-image:latest as blah\n\n# ok: avoid-latest-version\nFROM debian:jessie\n\n# ok: avoid-latest-version\nFROM myregistry.local/testing/test-image:42ee222\n\n# ok: avoid-latest-version\nFROM debian:jessie as blah2\n\n# ok: avoid-latest-version\nFROM myregistry.local/testing/test-image:2a4af68 as blah2\n", "ground_truth": "rules:\n  - id: avoid-latest-version\n    message: >-\n      Images should be tagged with an explicit version to produce\n      deterministic container images. The 'latest' tag may change\n      the base container without warning.\n    severity: WARNING\n    languages: [generic]\n    metadata:\n      source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3007\n      references:\n        - https://github.com/hadolint/hadolint/wiki/DL3007\n      category: best-practice\n      technology:\n        - dockerfile\n    paths:\n      include:\n        - \"*dockerfile*\"\n        - \"*Dockerfile*\"\n    pattern: FROM ...:latest\n", "rule_path": "extend_dataset/3f10d90d/before/avoid-latest-version.yaml", "test_path": "extend_dataset/3f10d90d/after/avoid-latest-version.dockerfile", "category": "historical", "splited_testsuite_b": ["# ruleid: avoid-latest-version\nFROM debian:latest", "# ruleid: avoid-latest-version\nFROM debian:latest as blah", "# ok: avoid-latest-version\nFROM debian:jessie", "# ok: avoid-latest-version\nFROM myregistry.local/testing/test-image:42ee222", "# ok: avoid-latest-version\nFROM debian:jessie as blah2", "# ok: avoid-latest-version\nFROM myregistry.local/testing/test-image:2a4af68 as blah2", "# ruleid: avoid-latest-version\nFROM myregistry.local/testing/test-image:latest"], "actual": [true, true, false, false, false, false, false], "expected": [true, true, false, false, false, false, true], "index": 165, "commit_message": "Fix dockerfile avoid-latest-version rule (#1923)", "commit_date_str": "2022-03-24 14:29:00 -0500", "leaf_count": 1, "line_count": 1}
{"id": "avoid-latest-version", "rule": "rules:\n- id: avoid-latest-version\n  message: >-\n    Images should be tagged with an explicit version to produce\n    deterministic container images. The 'latest' tag may change\n    the base container without warning.\n  severity: WARNING\n  languages: [generic]\n  pattern: FROM $IMAGE:latest\n", "failed_tests": ["# ruleid: avoid-latest-version\nFROM myregistry.local/testing/test-image:latest as blah"], "failed_type": "fn", "testsuite_a": "# ruleid: avoid-latest-version\nFROM debian:latest\n\n# ruleid: avoid-latest-version\nFROM debian:latest as blah\n\n# ok: avoid-latest-version\nFROM debian:jessie\n\n# ok: avoid-latest-version\nFORM debian:jessie as blah2\n", "testsuite_b": "# ruleid: avoid-latest-version\nFROM debian:latest\n\n# ruleid: avoid-latest-version\nFROM myregistry.local/testing/test-image:latest\n\n# ruleid: avoid-latest-version\nFROM debian:latest as blah\n\n# ruleid: avoid-latest-version\nFROM myregistry.local/testing/test-image:latest as blah\n\n# ok: avoid-latest-version\nFROM debian:jessie\n\n# ok: avoid-latest-version\nFROM myregistry.local/testing/test-image:42ee222\n\n# ok: avoid-latest-version\nFROM debian:jessie as blah2\n\n# ok: avoid-latest-version\nFROM myregistry.local/testing/test-image:2a4af68 as blah2\n", "ground_truth": "rules:\n  - id: avoid-latest-version\n    message: >-\n      Images should be tagged with an explicit version to produce\n      deterministic container images. The 'latest' tag may change\n      the base container without warning.\n    severity: WARNING\n    languages: [generic]\n    metadata:\n      source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3007\n      references:\n        - https://github.com/hadolint/hadolint/wiki/DL3007\n      category: best-practice\n      technology:\n        - dockerfile\n    paths:\n      include:\n        - \"*dockerfile*\"\n        - \"*Dockerfile*\"\n    pattern: FROM ...:latest\n", "rule_path": "extend_dataset/3f10d90d/before/avoid-latest-version.yaml", "test_path": "extend_dataset/3f10d90d/after/avoid-latest-version.dockerfile", "category": "historical", "splited_testsuite_b": ["# ruleid: avoid-latest-version\nFROM debian:latest", "# ruleid: avoid-latest-version\nFROM debian:latest as blah", "# ok: avoid-latest-version\nFROM debian:jessie", "# ok: avoid-latest-version\nFROM myregistry.local/testing/test-image:42ee222", "# ok: avoid-latest-version\nFROM debian:jessie as blah2", "# ok: avoid-latest-version\nFROM myregistry.local/testing/test-image:2a4af68 as blah2", "# ruleid: avoid-latest-version\nFROM myregistry.local/testing/test-image:latest as blah"], "actual": [true, true, false, false, false, false, false], "expected": [true, true, false, false, false, false, true], "index": 166, "commit_message": "Fix dockerfile avoid-latest-version rule (#1923)", "commit_date_str": "2022-03-24 14:29:00 -0500", "leaf_count": 1, "line_count": 1}
{"id": "hardcoded-token", "rule": "rules:\n- id: hardcoded-token\n  message: >-\n    Hardcoded AWS access token detected. Attackers can possibly freely read this value\n    and gain access to the AWS environment. Instead, use environment variables to\n    access tokens (e.g., os.environ.get(...)) or use non version-controlled configuration\n    files.\n  languages: [python]\n  severity: WARNING\n  pattern-either:\n  - pattern: $W(..., aws_secret_access_key=\"=~/^[A-Za-z0-9/+=]+$/\", ...)\n  - pattern: $W(..., aws_access_key_id=\"=~/^AKI/\", ...)\n  - pattern: $W(..., aws_session_token=\"...\", ...)\n", "failed_tests": ["import boto3\nfrom boto3 import client\nimport os\n\nok_secret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=ok_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)"], "failed_type": "fp", "testsuite_a": "import boto3\nfrom boto3 import client\n\n# ruleid:hardcoded-token\nclient(\"s3\", aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")\n\n# ruleid:hardcoded-token\nboto3.sessions.Session(aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")\n\ns = boto3.sessions\n# ruleid:hardcoded-token\ns.Session(aws_access_key_id=\"AKIAxxxxxxxxxxxxxxxx\")\n\nuhoh_key = \"AKIAxxxxxxxxxxxxxxxx\"\nok_secret = os.environ.get(\"SECRET_ACCESS_KEY\")\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=uhoh_key,\n    aws_secret_access_key=ok_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\nok_key = os.environ.get(\"ACCESS_KEY_ID\")\n\nuhoh_secret = \"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\"\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=uhoh_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\n# ok:hardcoded-token\ns3 = client(\"s3\", aws_access_key_id=\"this-is-not-a-key\")\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"XXXXXXXX\",\n    aws_secret_access_key=\"----------------\",\n    region_name=\"us-east-1\",\n)\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"<your token here>\",\n    aws_secret_access_key=\"<your secret here>\",\n    region_name=\"us-east-1\",\n)\n\n# ok:hardcoded-token\nkey = os.environ.get(\"ACCESS_KEY_ID\")\nsecret = os.environ.get(\"SECRET_ACCESS_KEY\")\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=key,\n    aws_secret_access_key=secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n", "testsuite_b": "import boto3\nfrom boto3 import client\n\n# ruleid:hardcoded-token\nclient(\"s3\", aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")\n\n# ruleid:hardcoded-token\nboto3.sessions.Session(aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")\n\ns = boto3.sessions\n# ruleid:hardcoded-token\ns.Session(aws_access_key_id=\"AKIAxxxxxxxxxxxxxxxx\")\n\nuhoh_key = \"AKIAxxxxxxxxxxxxxxxx\"\nok_secret = os.environ.get(\"SECRET_ACCESS_KEY\")\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=uhoh_key,\n    aws_secret_access_key=ok_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\nok_key = os.environ.get(\"ACCESS_KEY_ID\")\n\nuhoh_secret = \"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\"\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=uhoh_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\nok_secret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=ok_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\nok_token = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=ok_secret,\n    aws_session_token=ok_token,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\n# ok:hardcoded-token\ns3 = client(\"s3\", aws_access_key_id=\"this-is-not-a-key\")\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"XXXXXXXX\",\n    aws_secret_access_key=\"----------------\",\n    region_name=\"us-east-1\",\n)\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"<your token here>\",\n    aws_secret_access_key=\"<your secret here>\",\n    region_name=\"us-east-1\",\n)\n\n# ok:hardcoded-token\nkey = os.environ.get(\"ACCESS_KEY_ID\")\nsecret = os.environ.get(\"SECRET_ACCESS_KEY\")\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=key,\n    aws_secret_access_key=secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n", "ground_truth": "rules:\n  - id: hardcoded-token\n    message: >-\n      Hardcoded AWS access token detected. Attackers can possibly freely read this value\n      and gain access to the AWS environment. Instead, use environment variables to\n      access tokens (e.g., os.environ.get(...)) or use non version-controlled configuration\n      files.\n    metadata:\n      cwe: \"CWE-798: Use of Hard-coded Credentials\"\n      owasp: \"A2: Broken Authentication\"\n      source-rule-url: https://pypi.org/project/flake8-boto3/\n      references:\n        - https://bento.dev/checks/boto3/hardcoded-access-token/\n        - https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/\n      category: security\n      technology:\n        - boto3\n    languages: [python]\n    severity: WARNING\n    pattern-either:\n    - patterns:\n      - pattern: |\n          $W(..., aws_secret_access_key=\"$ACCESSKEY\", ...)\n      - metavariable-regex:\n          metavariable: $ACCESSKEY\n          regex: ^[A-Za-z0-9/+=]+$\n      - metavariable-analysis:\n          metavariable: $ACCESSKEY\n          analyzer: entropy\n    - patterns:\n      - pattern: |\n          $W(..., aws_access_key_id=\"$KEYID\", ...)\n      - metavariable-regex:\n          metavariable: $KEYID\n          regex: ^AKI\n      - metavariable-analysis:\n          metavariable: $KEYID\n          analyzer: entropy\n    - patterns:\n      - pattern: |\n          $W(..., aws_session_token=\"$TOKEN\", ...)\n      - metavariable-analysis:\n          metavariable: $TOKEN\n          analyzer: entropy\n", "rule_path": "extend_dataset/3159ab84/before/hardcoded-token.yaml", "test_path": "extend_dataset/3159ab84/after/hardcoded-token.py", "category": "historical", "splited_testsuite_b": ["import boto3\nfrom boto3 import client\n\n# ruleid:hardcoded-token\nclient(\"s3\", aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")", "import boto3\nfrom boto3 import client\n\n# ruleid:hardcoded-token\nboto3.sessions.Session(aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")", "import boto3\nfrom boto3 import client\n\ns = boto3.sessions\n# ruleid:hardcoded-token\ns.Session(aws_access_key_id=\"AKIAxxxxxxxxxxxxxxxx\")", "import boto3\nfrom boto3 import client\nimport os\n\nuhoh_key = \"AKIAxxxxxxxxxxxxxxxx\"\nok_secret = os.environ.get(\"SECRET_ACCESS_KEY\")\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=uhoh_key,\n    aws_secret_access_key=ok_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)", "import boto3\nfrom boto3 import client\nimport os\n\nok_key = os.environ.get(\"ACCESS_KEY_ID\")\n\nuhoh_secret = \"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\"\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=uhoh_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)", "import boto3\nfrom boto3 import client\n\n# ok:hardcoded-token\ns3 = client(\"s3\", aws_access_key_id=\"this-is-not-a-key\")", "import boto3\nfrom boto3 import client\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"XXXXXXXX\",\n    aws_secret_access_key=\"----------------\",\n    region_name=\"us-east-1\",\n)", "import boto3\nfrom boto3 import client\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"<your token here>\",\n    aws_secret_access_key=\"<your secret here>\",\n    region_name=\"us-east-1\",\n)", "import boto3\nfrom boto3 import client\nimport os\n\n# ok:hardcoded-token\nkey = os.environ.get(\"ACCESS_KEY_ID\")\nsecret = os.environ.get(\"SECRET_ACCESS_KEY\")\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=key,\n    aws_secret_access_key=secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)", "import boto3\nfrom boto3 import client\nimport os\n\nok_secret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=ok_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)"], "actual": [true, true, true, true, true, false, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false, false], "index": 167, "commit_message": "add metavariable analysis", "commit_date_str": "2022-03-29 14:29:43 -0700", "leaf_count": 3, "line_count": 4}
{"id": "hardcoded-token", "rule": "rules:\n- id: hardcoded-token\n  message: >-\n    Hardcoded AWS access token detected. Attackers can possibly freely read this value\n    and gain access to the AWS environment. Instead, use environment variables to\n    access tokens (e.g., os.environ.get(...)) or use non version-controlled configuration\n    files.\n  languages: [python]\n  severity: WARNING\n  pattern-either:\n  - pattern: $W(..., aws_secret_access_key=\"=~/^[A-Za-z0-9/+=]+$/\", ...)\n  - pattern: $W(..., aws_access_key_id=\"=~/^AKI/\", ...)\n  - pattern: $W(..., aws_session_token=\"...\", ...)\n", "failed_tests": ["import boto3\nfrom boto3 import client\nimport os\n\nok_token = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=ok_secret,\n    aws_session_token=ok_token,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)"], "failed_type": "fp", "testsuite_a": "import boto3\nfrom boto3 import client\n\n# ruleid:hardcoded-token\nclient(\"s3\", aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")\n\n# ruleid:hardcoded-token\nboto3.sessions.Session(aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")\n\ns = boto3.sessions\n# ruleid:hardcoded-token\ns.Session(aws_access_key_id=\"AKIAxxxxxxxxxxxxxxxx\")\n\nuhoh_key = \"AKIAxxxxxxxxxxxxxxxx\"\nok_secret = os.environ.get(\"SECRET_ACCESS_KEY\")\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=uhoh_key,\n    aws_secret_access_key=ok_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\nok_key = os.environ.get(\"ACCESS_KEY_ID\")\n\nuhoh_secret = \"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\"\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=uhoh_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\n# ok:hardcoded-token\ns3 = client(\"s3\", aws_access_key_id=\"this-is-not-a-key\")\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"XXXXXXXX\",\n    aws_secret_access_key=\"----------------\",\n    region_name=\"us-east-1\",\n)\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"<your token here>\",\n    aws_secret_access_key=\"<your secret here>\",\n    region_name=\"us-east-1\",\n)\n\n# ok:hardcoded-token\nkey = os.environ.get(\"ACCESS_KEY_ID\")\nsecret = os.environ.get(\"SECRET_ACCESS_KEY\")\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=key,\n    aws_secret_access_key=secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n", "testsuite_b": "import boto3\nfrom boto3 import client\n\n# ruleid:hardcoded-token\nclient(\"s3\", aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")\n\n# ruleid:hardcoded-token\nboto3.sessions.Session(aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")\n\ns = boto3.sessions\n# ruleid:hardcoded-token\ns.Session(aws_access_key_id=\"AKIAxxxxxxxxxxxxxxxx\")\n\nuhoh_key = \"AKIAxxxxxxxxxxxxxxxx\"\nok_secret = os.environ.get(\"SECRET_ACCESS_KEY\")\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=uhoh_key,\n    aws_secret_access_key=ok_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\nok_key = os.environ.get(\"ACCESS_KEY_ID\")\n\nuhoh_secret = \"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\"\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=uhoh_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\nok_secret = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=ok_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\nok_token = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=ok_secret,\n    aws_session_token=ok_token,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n\n# ok:hardcoded-token\ns3 = client(\"s3\", aws_access_key_id=\"this-is-not-a-key\")\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"XXXXXXXX\",\n    aws_secret_access_key=\"----------------\",\n    region_name=\"us-east-1\",\n)\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"<your token here>\",\n    aws_secret_access_key=\"<your secret here>\",\n    region_name=\"us-east-1\",\n)\n\n# ok:hardcoded-token\nkey = os.environ.get(\"ACCESS_KEY_ID\")\nsecret = os.environ.get(\"SECRET_ACCESS_KEY\")\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=key,\n    aws_secret_access_key=secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)\n", "ground_truth": "rules:\n  - id: hardcoded-token\n    message: >-\n      Hardcoded AWS access token detected. Attackers can possibly freely read this value\n      and gain access to the AWS environment. Instead, use environment variables to\n      access tokens (e.g., os.environ.get(...)) or use non version-controlled configuration\n      files.\n    metadata:\n      cwe: \"CWE-798: Use of Hard-coded Credentials\"\n      owasp: \"A2: Broken Authentication\"\n      source-rule-url: https://pypi.org/project/flake8-boto3/\n      references:\n        - https://bento.dev/checks/boto3/hardcoded-access-token/\n        - https://aws.amazon.com/blogs/security/what-to-do-if-you-inadvertently-expose-an-aws-access-key/\n      category: security\n      technology:\n        - boto3\n    languages: [python]\n    severity: WARNING\n    pattern-either:\n    - patterns:\n      - pattern: |\n          $W(..., aws_secret_access_key=\"$ACCESSKEY\", ...)\n      - metavariable-regex:\n          metavariable: $ACCESSKEY\n          regex: ^[A-Za-z0-9/+=]+$\n      - metavariable-analysis:\n          metavariable: $ACCESSKEY\n          analyzer: entropy\n    - patterns:\n      - pattern: |\n          $W(..., aws_access_key_id=\"$KEYID\", ...)\n      - metavariable-regex:\n          metavariable: $KEYID\n          regex: ^AKI\n      - metavariable-analysis:\n          metavariable: $KEYID\n          analyzer: entropy\n    - patterns:\n      - pattern: |\n          $W(..., aws_session_token=\"$TOKEN\", ...)\n      - metavariable-analysis:\n          metavariable: $TOKEN\n          analyzer: entropy\n", "rule_path": "extend_dataset/3159ab84/before/hardcoded-token.yaml", "test_path": "extend_dataset/3159ab84/after/hardcoded-token.py", "category": "historical", "splited_testsuite_b": ["import boto3\nfrom boto3 import client\n\n# ruleid:hardcoded-token\nclient(\"s3\", aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")", "import boto3\nfrom boto3 import client\n\n# ruleid:hardcoded-token\nboto3.sessions.Session(aws_secret_access_key=\"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\")", "import boto3\nfrom boto3 import client\n\ns = boto3.sessions\n# ruleid:hardcoded-token\ns.Session(aws_access_key_id=\"AKIAxxxxxxxxxxxxxxxx\")", "import boto3\nfrom boto3 import client\nimport os\n\nuhoh_key = \"AKIAxxxxxxxxxxxxxxxx\"\nok_secret = os.environ.get(\"SECRET_ACCESS_KEY\")\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=uhoh_key,\n    aws_secret_access_key=ok_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)", "import boto3\nfrom boto3 import client\nimport os\n\nok_key = os.environ.get(\"ACCESS_KEY_ID\")\n\nuhoh_secret = \"jWnyxxxxxxxxxxxxxxxxX7ZQxxxxxxxxxxxxxxxx\"\n# ruleid:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=uhoh_secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)", "import boto3\nfrom boto3 import client\n\n# ok:hardcoded-token\ns3 = client(\"s3\", aws_access_key_id=\"this-is-not-a-key\")", "import boto3\nfrom boto3 import client\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"XXXXXXXX\",\n    aws_secret_access_key=\"----------------\",\n    region_name=\"us-east-1\",\n)", "import boto3\nfrom boto3 import client\n\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=\"<your token here>\",\n    aws_secret_access_key=\"<your secret here>\",\n    region_name=\"us-east-1\",\n)", "import boto3\nfrom boto3 import client\nimport os\n\n# ok:hardcoded-token\nkey = os.environ.get(\"ACCESS_KEY_ID\")\nsecret = os.environ.get(\"SECRET_ACCESS_KEY\")\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=key,\n    aws_secret_access_key=secret,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)", "import boto3\nfrom boto3 import client\nimport os\n\nok_token = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n# ok:hardcoded-token\ns3 = boto3.resource(\n    \"s3\",\n    aws_access_key_id=ok_key,\n    aws_secret_access_key=ok_secret,\n    aws_session_token=ok_token,\n    region_name=\"sfo2\",\n    endpoint_url=\"https://sfo2.digitaloceanspaces.com\",\n)"], "actual": [true, true, true, true, true, false, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false, false], "index": 168, "commit_message": "add metavariable analysis", "commit_date_str": "2022-03-29 14:29:43 -0700", "leaf_count": 3, "line_count": 4}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages: [scala]\n  severity: ERROR\n  mode: taint\n  message: >-\n    User data flows into this manually-constructed SQL string. User data\n    can be safely inserted into SQL strings using prepared statements or an\n    object-relational mapper (ORM). Manually-constructed SQL strings is a\n    possible indicator of SQL injection, which could let an attacker steal or\n    manipulate data from the database. Instead, use prepared statements\n    (`connection.PreparedStatement`) or a safe library.\n  pattern-sources:\n  - patterns:\n    - pattern: $PARAM\n    - pattern-either:\n      - pattern-inside: |\n          def $CTRL(..., $PARAM: $TYPE, ...) = {\n            ...\n          }\n      - pattern-inside: |\n          def $CTRL(..., $PARAM: $TYPE, ...) = $A {\n            ...\n          }\n      - pattern-inside: |\n          def $CTRL(..., $PARAM: $TYPE, ...) = $A(...) {\n            ...\n          }\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              \"$SQLSTR\" + ...\n          - pattern: |\n              \"$SQLSTR\".format(...)\n          - patterns:\n            - pattern-inside: |\n                $SB = new StringBuilder(\"$SQLSTR\");\n                ...\n            - pattern: $SB.append(...)\n          - patterns:\n            - pattern-inside: |\n                $VAR = \"$SQLSTR\"\n                ...\n            - pattern: $VAR += ...\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n      - patterns:\n        - pattern-either:\n          - pattern: s\"...\"\n          - pattern: f\"...\"\n        - pattern-regex: |\n            .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - pattern-not-inside: println(...)\n", "failed_tests": ["package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def loggingCall1(name: String) = {\n    val log = LoggerFactory.getLogger(getClass.getSimpleName)\n    // ok: tainted-sql-string\n    log.trace(\"Create user\" + name)\n  }\n}"], "failed_type": "fp", "testsuite_a": "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\n\nobject Smth {\n\n  def call1(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + name + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call2(name: String) = {\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ruleid: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $name;\")\n    rs\n  }\n\n  def call3(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = f\"SELECT * FROM table WHERE name = $name%s;\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call4(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call5(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name + \"smth\"};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def okCall1(name: String) = {\n    val foobar = getFoobarFromEnv()\n    // ok: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + foobar + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def okCall2(name: String) = {\n    val foobar = \"Foobar\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ok: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $foobar;\")\n    rs\n  }\n\n  def okCall3(name: String) = {\n    // ok: tainted-sql-string\n    println(\"SELECT * FROM table WHERE name = \" + name + \";\")\n    doSmth(name)\n  }\n\n\n}", "testsuite_b": "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call1(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + name + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call2(name: String) = {\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ruleid: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $name;\")\n    rs\n  }\n\n  def call3(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = f\"SELECT * FROM table WHERE name = $name%s;\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call4(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call5(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name + \"smth\"};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def okCall1(name: String) = {\n    val foobar = getFoobarFromEnv()\n    // ok: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + foobar + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def okCall2(name: String) = {\n    val foobar = \"Foobar\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ok: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $foobar;\")\n    rs\n  }\n\n  def okCall3(name: String) = {\n    // ok: tainted-sql-string\n    println(\"SELECT * FROM table WHERE name = \" + name + \";\")\n    doSmth(name)\n  }\n\n  def loggingCall1(name: String) = {\n    val log = LoggerFactory.getLogger(getClass.getSimpleName)\n    // ok: tainted-sql-string\n    log.trace(\"Create user\" + name)\n  }\n\n  def loggingCall2(name: String) = {\n    val scribe = LoggerFactory.getLogger(getClass.getSimpleName)\n    // ok: tainted-sql-string\n    scribe.warnToError(\"Create user\" + name)\n  }\n}\n", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages:\n    - scala\n  severity: ERROR\n  mode: taint\n  message: User data flows into this manually-constructed SQL string. User data\n    can be safely inserted into SQL strings using prepared statements or an\n    object-relational mapper (ORM). Manually-constructed SQL strings is a possible\n    indicator of SQL injection, which could let an attacker steal or manipulate\n    data from the database. Instead, use prepared statements\n    (`connection.PreparedStatement`) or a safe library.\n  metadata:\n    cwe: \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command\n      ('SQL Injection')\"\n    owasp:\n      - A03:2021\n      - A01:2017\n    references:\n      - https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\n    category: security\n    technology:\n      - scala\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n  pattern-sources:\n    - patterns:\n        - pattern: $PARAM\n        - pattern-either:\n            - pattern-inside: |\n                def $CTRL(..., $PARAM: $TYPE, ...) = {\n                  ...\n                }\n            - pattern-inside: |\n                def $CTRL(..., $PARAM: $TYPE, ...) = $A {\n                  ...\n                }\n            - pattern-inside: |\n                def $CTRL(..., $PARAM: $TYPE, ...) = $A(...) {\n                  ...\n                }\n  pattern-sinks:\n    - patterns:\n        - pattern-either:\n            - patterns:\n                - pattern-either:\n                    - pattern: |\n                        \"$SQLSTR\" + ...\n                    - pattern: |\n                        \"$SQLSTR\".format(...)\n                    - patterns:\n                        - pattern-inside: |\n                            $SB = new StringBuilder(\"$SQLSTR\");\n                            ...\n                        - pattern: $SB.append(...)\n                    - patterns:\n                        - pattern-inside: |\n                            $VAR = \"$SQLSTR\"\n                            ...\n                        - pattern: $VAR += ...\n                - metavariable-regex:\n                    metavariable: $SQLSTR\n                    regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n            - patterns:\n                - pattern-either:\n                    - pattern: s\"...\"\n                    - pattern: f\"...\"\n                - pattern-regex: |\n                    .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n        - pattern-not-inside: println(...)\n  pattern-sanitizers:\n    - pattern-either:\n      - patterns:\n        - pattern: $LOGGER.$METHOD(...)\n        - metavariable-regex:\n            metavariable: $LOGGER\n            regex: (i?)log.*\n      - patterns:\n        - pattern: $LOGGER.$METHOD(...)\n        - metavariable-regex:\n            metavariable: $METHOD\n            regex: (i?)(trace|info|warn|warning|warnToError|error|debug)\n  \n", "rule_path": "extend_dataset/24196efd/before/tainted-sql-string.yaml", "test_path": "extend_dataset/24196efd/after/tainted-sql-string.scala", "category": "historical", "splited_testsuite_b": ["package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call1(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + name + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call2(name: String) = {\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ruleid: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $name;\")\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call3(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = f\"SELECT * FROM table WHERE name = $name%s;\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call4(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call5(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name + \"smth\"};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def okCall1(name: String) = {\n    val foobar = getFoobarFromEnv()\n    // ok: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + foobar + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def okCall2(name: String) = {\n    val foobar = \"Foobar\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ok: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $foobar;\")\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def okCall3(name: String) = {\n    // ok: tainted-sql-string\n    println(\"SELECT * FROM table WHERE name = \" + name + \";\")\n    doSmth(name)\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def loggingCall1(name: String) = {\n    val log = LoggerFactory.getLogger(getClass.getSimpleName)\n    // ok: tainted-sql-string\n    log.trace(\"Create user\" + name)\n  }\n}"], "actual": [true, true, true, true, true, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false], "index": 169, "commit_message": "Filter logger-style statements from tainted-sql-string (#2101)", "commit_date_str": "2022-05-26 17:57:09 -0500", "leaf_count": 16, "line_count": 43}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages: [scala]\n  severity: ERROR\n  mode: taint\n  message: >-\n    User data flows into this manually-constructed SQL string. User data\n    can be safely inserted into SQL strings using prepared statements or an\n    object-relational mapper (ORM). Manually-constructed SQL strings is a\n    possible indicator of SQL injection, which could let an attacker steal or\n    manipulate data from the database. Instead, use prepared statements\n    (`connection.PreparedStatement`) or a safe library.\n  pattern-sources:\n  - patterns:\n    - pattern: $PARAM\n    - pattern-either:\n      - pattern-inside: |\n          def $CTRL(..., $PARAM: $TYPE, ...) = {\n            ...\n          }\n      - pattern-inside: |\n          def $CTRL(..., $PARAM: $TYPE, ...) = $A {\n            ...\n          }\n      - pattern-inside: |\n          def $CTRL(..., $PARAM: $TYPE, ...) = $A(...) {\n            ...\n          }\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              \"$SQLSTR\" + ...\n          - pattern: |\n              \"$SQLSTR\".format(...)\n          - patterns:\n            - pattern-inside: |\n                $SB = new StringBuilder(\"$SQLSTR\");\n                ...\n            - pattern: $SB.append(...)\n          - patterns:\n            - pattern-inside: |\n                $VAR = \"$SQLSTR\"\n                ...\n            - pattern: $VAR += ...\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n      - patterns:\n        - pattern-either:\n          - pattern: s\"...\"\n          - pattern: f\"...\"\n        - pattern-regex: |\n            .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n    - pattern-not-inside: println(...)\n", "failed_tests": ["package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def loggingCall2(name: String) = {\n    val scribe = LoggerFactory.getLogger(getClass.getSimpleName)\n    // ok: tainted-sql-string\n    scribe.warnToError(\"Create user\" + name)\n  }\n}"], "failed_type": "fp", "testsuite_a": "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\n\nobject Smth {\n\n  def call1(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + name + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call2(name: String) = {\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ruleid: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $name;\")\n    rs\n  }\n\n  def call3(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = f\"SELECT * FROM table WHERE name = $name%s;\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call4(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call5(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name + \"smth\"};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def okCall1(name: String) = {\n    val foobar = getFoobarFromEnv()\n    // ok: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + foobar + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def okCall2(name: String) = {\n    val foobar = \"Foobar\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ok: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $foobar;\")\n    rs\n  }\n\n  def okCall3(name: String) = {\n    // ok: tainted-sql-string\n    println(\"SELECT * FROM table WHERE name = \" + name + \";\")\n    doSmth(name)\n  }\n\n\n}", "testsuite_b": "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call1(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + name + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call2(name: String) = {\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ruleid: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $name;\")\n    rs\n  }\n\n  def call3(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = f\"SELECT * FROM table WHERE name = $name%s;\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call4(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def call5(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name + \"smth\"};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def okCall1(name: String) = {\n    val foobar = getFoobarFromEnv()\n    // ok: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + foobar + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n\n  def okCall2(name: String) = {\n    val foobar = \"Foobar\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ok: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $foobar;\")\n    rs\n  }\n\n  def okCall3(name: String) = {\n    // ok: tainted-sql-string\n    println(\"SELECT * FROM table WHERE name = \" + name + \";\")\n    doSmth(name)\n  }\n\n  def loggingCall1(name: String) = {\n    val log = LoggerFactory.getLogger(getClass.getSimpleName)\n    // ok: tainted-sql-string\n    log.trace(\"Create user\" + name)\n  }\n\n  def loggingCall2(name: String) = {\n    val scribe = LoggerFactory.getLogger(getClass.getSimpleName)\n    // ok: tainted-sql-string\n    scribe.warnToError(\"Create user\" + name)\n  }\n}\n", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages:\n    - scala\n  severity: ERROR\n  mode: taint\n  message: User data flows into this manually-constructed SQL string. User data\n    can be safely inserted into SQL strings using prepared statements or an\n    object-relational mapper (ORM). Manually-constructed SQL strings is a possible\n    indicator of SQL injection, which could let an attacker steal or manipulate\n    data from the database. Instead, use prepared statements\n    (`connection.PreparedStatement`) or a safe library.\n  metadata:\n    cwe: \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command\n      ('SQL Injection')\"\n    owasp:\n      - A03:2021\n      - A01:2017\n    references:\n      - https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\n    category: security\n    technology:\n      - scala\n    confidence: MEDIUM\n    license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n  pattern-sources:\n    - patterns:\n        - pattern: $PARAM\n        - pattern-either:\n            - pattern-inside: |\n                def $CTRL(..., $PARAM: $TYPE, ...) = {\n                  ...\n                }\n            - pattern-inside: |\n                def $CTRL(..., $PARAM: $TYPE, ...) = $A {\n                  ...\n                }\n            - pattern-inside: |\n                def $CTRL(..., $PARAM: $TYPE, ...) = $A(...) {\n                  ...\n                }\n  pattern-sinks:\n    - patterns:\n        - pattern-either:\n            - patterns:\n                - pattern-either:\n                    - pattern: |\n                        \"$SQLSTR\" + ...\n                    - pattern: |\n                        \"$SQLSTR\".format(...)\n                    - patterns:\n                        - pattern-inside: |\n                            $SB = new StringBuilder(\"$SQLSTR\");\n                            ...\n                        - pattern: $SB.append(...)\n                    - patterns:\n                        - pattern-inside: |\n                            $VAR = \"$SQLSTR\"\n                            ...\n                        - pattern: $VAR += ...\n                - metavariable-regex:\n                    metavariable: $SQLSTR\n                    regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n            - patterns:\n                - pattern-either:\n                    - pattern: s\"...\"\n                    - pattern: f\"...\"\n                - pattern-regex: |\n                    .*\\b(?i)(select|delete|insert|create|update|alter|drop)\\b.*\n        - pattern-not-inside: println(...)\n  pattern-sanitizers:\n    - pattern-either:\n      - patterns:\n        - pattern: $LOGGER.$METHOD(...)\n        - metavariable-regex:\n            metavariable: $LOGGER\n            regex: (i?)log.*\n      - patterns:\n        - pattern: $LOGGER.$METHOD(...)\n        - metavariable-regex:\n            metavariable: $METHOD\n            regex: (i?)(trace|info|warn|warning|warnToError|error|debug)\n  \n", "rule_path": "extend_dataset/24196efd/before/tainted-sql-string.yaml", "test_path": "extend_dataset/24196efd/after/tainted-sql-string.scala", "category": "historical", "splited_testsuite_b": ["package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call1(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + name + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call2(name: String) = {\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ruleid: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $name;\")\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call3(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = f\"SELECT * FROM table WHERE name = $name%s;\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call4(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def call5(name: String) = {\n    // ruleid: tainted-sql-string\n    val sql = s\"SELECT * FROM table WHERE name = ${name + \"smth\"};\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def okCall1(name: String) = {\n    val foobar = getFoobarFromEnv()\n    // ok: tainted-sql-string\n    val sql = \"SELECT * FROM table WHERE name = \" + foobar + \";\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    val rs = stmt.execute(sql)\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def okCall2(name: String) = {\n    val foobar = \"Foobar\"\n    val conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\")\n    val stmt = conn.createStatement()\n    // ok: tainted-sql-string\n    val rs = stmt.execute(s\"SELECT * FROM table WHERE name = $foobar;\")\n    rs\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def okCall3(name: String) = {\n    // ok: tainted-sql-string\n    println(\"SELECT * FROM table WHERE name = \" + name + \";\")\n    doSmth(name)\n  }\n}", "package com.test.test\n\nimport java.sql.{Connection, ResultSet, DriverManager}\nimport org.slf4j.LoggerFactory\n\nobject Smth {\n\n  def loggingCall2(name: String) = {\n    val scribe = LoggerFactory.getLogger(getClass.getSimpleName)\n    // ok: tainted-sql-string\n    scribe.warnToError(\"Create user\" + name)\n  }\n}"], "actual": [true, true, true, true, true, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false], "index": 170, "commit_message": "Filter logger-style statements from tainted-sql-string (#2101)", "commit_date_str": "2022-05-26 17:57:09 -0500", "leaf_count": 16, "line_count": 43}
{"id": "nontext-field-must-set-null-true", "rule": "rules:\n- id: nontext-field-must-set-null-true\n  patterns:\n  - pattern-inside: |\n      class $M(...):\n        ...\n  - pattern-not: $F = django.db.models.CharField(...)\n  - pattern-not: $F = django.db.models.TextField(...)\n  - pattern-not: $F = django.db.models.SlugField(...)\n  - pattern-not: $F = django.db.models.EmailField(...)\n  - pattern-not: $F = django.db.models.URLField(...)\n  - pattern-not: $F = django.db.models.UUIDField(...)\n  - pattern-not: $F = django.db.models.ManyToManyField(...)\n  - pattern-not: $F = django.db.models.NullBooleanField(...)\n  - pattern-not: $F = $X(..., null=True, blank=True, ...)\n  - pattern: $F = $X(..., blank=True, ...)\n  message: null=True should be set if blank=True is set on non-text fields.\n  languages: [python]\n  severity: ERROR\n", "failed_tests": ["```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldFile = models.FileField(blank=True)\n```"], "failed_type": "fp", "testsuite_a": "from django.db import models\n\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n", "testsuite_b": "from django.db import models\n\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldFile = models.FileField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldImage = models.ImageField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n", "ground_truth": "rules:\n- id: nontext-field-must-set-null-true\n  patterns:\n  - pattern-inside: |\n      class $M(...):\n        ...\n  - pattern-not: $F = django.db.models.CharField(...)\n  - pattern-not: $F = django.db.models.TextField(...)\n  - pattern-not: $F = django.db.models.SlugField(...)\n  - pattern-not: $F = django.db.models.EmailField(...)\n  - pattern-not: $F = django.db.models.FileField(...)\n  - pattern-not: $F = django.db.models.ImageField(...)\n  - pattern-not: $F = django.db.models.URLField(...)\n  - pattern-not: $F = django.db.models.UUIDField(...)\n  - pattern-not: $F = django.db.models.ManyToManyField(...)\n  - pattern-not: $F = django.db.models.NullBooleanField(...)\n  - pattern-not: $F = $X(..., null=True, blank=True, ...)\n  - pattern: $F = $X(..., blank=True, ...)\n  message: null=True should be set if blank=True is set on non-text fields.\n  languages: [python]\n  severity: ERROR\n", "rule_path": "extend_dataset/d023a035/before/nontext-field-must-set-null-true.yaml", "test_path": "extend_dataset/d023a035/after/nontext-field-must-set-null-true.py", "category": "historical", "splited_testsuite_b": ["```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n```", "```python\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldFile = models.FileField(blank=True)\n```"], "actual": [false, false, false, false, false, false, false, true, false, false, true], "expected": [false, false, false, false, false, false, false, true, false, false, false], "index": 171, "commit_message": "Add more Django's text-based fields (#1108)", "commit_date_str": "2021-02-19 10:12:41 +0300", "leaf_count": 11, "line_count": 12}
{"id": "nontext-field-must-set-null-true", "rule": "rules:\n- id: nontext-field-must-set-null-true\n  patterns:\n  - pattern-inside: |\n      class $M(...):\n        ...\n  - pattern-not: $F = django.db.models.CharField(...)\n  - pattern-not: $F = django.db.models.TextField(...)\n  - pattern-not: $F = django.db.models.SlugField(...)\n  - pattern-not: $F = django.db.models.EmailField(...)\n  - pattern-not: $F = django.db.models.URLField(...)\n  - pattern-not: $F = django.db.models.UUIDField(...)\n  - pattern-not: $F = django.db.models.ManyToManyField(...)\n  - pattern-not: $F = django.db.models.NullBooleanField(...)\n  - pattern-not: $F = $X(..., null=True, blank=True, ...)\n  - pattern: $F = $X(..., blank=True, ...)\n  message: null=True should be set if blank=True is set on non-text fields.\n  languages: [python]\n  severity: ERROR\n", "failed_tests": ["```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldImage = models.ImageField(blank=True)\n```"], "failed_type": "fp", "testsuite_a": "from django.db import models\n\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n", "testsuite_b": "from django.db import models\n\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldFile = models.FileField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldImage = models.ImageField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n", "ground_truth": "rules:\n- id: nontext-field-must-set-null-true\n  patterns:\n  - pattern-inside: |\n      class $M(...):\n        ...\n  - pattern-not: $F = django.db.models.CharField(...)\n  - pattern-not: $F = django.db.models.TextField(...)\n  - pattern-not: $F = django.db.models.SlugField(...)\n  - pattern-not: $F = django.db.models.EmailField(...)\n  - pattern-not: $F = django.db.models.FileField(...)\n  - pattern-not: $F = django.db.models.ImageField(...)\n  - pattern-not: $F = django.db.models.URLField(...)\n  - pattern-not: $F = django.db.models.UUIDField(...)\n  - pattern-not: $F = django.db.models.ManyToManyField(...)\n  - pattern-not: $F = django.db.models.NullBooleanField(...)\n  - pattern-not: $F = $X(..., null=True, blank=True, ...)\n  - pattern: $F = $X(..., blank=True, ...)\n  message: null=True should be set if blank=True is set on non-text fields.\n  languages: [python]\n  severity: ERROR\n", "rule_path": "extend_dataset/d023a035/before/nontext-field-must-set-null-true.yaml", "test_path": "extend_dataset/d023a035/after/nontext-field-must-set-null-true.py", "category": "historical", "splited_testsuite_b": ["```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldChar = models.CharField(\n        max_length=200,\n        blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldText = models.TextField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldSlug = models.SlugField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldEmail = models.EmailField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldURL = models.URLField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldUUID = models.UUIDField(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldManyToMany = models.ManyToManyField(\"self\", blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ruleid: nontext-field-must-set-null-true\n    fieldInt = models.IntegerField(\n        blank=True,\n        max_value=30\n    )\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldIntNull = models.IntegerField(\n        null=True,\n        blank=True,\n        max_value=100\n    )\n```", "```python\ndef fake(**kwargs):\n    pass\n\ndef nope():\n    # ok: nontext-field-must-set-null-true\n    return fake(blank=True)\n```", "```python\nfrom django.db import models\n\nclass FakeModel(models.Model):\n    # ok: nontext-field-must-set-null-true\n    fieldImage = models.ImageField(blank=True)\n```"], "actual": [false, false, false, false, false, false, false, true, false, false, true], "expected": [false, false, false, false, false, false, false, true, false, false, false], "index": 172, "commit_message": "Add more Django's text-based fields (#1108)", "commit_date_str": "2021-02-19 10:12:41 +0300", "leaf_count": 11, "line_count": 12}
{"id": "use-workdir", "rule": "rules:\n- id: use-workdir\n  pattern: RUN ... cd $DIR\n  message: >-\n    Use 'WORKDIR' instead of 'RUN cd ...'. Using 'RUN cd ...' may not\n    work as expected in a conatiner.\n  severity: WARNING\n  languages: [dockerfile]\n", "failed_tests": ["FROM busybox\n\n# ok: use-workdir\nRUN pip3 install semgrep && cd .."], "failed_type": "fp", "testsuite_a": "FROM busybox\n\n# ruleid: use-workdir\nRUN cd semgrep && git clone https://github.com/returntocorp/semgrep\n\n# ruleid: use-workdir\nRUN pip3 install semgrep && cd ..\n\n# ok: use-workdir\nRUN semgrep -f p/xss\n\n# ok: use-workdir\nRUN blah\n\n# ok: use-workdir\nRUN blah blahcd\n", "testsuite_b": "FROM busybox\n\n# ruleid: use-workdir\nRUN cd semgrep && git clone https://github.com/returntocorp/semgrep\n\n# ok: use-workdir\nRUN pip3 install semgrep && cd ..\n\n# ok: use-workdir\nRUN semgrep -f p/xss\n\n# ok: use-workdir\nRUN blah\n\n# ok: use-workdir\nRUN blah blahcd\n", "ground_truth": "rules:\n  - id: use-workdir\n    options:\n      implicit_deep_exprstmt: false\n    patterns:\n      - pattern-either:\n        - pattern-inside: |\n            RUN $ CMD ...\n        - pattern-inside: |\n            RUN $CMD ... && ...\n      - metavariable-pattern:\n          metavariable: $CMD\n          pattern: cd\n      - focus-metavariable: $CMD\n    message: >-\n      As recommended by Docker's documentation, it is best to use 'WORKDIR'\n      instead of 'RUN cd ...' for improved clarity and reliability. Also, 'RUN cd\n      ...' may not work as expected in a container.\n    severity: WARNING\n    languages: [dockerfile]\n    metadata:\n      source-rule-url: https://github.com/hadolint/hadolint/wiki/DL3003\n      references:\n        - https://github.com/hadolint/hadolint/wiki/DL3003\n      category: best-practice\n      technology:\n        - dockerfile\n", "rule_path": "extend_dataset/deeb6466/before/use-workdir.yaml", "test_path": "extend_dataset/deeb6466/after/use-workdir.dockerfile", "category": "historical", "splited_testsuite_b": ["FROM busybox\n\n# ruleid: use-workdir\nRUN cd semgrep && git clone https://github.com/returntocorp/semgrep", "FROM busybox\n\n# ok: use-workdir\nRUN semgrep -f p/xss", "FROM busybox\n\n# ok: use-workdir\nRUN blah", "FROM busybox\n\n# ok: use-workdir\nRUN blah blahcd", "FROM busybox\n\n# ok: use-workdir\nRUN pip3 install semgrep && cd .."], "actual": [true, false, false, false, true], "expected": [true, false, false, false, false], "index": 173, "commit_message": "Improved match and cleaner message.", "commit_date_str": "2022-07-04 10:27:38 +0200", "leaf_count": 1, "line_count": 1}
{"id": "react-styled-components-injection", "rule": "rules:\n- id: react-styled-components-injection\n  patterns:\n  - pattern-inside: |\n      import styled from 'styled-components';\n      ...\n  - pattern-either:\n    - pattern-inside: |\n        $STYLE = $METHOD(...);\n        ...\n    - pattern-inside: |\n        function $FUNC(...,{$STYLE},...) {\n          ...\n        }\n    - pattern-inside: |\n        function $FUNC(...,$STYLE,...) {\n          ...\n        }\n    - pattern-inside: |\n        function $FUNC(...,{$INPUT},...) {\n          ...\n          $STYLE = <... $INPUT ...>;\n          ...\n        }\n    - pattern-inside: |\n        function $FUNC(...,$INPUT,...) {\n          ...\n          $STYLE = <... $INPUT ...>;\n          ...\n        }\n  - pattern: |\n      styled.$EL`...${$STYLE}...`\n  message: |\n    User controlled data in a styled component's css is an anti-pattern than can lead to XSS vulnerabilities\n  languages:\n  - typescript\n  - javascript\n  severity: WARNING\n", "failed_tests": ["import styled, { keyframes } from \"styled-components\";\n\nfunction OkTest(input) {\n  const css = \"red\";\n  const anim = keyframes`from {width: 1;} to {width: 2;}`;\n  // ok: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    animation: ${anim};\n  `;\n  return ArbitraryComponent;\n}"], "failed_type": "fp", "testsuite_a": "import styled from \"styled-components\";\n\nfunction Vulnerable1(userInput) {\n// ruleid: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    background: url(${userInput});\n  `\n  return ArbitraryComponent\n}\n\nfunction Vulnerable2(userInput) {\n  const input = fooBar(userInput)\n\n// ruleid: react-styled-components-injection\n  return styled.div`\n    background: url(${input});\n  `\n}\n\nfunction Vulnerable3(nevermind, {userInput}) {\n  const input = '#' + userInput;\n\n// ruleid: react-styled-components-injection\n  return styled.div`\n    background: ${input};\n  `\n}\n\nfunction OkTest({siteUrl, input}) {\n// ok: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    background: red;\n  `\n  return ArbitraryComponent\n}\n\nfunction OkTest(input) {\n  const css = 'red';\n// ok: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    background: ${css};\n  `\n  return ArbitraryComponent\n}\n", "testsuite_b": "import styled, { keyframes } from \"styled-components\";\n\nfunction Vulnerable1(userInput) {\n// ruleid: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    background: url(${userInput});\n  `\n  return ArbitraryComponent\n}\n\nfunction Vulnerable2(userInput) {\n  const input = fooBar(userInput)\n\n// ruleid: react-styled-components-injection\n  return styled.div`\n    background: url(${input});\n  `\n}\n\nfunction Vulnerable3(nevermind, {userInput}) {\n  const input = '#' + userInput;\n\n// ruleid: react-styled-components-injection\n  return styled.div`\n    background: ${input};\n  `\n}\n\nfunction OkTest({siteUrl, input}) {\n// ok: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    background: red;\n  `\n  return ArbitraryComponent\n}\n\nfunction OkTest(input) {\n  const css = 'red';\n// ok: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    background: ${css};\n  `\n  return ArbitraryComponent\n}\n\nfunction OkTest(input) {\n  const css = \"red\";\n  const anim = keyframes`from {width: 1;} to {width: 2;}`;\n  // ok: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    animation: ${anim};\n  `;\n  return ArbitraryComponent;\n}\n", "ground_truth": "rules:\n- id: react-styled-components-injection\n  patterns:\n  - pattern-inside: |\n      import styled from 'styled-components';\n      ...\n  - pattern-not-inside: |\n      import { keyframes } from 'styled-components';\n      ...\n      $STYLE = keyframes(...);\n      ...\n  - pattern-either:\n    - pattern-inside: |\n        $STYLE = $METHOD(...);\n        ...\n    - pattern-inside: |\n        function $FUNC(...,{$STYLE},...) {\n          ...\n        }\n    - pattern-inside: |\n        function $FUNC(...,$STYLE,...) {\n          ...\n        }\n    - pattern-inside: |\n        function $FUNC(...,{$INPUT},...) {\n          ...\n          $STYLE = <... $INPUT ...>;\n          ...\n        }\n    - pattern-inside: |\n        function $FUNC(...,$INPUT,...) {\n          ...\n          $STYLE = <... $INPUT ...>;\n          ...\n        }\n  - pattern: |\n      styled.$EL`...${$STYLE}...`\n  message: |\n    User controlled data in a styled component's css is an anti-pattern than can lead to XSS vulnerabilities\n  metadata:\n    cwe: \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp: 'A7: Cross-site Scripting (XSS)'\n    references:\n    - https://styled-components.com/docs/advanced#security\n  languages:\n  - typescript\n  - javascript\n  severity: WARNING\n", "rule_path": "extend_dataset/372bc0b4/before/react-styled-components-injection.yaml", "test_path": "extend_dataset/372bc0b4/after/react-styled-components-injection.tsx", "category": "historical", "splited_testsuite_b": ["import styled, { keyframes } from \"styled-components\";\n\nfunction Vulnerable1(userInput) {\n// ruleid: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    background: url(${userInput});\n  `\n  return ArbitraryComponent\n}", "import styled, { keyframes } from \"styled-components\";\n\nfunction Vulnerable2(userInput) {\n  const input = fooBar(userInput)\n\n// ruleid: react-styled-components-injection\n  return styled.div`\n    background: url(${input});\n  `\n}", "import styled, { keyframes } from \"styled-components\";\n\nfunction Vulnerable3(nevermind, {userInput}) {\n  const input = '#' + userInput;\n\n// ruleid: react-styled-components-injection\n  return styled.div`\n    background: ${input};\n  `\n}", "import styled, { keyframes } from \"styled-components\";\n\nfunction OkTest({siteUrl, input}) {\n// ok: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    background: red;\n  `\n  return ArbitraryComponent\n}", "import styled, { keyframes } from \"styled-components\";\n\nfunction OkTest(input) {\n  const css = 'red';\n// ok: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    background: ${css};\n  `\n  return ArbitraryComponent\n}", "import styled, { keyframes } from \"styled-components\";\n\nfunction OkTest(input) {\n  const css = \"red\";\n  const anim = keyframes`from {width: 1;} to {width: 2;}`;\n  // ok: react-styled-components-injection\n  const ArbitraryComponent = styled.div`\n    animation: ${anim};\n  `;\n  return ArbitraryComponent;\n}"], "actual": [true, true, true, false, false, true], "expected": [true, true, true, false, false, false], "index": 174, "commit_message": "react-styled-components-injection: Fix FP when using keyframes (#1093)", "commit_date_str": "2021-02-09 15:41:42 +0100", "leaf_count": 7, "line_count": 21}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages: [go]\n  severity: ERROR\n  message: >-\n    Detected user input used to manually construct a SQL string. This is usually\n    bad practice because manual construction could accidentally result in a SQL\n    injection. An attacker could use a SQL injection to steal or modify contents\n    of the database. Instead, use a parameterized query which is available\n    by default in most database engines. Alternatively, consider using an\n    object-relational mapper (ORM) such as Sequelize which will protect your queries.\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern-inside: |\n          func $HANDLER($CTX $CTXTYPE, $EVENT $TYPE, ...) {...}\n          ...\n          lambda.Start($HANDLER, ...)\n      - patterns:\n        - pattern-inside: |\n            func $HANDLER($EVENT $TYPE) {...}\n            ...\n            lambda.Start($HANDLER, ...)\n        - pattern-not-inside: |\n            func $HANDLER($EVENT context.Context) {...}\n            ...\n            lambda.Start($HANDLER, ...)\n    - pattern: $EVENT\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: |\n            \"$SQLSTR\" + ...\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(select|delete|insert|create|update|alter|drop).*\n      - patterns:\n        - pattern-either:\n          - pattern: fmt.Fprintf($F, \"$SQLSTR\", ...)\n          - pattern: fmt.Sprintf(\"$SQLSTR\", ...)\n          - pattern: fmt.Printf(\"$SQLSTR\", ...)\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: \\s*(?i)(select|delete|insert|create|update|alter|drop)\\b.*%(v|s|q).*\n    - pattern-not-inside: |\n        log.$PRINT(...)\n  pattern-sanitizers:\n  - pattern: strconv.Atoi(...)\n", "failed_tests": ["package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\t// ruleid: tainted-sql-string\n\t_, err = db.Exec(` \n  DELETE FROM table WHERE Id = ` + request.Get(\"Id\"))\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            \"Success\",\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}"], "failed_type": "fn", "testsuite_a": "package main\n\nimport (\n  \"database/sql\"\n  \"encoding/json\"\n  \"log\"\n  \"os\"\n  \"context\"\n\n  \"github.com/aws/aws-lambda-go/events\"\n  \"github.com/aws/aws-lambda-go/lambda\"\n  _ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n  db               *sql.DB\n  err              error\n  connectionString string\n  dbUser           string\n  dbPass           string\n  dataSource       string\n)\n\ntype Employee struct {\n  EmployeeNo int    `json:\"emp_no\"`\n  FirstName  string `json:\"first_name\"`\n  LastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n  connectionString = os.Getenv(\"CONN\")\n  dbUser = os.Getenv(\"DBUSER\")\n  dbPass = os.Getenv(\"DBPASS\")\n  dataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n  searchCriteria := request.Body\n\n  db, err = sql.Open(\"mysql\", dataSource)\n  if err != nil {\n    panic(err.Error())\n  }\n\n  defer db.Close()\n\n  // ruleid: tainted-sql-string\n  results, err := db.Query(\"select e.emp_no, e.first_name, e.last_name \" +\n    \"from employees e, departments d, dept_emp de \" +\n    \"where e.last_name LIKE '\" + searchCriteria + \"%';\")\n\n  if err != nil {\n    log.Fatal(err)\n  }\n  defer results.Close()\n\n  // ruleid: tainted-sql-string\n  _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\n  // ok: tainted-sql-string\n  log.Printf(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\n  idhtml := request.Get(\"Id\")\n  id, _ := strconv.Atoi(idhtml)\n\n  // ok: tainted-sql-string\n  _, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n\n  // ok: tainted-sql-string\n  results2, err2 := db.Query(\"select * from foobar\")\n\n  employees := make([]Employee, 0)\n\n  for results.Next() {\n    var e Employee\n\n    err := results.Scan(&e.EmployeeNo, &e.FirstName, &e.LastName)\n    if err != nil {\n      log.Fatal(err)\n    }\n    employees = append(employees, e)\n  }\n\n  data, _ := json.Marshal(employees)\n\n  return events.APIGatewayProxyResponse{\n    StatusCode:      200,\n    Body:            string(data),\n    IsBase64Encoded: false,\n  }, nil\n}\n\nfunc main() {\n  lambda.Start(handler)\n}", "testsuite_b": "package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tsearchCriteria := request.Body\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\t// ruleid: tainted-sql-string\n\tresults, err := db.Query(\"select e.emp_no, e.first_name, e.last_name \" +\n\t\t\"from employees e, departments d, dept_emp de \" +\n\t\t\"where e.last_name LIKE '\" + searchCriteria + \"%';\")\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer results.Close()\n\t// ruleid: tainted-sql-string\n\t_, err = db.Exec(` \n  DELETE FROM table WHERE Id = ` + request.Get(\"Id\"))\n\t// ruleid: tainted-sql-string\n\t_, err = db.Exec(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\n\t// ok: tainted-sql-string\n\tlog.Printf(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\t// ok: tainted-sql-string\n\t_, err = db.Exec(` FAKE\n  DELETE FROM table WHERE Id = ` + request.Get(\"Id\"))\n\n\tidhtml := request.Get(\"Id\")\n\tid, _ := strconv.Atoi(idhtml)\n\n\t// ok: tainted-sql-string\n\t_, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n\n\t// ok: tainted-sql-string\n\tresults2, err2 := db.Query(\"select * from foobar\")\n\n\temployees := make([]Employee, 0)\n\n\tfor results.Next() {\n\t\tvar e Employee\n\n\t\terr := results.Scan(&e.EmployeeNo, &e.FirstName, &e.LastName)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\temployees = append(employees, e)\n\t}\n\n\tdata, _ := json.Marshal(employees)\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            string(data),\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}\n", "ground_truth": "rules:\n- id: tainted-sql-string\n  languages: [go]\n  severity: ERROR\n  message: >-\n    Detected user input used to manually construct a SQL string. This is usually\n    bad practice because manual construction could accidentally result in a SQL\n    injection. An attacker could use a SQL injection to steal or modify contents\n    of the database. Instead, use a parameterized query which is available\n    by default in most database engines. Alternatively, consider using an\n    object-relational mapper (ORM) such as Sequelize which will protect your queries.\n  metadata:\n    references:\n    - https://owasp.org/www-community/attacks/SQL_Injection\n    category: security\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    technology:\n    - aws-lambda\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n    confidence: MEDIUM\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern-inside: |\n          func $HANDLER($CTX $CTXTYPE, $EVENT $TYPE, ...) {...}\n          ...\n          lambda.Start($HANDLER, ...)\n      - patterns:\n        - pattern-inside: |\n            func $HANDLER($EVENT $TYPE) {...}\n            ...\n            lambda.Start($HANDLER, ...)\n        - pattern-not-inside: |\n            func $HANDLER($EVENT context.Context) {...}\n            ...\n            lambda.Start($HANDLER, ...)\n    - pattern: $EVENT\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - patterns:\n        - pattern: |\n            \"$SQLSTR\" + ...\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: (?i)(\\s*select|\\s*delete|\\s*insert|\\s*create|\\s*update|\\s*alter|\\s*drop).*\n      - patterns:\n        - pattern-either:\n          - pattern: fmt.Fprintf($F, \"$SQLSTR\", ...)\n          - pattern: fmt.Sprintf(\"$SQLSTR\", ...)\n          - pattern: fmt.Printf(\"$SQLSTR\", ...)\n        - metavariable-regex:\n            metavariable: $SQLSTR\n            regex: \\s*(?i)(select|delete|insert|create|update|alter|drop)\\b.*%(v|s|q).*\n    - pattern-not-inside: |\n        log.$PRINT(...)\n  pattern-sanitizers:\n  - pattern: strconv.Atoi(...)\n", "rule_path": "extend_dataset/7f9936ad/before/tainted-sql-string.yaml", "test_path": "extend_dataset/7f9936ad/after/tainted-sql-string.go", "category": "historical", "splited_testsuite_b": ["package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tsearchCriteria := request.Body\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\t// ruleid: tainted-sql-string\n\tresults, err := db.Query(\"select e.emp_no, e.first_name, e.last_name \" +\n\t\t\"from employees e, departments d, dept_emp de \" +\n\t\t\"where e.last_name LIKE '\" + searchCriteria + \"%';\")\n\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer results.Close()\n\n\temployees := make([]Employee, 0)\n\n\tfor results.Next() {\n\t\tvar e Employee\n\n\t\terr := results.Scan(&e.EmployeeNo, &e.FirstName, &e.LastName)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\temployees = append(employees, e)\n\t}\n\n\tdata, _ := json.Marshal(employees)\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            string(data),\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}", "package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\t// ruleid: tainted-sql-string\n\t_, err = db.Exec(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            \"Success\",\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}", "package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\t// ok: tainted-sql-string\n\tlog.Printf(\"DELETE FROM table WHERE Id = \" + request.Get(\"Id\"))\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            \"Success\",\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}", "package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\t// ok: tainted-sql-string\n\t_, err = db.Exec(` FAKE\n  DELETE FROM table WHERE Id = ` + request.Get(\"Id\"))\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            \"Success\",\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}", "package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\tidhtml := request.Get(\"Id\")\n\tid, _ := strconv.Atoi(idhtml)\n\n\t// ok: tainted-sql-string\n\t_, err = db.Exec(\"DELETE FROM table WHERE Id = \" + id)\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            \"Success\",\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}", "package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\t// ok: tainted-sql-string\n\tresults2, err2 := db.Query(\"select * from foobar\")\n\n\tif err2 != nil {\n\t\tlog.Fatal(err2)\n\t}\n\tdefer results2.Close()\n\n\temployees := make([]Employee, 0)\n\n\tfor results2.Next() {\n\t\tvar e Employee\n\n\t\terr := results2.Scan(&e.EmployeeNo, &e.FirstName, &e.LastName)\n\t\tif err != nil {\n\t\t\tlog.Fatal(err)\n\t\t}\n\t\temployees = append(employees, e)\n\t}\n\n\tdata, _ := json.Marshal(employees)\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            string(data),\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}", "package main\n\nimport (\n\t\"database/sql\"\n\t\"encoding/json\"\n\t\"log\"\n\t\"os\"\n\t\"strconv\"\n\n\t\"github.com/aws/aws-lambda-go/events\"\n\t\"github.com/aws/aws-lambda-go/lambda\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nvar (\n\tdb               *sql.DB\n\terr              error\n\tconnectionString string\n\tdbUser           string\n\tdbPass           string\n\tdataSource       string\n)\n\ntype Employee struct {\n\tEmployeeNo int    `json:\"emp_no\"`\n\tFirstName  string `json:\"first_name\"`\n\tLastName   string `json:\"last_name\"`\n}\n\nfunc init() {\n\tconnectionString = os.Getenv(\"CONN\")\n\tdbUser = os.Getenv(\"DBUSER\")\n\tdbPass = os.Getenv(\"DBPASS\")\n\tdataSource = dbUser + \":\" + dbPass + \"@tcp(\" + connectionString + \")/employees\"\n}\n\nfunc handler(request events.APIGatewayProxyRequest) (events.APIGatewayProxyResponse, error) {\n\n\tdb, err = sql.Open(\"mysql\", dataSource)\n\tif err != nil {\n\t\tpanic(err.Error())\n\t}\n\n\tdefer db.Close()\n\n\t// ruleid: tainted-sql-string\n\t_, err = db.Exec(` \n  DELETE FROM table WHERE Id = ` + request.Get(\"Id\"))\n\n\treturn events.APIGatewayProxyResponse{\n\t\tStatusCode:      200,\n\t\tBody:            \"Success\",\n\t\tIsBase64Encoded: false,\n\t}, nil\n}\n\nfunc main() {\n\tlambda.Start(handler)\n}"], "actual": [true, true, false, false, false, false, false], "expected": [true, true, false, false, false, false, true], "index": 175, "commit_message": "Fix multiline string for tainted-sql-string", "commit_date_str": "2023-03-05 10:03:37 +0000", "leaf_count": 14, "line_count": 49}
{"id": "echoed-request", "rule": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  pattern-sanitizers:\n  - pattern: isset(...)\n  - pattern: empty(...)\n  - pattern: $X = $ANYFUNC(...);\n  - patterns:\n    - pattern-inside: echo <... $ANYFUNC(...) ...>;\n    - pattern: $ANYFUNC(...)\n", "failed_tests": ["<?php\n\nfunction doSmth5() {\n     // ruleid: echoed-request\n    echo \"Hello \".trim($_POST['name']);\n}"], "failed_type": "fn", "testsuite_a": "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        $tpl = createSafeTemplate($name);\n        // ok: echoed-request\n        echo \"Hello :\".$tpl;\n    }\n}\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n", "testsuite_b": "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\nfunction doSmth5() {\n     // ruleid: echoed-request\n    echo \"Hello \".trim($_POST['name']);\n}\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $safevar = \"Hello \".htmlentities(trim($_GET['name']));\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n\nfunction doOK6() {\n    $safevar = \"Hello \".htmlentities($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK7() {\n    $safevar = \"Hello \".htmlspecialchars($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\n\n", "ground_truth": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  pattern-sanitizers:\n  - pattern: isset(...)\n  - pattern: empty(...)\n  - pattern: htmlentities(...)\n  - pattern: htmlspecialchars(...)\n  metadata:\n    technology:\n    - php\n    cwe:\n    - \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp:\n    - A07:2017 - Cross-Site Scripting (XSS)\n    - A03:2021 - Injection\n    category: security\n    references:\n    - https://www.php.net/manual/en/function.htmlentities.php\n    - https://www.php.net/manual/en/reserved.variables.request.php\n    - https://www.php.net/manual/en/reserved.variables.post.php\n    - https://www.php.net/manual/en/reserved.variables.get.php\n    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: MEDIUM\n    confidence: MEDIUM\n", "rule_path": "extend_dataset/ca24983f/before/echoed-request.yaml", "test_path": "extend_dataset/ca24983f/after/echoed-request.php", "category": "historical", "splited_testsuite_b": ["<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}", "<?php\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}", "<?php\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}", "<?php\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}", "<?php\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}", "<?php\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}", "<?php\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}", "<?php\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}", "<?php\n\nfunction doSmth5() {\n     // ruleid: echoed-request\n    echo \"Hello \".trim($_POST['name']);\n}"], "actual": [true, true, true, true, false, false, false, false, false], "expected": [true, true, true, true, false, false, false, false, true], "index": 176, "commit_message": "update php.lang.security.injection.echoed-request.echoed-request rule", "commit_date_str": "2023-09-14 11:15:50 +0700", "leaf_count": 9, "line_count": 13}
{"id": "echoed-request", "rule": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  pattern-sanitizers:\n  - pattern: isset(...)\n  - pattern: empty(...)\n  - pattern: $X = $ANYFUNC(...);\n  - patterns:\n    - pattern-inside: echo <... $ANYFUNC(...) ...>;\n    - pattern: $ANYFUNC(...)\n", "failed_tests": ["<?php\n\nfunction doOK3() {\n    $safevar = \"Hello \".htmlentities(trim($_GET['name']));\n    // ok: echoed-request\n    echo $safevar;\n}"], "failed_type": "fp", "testsuite_a": "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        $tpl = createSafeTemplate($name);\n        // ok: echoed-request\n        echo \"Hello :\".$tpl;\n    }\n}\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n", "testsuite_b": "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\nfunction doSmth5() {\n     // ruleid: echoed-request\n    echo \"Hello \".trim($_POST['name']);\n}\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $safevar = \"Hello \".htmlentities(trim($_GET['name']));\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n\nfunction doOK6() {\n    $safevar = \"Hello \".htmlentities($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK7() {\n    $safevar = \"Hello \".htmlspecialchars($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\n\n", "ground_truth": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  pattern-sanitizers:\n  - pattern: isset(...)\n  - pattern: empty(...)\n  - pattern: htmlentities(...)\n  - pattern: htmlspecialchars(...)\n  metadata:\n    technology:\n    - php\n    cwe:\n    - \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp:\n    - A07:2017 - Cross-Site Scripting (XSS)\n    - A03:2021 - Injection\n    category: security\n    references:\n    - https://www.php.net/manual/en/function.htmlentities.php\n    - https://www.php.net/manual/en/reserved.variables.request.php\n    - https://www.php.net/manual/en/reserved.variables.post.php\n    - https://www.php.net/manual/en/reserved.variables.get.php\n    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: MEDIUM\n    confidence: MEDIUM\n", "rule_path": "extend_dataset/ca24983f/before/echoed-request.yaml", "test_path": "extend_dataset/ca24983f/after/echoed-request.php", "category": "historical", "splited_testsuite_b": ["<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}", "<?php\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}", "<?php\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}", "<?php\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}", "<?php\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}", "<?php\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}", "<?php\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}", "<?php\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}", "<?php\n\nfunction doOK3() {\n    $safevar = \"Hello \".htmlentities(trim($_GET['name']));\n    // ok: echoed-request\n    echo $safevar;\n}"], "actual": [true, true, true, true, false, false, false, false, true], "expected": [true, true, true, true, false, false, false, false, false], "index": 177, "commit_message": "update php.lang.security.injection.echoed-request.echoed-request rule", "commit_date_str": "2023-09-14 11:15:50 +0700", "leaf_count": 9, "line_count": 13}
{"id": "echoed-request", "rule": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  pattern-sanitizers:\n  - pattern: isset(...)\n  - pattern: empty(...)\n  - pattern: $X = $ANYFUNC(...);\n  - patterns:\n    - pattern-inside: echo <... $ANYFUNC(...) ...>;\n    - pattern: $ANYFUNC(...)\n", "failed_tests": ["<?php\n\nfunction doOK6() {\n    $safevar = \"Hello \".htmlentities($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}"], "failed_type": "fp", "testsuite_a": "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        $tpl = createSafeTemplate($name);\n        // ok: echoed-request\n        echo \"Hello :\".$tpl;\n    }\n}\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n", "testsuite_b": "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\nfunction doSmth5() {\n     // ruleid: echoed-request\n    echo \"Hello \".trim($_POST['name']);\n}\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $safevar = \"Hello \".htmlentities(trim($_GET['name']));\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n\nfunction doOK6() {\n    $safevar = \"Hello \".htmlentities($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK7() {\n    $safevar = \"Hello \".htmlspecialchars($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\n\n", "ground_truth": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  pattern-sanitizers:\n  - pattern: isset(...)\n  - pattern: empty(...)\n  - pattern: htmlentities(...)\n  - pattern: htmlspecialchars(...)\n  metadata:\n    technology:\n    - php\n    cwe:\n    - \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp:\n    - A07:2017 - Cross-Site Scripting (XSS)\n    - A03:2021 - Injection\n    category: security\n    references:\n    - https://www.php.net/manual/en/function.htmlentities.php\n    - https://www.php.net/manual/en/reserved.variables.request.php\n    - https://www.php.net/manual/en/reserved.variables.post.php\n    - https://www.php.net/manual/en/reserved.variables.get.php\n    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: MEDIUM\n    confidence: MEDIUM\n", "rule_path": "extend_dataset/ca24983f/before/echoed-request.yaml", "test_path": "extend_dataset/ca24983f/after/echoed-request.php", "category": "historical", "splited_testsuite_b": ["<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}", "<?php\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}", "<?php\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}", "<?php\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}", "<?php\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}", "<?php\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}", "<?php\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}", "<?php\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}", "<?php\n\nfunction doOK6() {\n    $safevar = \"Hello \".htmlentities($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}"], "actual": [true, true, true, true, false, false, false, false, true], "expected": [true, true, true, true, false, false, false, false, false], "index": 178, "commit_message": "update php.lang.security.injection.echoed-request.echoed-request rule", "commit_date_str": "2023-09-14 11:15:50 +0700", "leaf_count": 9, "line_count": 13}
{"id": "echoed-request", "rule": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  pattern-sanitizers:\n  - pattern: isset(...)\n  - pattern: empty(...)\n  - pattern: $X = $ANYFUNC(...);\n  - patterns:\n    - pattern-inside: echo <... $ANYFUNC(...) ...>;\n    - pattern: $ANYFUNC(...)\n", "failed_tests": ["<?php\n\nfunction doOK7() {\n    $safevar = \"Hello \".htmlspecialchars($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}"], "failed_type": "fp", "testsuite_a": "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        $tpl = createSafeTemplate($name);\n        // ok: echoed-request\n        echo \"Hello :\".$tpl;\n    }\n}\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n", "testsuite_b": "<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}\n\nfunction doSmth5() {\n     // ruleid: echoed-request\n    echo \"Hello \".trim($_POST['name']);\n}\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}\n\nfunction doOK3() {\n    $safevar = \"Hello \".htmlentities(trim($_GET['name']));\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}\n\nfunction doOK6() {\n    $safevar = \"Hello \".htmlentities($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\nfunction doOK7() {\n    $safevar = \"Hello \".htmlspecialchars($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}\n\n\n", "ground_truth": "rules:\n- id: echoed-request\n  mode: taint\n  message: >-\n    `Echo`ing user input risks cross-site scripting vulnerability.\n    You should use `htmlentities()` when showing data to users.\n  languages: [php]\n  severity: ERROR\n  pattern-sources:\n  - pattern: $_REQUEST\n  - pattern: $_GET\n  - pattern: $_POST\n  pattern-sinks:\n  - pattern: echo ...;\n  pattern-sanitizers:\n  - pattern: isset(...)\n  - pattern: empty(...)\n  - pattern: htmlentities(...)\n  - pattern: htmlspecialchars(...)\n  metadata:\n    technology:\n    - php\n    cwe:\n    - \"CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')\"\n    owasp:\n    - A07:2017 - Cross-Site Scripting (XSS)\n    - A03:2021 - Injection\n    category: security\n    references:\n    - https://www.php.net/manual/en/function.htmlentities.php\n    - https://www.php.net/manual/en/reserved.variables.request.php\n    - https://www.php.net/manual/en/reserved.variables.post.php\n    - https://www.php.net/manual/en/reserved.variables.get.php\n    - https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: MEDIUM\n    impact: MEDIUM\n    confidence: MEDIUM\n", "rule_path": "extend_dataset/ca24983f/before/echoed-request.yaml", "test_path": "extend_dataset/ca24983f/after/echoed-request.php", "category": "historical", "splited_testsuite_b": ["<?php\n\nfunction doSmth() {\n    $name = $_REQUEST['name'];\n    // ruleid: echoed-request\n    echo \"Hello :\".$name;\n}", "<?php\n\nfunction doSmth2() {\n    // ruleid: echoed-request\n    echo \"Hello \".$_POST['name'].\" !\";\n}", "<?php\n\nfunction doSmth3() {\n    $name = $_GET['name'];\n    if (str_contains($name, 'foobar')) {\n        // ruleid: echoed-request\n        echo \"Hello :\".$name;\n    }\n}", "<?php\n\nfunction doSmth4() {\n    // ruleid: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\".$_POST['lastname'];\n}", "<?php\n\nfunction doOK1() {\n    // ok: echoed-request\n    echo \"Hello \".htmlentities($_POST['name']).\" !\";\n}", "<?php\n\nfunction doOK2() {\n    $input = $_GET['name'];\n    // ok: echoed-request\n    echo \"Hello \".htmlspecialchars($input).\" !\";\n}", "<?php\n\nfunction doOK4() {\n    // ok: echoed-request\n    echo \"Hello \".isset($_POST['name']).\" !\";\n}", "<?php\n\nfunction doOK5() {\n    $safevar = empty($_GET['name']);\n    // ok: echoed-request\n    echo \"Hello $safevar !\";\n}", "<?php\n\nfunction doOK7() {\n    $safevar = \"Hello \".htmlspecialchars($_GET['name']);\n    // ok: echoed-request\n    echo $safevar;\n}"], "actual": [true, true, true, true, false, false, false, false, true], "expected": [true, true, true, true, false, false, false, false, false], "index": 179, "commit_message": "update php.lang.security.injection.echoed-request.echoed-request rule", "commit_date_str": "2023-09-14 11:15:50 +0700", "leaf_count": 9, "line_count": 13}
{"id": "os-command", "rule": "rules:\n- id: os-command-injection\n  severity: ERROR\n  languages:\n  - csharp\n  message: >-\n    The software constructs all or part of an OS command using externally-influenced\n    input from an upstream\n    component, but\n    it does not neutralize or incorrectly neutralizes special elements that could\n    modify the intended\n    OS command when it is\n    sent to a downstream component.\n  patterns:\n  - pattern-inside: |\n      using System.Diagnostics;\n      ...\n  - pattern-inside: |\n      public $T $F(..., $ARG, ...)\n      {\n        ...\n      }\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          Process.Start($ARG, ...);\n      - focus-metavariable: $ARG\n    - patterns:\n      - pattern-inside: |\n          Process $PROC = new Process();\n          ...\n      - pattern-either:\n        - pattern-inside: |\n            $PROC.StartInfo.FileName = $ARG;\n            ...\n        - pattern-inside: |\n            $PROC.StartInfo.Arguments = <... $ARG ...>;\n            ...\n      - pattern: |\n          $PROC.Start();\n    - patterns:\n      - patterns:\n        - pattern-inside: |\n            ProcessStartInfo $PSINFO = new ProcessStartInfo()\n            {\n              ...\n            };\n            ...\n        - pattern-either:\n          - pattern-inside: |\n              FileName = $ARG;\n              ...\n          - pattern-inside: |\n              Arguments = <... $ARG ...>;\n              ...\n      - pattern: |\n          Process.Start($PSINFO);\n      - focus-metavariable: $PSINFO\n", "failed_tests": ["using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = command,\n                    Arguments = args\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}"], "failed_type": "fn", "testsuite_a": "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command);\n        }\n\n        public void RunOsCommand(string command)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\");\n        }\n\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command, arguments);\n        }\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\", \"constant\");\n        }\n\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            process.StartInfo.Arguments = arguments;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            process.StartInfo.Arguments = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = command\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = args\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}\n", "testsuite_b": "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command);\n        }\n\n        public void RunOsCommand(string command)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\");\n        }\n\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command, arguments);\n        }\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\", \"constant\");\n        }\n\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            process.StartInfo.Arguments = arguments;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            process.StartInfo.Arguments = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = command\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = args\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = command,\n                    Arguments = args\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"constant\",\n                    Arguments = arguments\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = command,\n                    Arguments = \"constant\"\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"constant\",\n                    Arguments = \"constant\"\n                }\n            };\n\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}\n", "ground_truth": "rules:\n- id: os-command-injection\n  severity: ERROR\n  languages:\n  - csharp\n  metadata:\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://owasp.org/www-community/attacks/Command_Injection\n    category: security\n    technology:\n    - .net\n    confidence: LOW\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n  message: >-\n    The software constructs all or part of an OS command using externally-influenced input from an upstream\n    component, but\n    it does not neutralize or incorrectly neutralizes special elements that could modify the intended\n    OS command when it is\n    sent to a downstream component.\n  patterns:\n  - pattern-inside: |\n      using System.Diagnostics;\n      ...\n  - pattern-inside: |\n      public $T $F(..., $ARG, ...)\n      {\n        ...\n      }\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          Process.Start($ARG, ...);\n      - focus-metavariable: $ARG\n    - patterns:\n      - pattern-inside: |\n          Process $PROC = new Process();\n          ...\n      - pattern-either:\n        - pattern-inside: |\n            $PROC.StartInfo.FileName = $ARG;\n            ...\n        - pattern-inside: |\n            $PROC.StartInfo.Arguments = <... $ARG ...>;\n            ...\n      - pattern: |\n          $PROC.Start();\n    - patterns:\n      - patterns:\n        - pattern-inside: |\n            ProcessStartInfo $PSINFO = new ProcessStartInfo()\n            {\n              ...\n            };\n            ...\n        - pattern-either:\n          - pattern-inside: |\n              FileName = $ARG;\n              ...\n          - pattern-inside: |\n              Arguments = <... $ARG ...>;\n              ...\n      - pattern: |\n          Process.Start($PSINFO);\n      - focus-metavariable: $PSINFO\n    - patterns:\n        - pattern-inside: |\n            Process $PROC = new Process()\n            {\n              StartInfo = new ProcessStartInfo()\n              {\n                ...\n              }\n            };\n            ...\n        - pattern-either:\n            - pattern-inside: |\n                FileName = $ARG;\n                ...\n            - pattern-inside: |\n                Arguments = $ARG;\n                ...\n        - pattern: |\n            $PROC.Start();\n", "rule_path": "extend_dataset/c8680548/before/os-command.yaml", "test_path": "extend_dataset/c8680548/after/os-command.cs", "category": "historical", "splited_testsuite_b": ["using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\");\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command, arguments);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\", \"constant\");\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            process.StartInfo.Arguments = arguments;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            process.StartInfo.Arguments = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = command\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = args\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"constant\",\n                    Arguments = \"constant\"\n                }\n            };\n\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = command,\n                    Arguments = args\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}"], "actual": [true, false, true, false, true, false, true, false, true, false, true, false, false, false], "expected": [true, false, true, false, true, false, true, false, true, false, true, false, false, true], "index": 180, "commit_message": "Checks for ProcessStartInfo instantiator", "commit_date_str": "2023-11-22 21:57:45 +0000", "leaf_count": 13, "line_count": 52}
{"id": "os-command", "rule": "rules:\n- id: os-command-injection\n  severity: ERROR\n  languages:\n  - csharp\n  message: >-\n    The software constructs all or part of an OS command using externally-influenced\n    input from an upstream\n    component, but\n    it does not neutralize or incorrectly neutralizes special elements that could\n    modify the intended\n    OS command when it is\n    sent to a downstream component.\n  patterns:\n  - pattern-inside: |\n      using System.Diagnostics;\n      ...\n  - pattern-inside: |\n      public $T $F(..., $ARG, ...)\n      {\n        ...\n      }\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          Process.Start($ARG, ...);\n      - focus-metavariable: $ARG\n    - patterns:\n      - pattern-inside: |\n          Process $PROC = new Process();\n          ...\n      - pattern-either:\n        - pattern-inside: |\n            $PROC.StartInfo.FileName = $ARG;\n            ...\n        - pattern-inside: |\n            $PROC.StartInfo.Arguments = <... $ARG ...>;\n            ...\n      - pattern: |\n          $PROC.Start();\n    - patterns:\n      - patterns:\n        - pattern-inside: |\n            ProcessStartInfo $PSINFO = new ProcessStartInfo()\n            {\n              ...\n            };\n            ...\n        - pattern-either:\n          - pattern-inside: |\n              FileName = $ARG;\n              ...\n          - pattern-inside: |\n              Arguments = <... $ARG ...>;\n              ...\n      - pattern: |\n          Process.Start($PSINFO);\n      - focus-metavariable: $PSINFO\n", "failed_tests": ["using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"constant\",\n                    Arguments = arguments\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}"], "failed_type": "fn", "testsuite_a": "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command);\n        }\n\n        public void RunOsCommand(string command)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\");\n        }\n\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command, arguments);\n        }\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\", \"constant\");\n        }\n\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            process.StartInfo.Arguments = arguments;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            process.StartInfo.Arguments = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = command\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = args\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}\n", "testsuite_b": "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command);\n        }\n\n        public void RunOsCommand(string command)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\");\n        }\n\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command, arguments);\n        }\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\", \"constant\");\n        }\n\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            process.StartInfo.Arguments = arguments;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            process.StartInfo.Arguments = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = command\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = args\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = command,\n                    Arguments = args\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"constant\",\n                    Arguments = arguments\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = command,\n                    Arguments = \"constant\"\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"constant\",\n                    Arguments = \"constant\"\n                }\n            };\n\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}\n", "ground_truth": "rules:\n- id: os-command-injection\n  severity: ERROR\n  languages:\n  - csharp\n  metadata:\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://owasp.org/www-community/attacks/Command_Injection\n    category: security\n    technology:\n    - .net\n    confidence: LOW\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n  message: >-\n    The software constructs all or part of an OS command using externally-influenced input from an upstream\n    component, but\n    it does not neutralize or incorrectly neutralizes special elements that could modify the intended\n    OS command when it is\n    sent to a downstream component.\n  patterns:\n  - pattern-inside: |\n      using System.Diagnostics;\n      ...\n  - pattern-inside: |\n      public $T $F(..., $ARG, ...)\n      {\n        ...\n      }\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          Process.Start($ARG, ...);\n      - focus-metavariable: $ARG\n    - patterns:\n      - pattern-inside: |\n          Process $PROC = new Process();\n          ...\n      - pattern-either:\n        - pattern-inside: |\n            $PROC.StartInfo.FileName = $ARG;\n            ...\n        - pattern-inside: |\n            $PROC.StartInfo.Arguments = <... $ARG ...>;\n            ...\n      - pattern: |\n          $PROC.Start();\n    - patterns:\n      - patterns:\n        - pattern-inside: |\n            ProcessStartInfo $PSINFO = new ProcessStartInfo()\n            {\n              ...\n            };\n            ...\n        - pattern-either:\n          - pattern-inside: |\n              FileName = $ARG;\n              ...\n          - pattern-inside: |\n              Arguments = <... $ARG ...>;\n              ...\n      - pattern: |\n          Process.Start($PSINFO);\n      - focus-metavariable: $PSINFO\n    - patterns:\n        - pattern-inside: |\n            Process $PROC = new Process()\n            {\n              StartInfo = new ProcessStartInfo()\n              {\n                ...\n              }\n            };\n            ...\n        - pattern-either:\n            - pattern-inside: |\n                FileName = $ARG;\n                ...\n            - pattern-inside: |\n                Arguments = $ARG;\n                ...\n        - pattern: |\n            $PROC.Start();\n", "rule_path": "extend_dataset/c8680548/before/os-command.yaml", "test_path": "extend_dataset/c8680548/after/os-command.cs", "category": "historical", "splited_testsuite_b": ["using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\");\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command, arguments);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\", \"constant\");\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            process.StartInfo.Arguments = arguments;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            process.StartInfo.Arguments = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = command\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = args\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"constant\",\n                    Arguments = \"constant\"\n                }\n            };\n\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"constant\",\n                    Arguments = arguments\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}"], "actual": [true, false, true, false, true, false, true, false, true, false, true, false, false, false], "expected": [true, false, true, false, true, false, true, false, true, false, true, false, false, true], "index": 181, "commit_message": "Checks for ProcessStartInfo instantiator", "commit_date_str": "2023-11-22 21:57:45 +0000", "leaf_count": 13, "line_count": 52}
{"id": "os-command", "rule": "rules:\n- id: os-command-injection\n  severity: ERROR\n  languages:\n  - csharp\n  message: >-\n    The software constructs all or part of an OS command using externally-influenced\n    input from an upstream\n    component, but\n    it does not neutralize or incorrectly neutralizes special elements that could\n    modify the intended\n    OS command when it is\n    sent to a downstream component.\n  patterns:\n  - pattern-inside: |\n      using System.Diagnostics;\n      ...\n  - pattern-inside: |\n      public $T $F(..., $ARG, ...)\n      {\n        ...\n      }\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          Process.Start($ARG, ...);\n      - focus-metavariable: $ARG\n    - patterns:\n      - pattern-inside: |\n          Process $PROC = new Process();\n          ...\n      - pattern-either:\n        - pattern-inside: |\n            $PROC.StartInfo.FileName = $ARG;\n            ...\n        - pattern-inside: |\n            $PROC.StartInfo.Arguments = <... $ARG ...>;\n            ...\n      - pattern: |\n          $PROC.Start();\n    - patterns:\n      - patterns:\n        - pattern-inside: |\n            ProcessStartInfo $PSINFO = new ProcessStartInfo()\n            {\n              ...\n            };\n            ...\n        - pattern-either:\n          - pattern-inside: |\n              FileName = $ARG;\n              ...\n          - pattern-inside: |\n              Arguments = <... $ARG ...>;\n              ...\n      - pattern: |\n          Process.Start($PSINFO);\n      - focus-metavariable: $PSINFO\n", "failed_tests": ["using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = command,\n                    Arguments = \"constant\"\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}"], "failed_type": "fn", "testsuite_a": "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command);\n        }\n\n        public void RunOsCommand(string command)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\");\n        }\n\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command, arguments);\n        }\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\", \"constant\");\n        }\n\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            process.StartInfo.Arguments = arguments;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            process.StartInfo.Arguments = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = command\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = args\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}\n", "testsuite_b": "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command);\n        }\n\n        public void RunOsCommand(string command)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\");\n        }\n\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command, arguments);\n        }\n\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\", \"constant\");\n        }\n\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            process.StartInfo.Arguments = arguments;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            process.StartInfo.Arguments = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = command\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = args\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = command,\n                    Arguments = args\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"constant\",\n                    Arguments = arguments\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = command,\n                    Arguments = \"constant\"\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"constant\",\n                    Arguments = \"constant\"\n                }\n            };\n\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}\n", "ground_truth": "rules:\n- id: os-command-injection\n  severity: ERROR\n  languages:\n  - csharp\n  metadata:\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    references:\n    - https://owasp.org/www-community/attacks/Command_Injection\n    category: security\n    technology:\n    - .net\n    confidence: LOW\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n  message: >-\n    The software constructs all or part of an OS command using externally-influenced input from an upstream\n    component, but\n    it does not neutralize or incorrectly neutralizes special elements that could modify the intended\n    OS command when it is\n    sent to a downstream component.\n  patterns:\n  - pattern-inside: |\n      using System.Diagnostics;\n      ...\n  - pattern-inside: |\n      public $T $F(..., $ARG, ...)\n      {\n        ...\n      }\n  - pattern-either:\n    - patterns:\n      - pattern: |\n          Process.Start($ARG, ...);\n      - focus-metavariable: $ARG\n    - patterns:\n      - pattern-inside: |\n          Process $PROC = new Process();\n          ...\n      - pattern-either:\n        - pattern-inside: |\n            $PROC.StartInfo.FileName = $ARG;\n            ...\n        - pattern-inside: |\n            $PROC.StartInfo.Arguments = <... $ARG ...>;\n            ...\n      - pattern: |\n          $PROC.Start();\n    - patterns:\n      - patterns:\n        - pattern-inside: |\n            ProcessStartInfo $PSINFO = new ProcessStartInfo()\n            {\n              ...\n            };\n            ...\n        - pattern-either:\n          - pattern-inside: |\n              FileName = $ARG;\n              ...\n          - pattern-inside: |\n              Arguments = <... $ARG ...>;\n              ...\n      - pattern: |\n          Process.Start($PSINFO);\n      - focus-metavariable: $PSINFO\n    - patterns:\n        - pattern-inside: |\n            Process $PROC = new Process()\n            {\n              StartInfo = new ProcessStartInfo()\n              {\n                ...\n              }\n            };\n            ...\n        - pattern-either:\n            - pattern-inside: |\n                FileName = $ARG;\n                ...\n            - pattern-inside: |\n                Arguments = $ARG;\n                ...\n        - pattern: |\n            $PROC.Start();\n", "rule_path": "extend_dataset/c8680548/before/os-command.yaml", "test_path": "extend_dataset/c8680548/after/os-command.cs", "category": "historical", "splited_testsuite_b": ["using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommand(string command)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\");\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ruleid: os-command-injection\n            var process = Process.Start(command, arguments);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithArgs(string command, string arguments)\n        {\n            // ok: os-command-injection\n            var process = Process.Start(\"constant\", \"constant\");\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithProcessParam(string command)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = command;\n            process.StartInfo.Arguments = arguments;\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process();\n\n            process.StartInfo.FileName = \"constant\";\n            process.StartInfo.Arguments = \"constant\";\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = command\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandWithStartInfo(string command)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = args\n            };\n\n            // ruleid: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunConstantAppWithArgs(string args)\n        {\n            ProcessStartInfo processStartInfo = new ProcessStartInfo()\n            {\n                FileName = \"constant\",\n                Arguments = \"constant\"\n            };\n\n            // ok: os-command-injection\n            var process = Process.Start(processStartInfo);\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = \"constant\",\n                    Arguments = \"constant\"\n                }\n            };\n\n            // ok: os-command-injection\n            process.Start();\n        }\n    }\n}", "using System.Diagnostics;\n\nnamespace Injections\n{\n    public class OsCommandInjection\n    {\n        public void RunOsCommandAndArgsWithProcessParam(string command, string arguments)\n        {\n            Process process = new Process\n            {\n                StartInfo = new ProcessStartInfo\n                {\n                    FileName = command,\n                    Arguments = \"constant\"\n                }\n            };\n\n            // ruleid: os-command-injection\n            process.Start();\n        }\n    }\n}"], "actual": [true, false, true, false, true, false, true, false, true, false, true, false, false, false], "expected": [true, false, true, false, true, false, true, false, true, false, true, false, false, true], "index": 182, "commit_message": "Checks for ProcessStartInfo instantiator", "commit_date_str": "2023-11-22 21:57:45 +0000", "leaf_count": 13, "line_count": 52}
{"id": "use-of-default-aes", "rule": "rules:\n- id: use-of-default-aes\n  pattern: $CIPHER.getInstance(\"AES\")\n  message: >-\n    Use of AES with no settings detected. By default, ECB mode is used. ECB doesn't  provide\n    message confidentiality and is not semantically secure so should not be used.\n    Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n    for more information.\n  severity: WARNING\n  languages:\n  - java\n", "failed_tests": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES\");\n  }\n}"], "failed_type": "fp", "testsuite_a": "class AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "testsuite_b": "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(crypto.KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(javax.crypto.KeyGenerator.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "ground_truth": "rules:\n  - id: use-of-default-aes\n    pattern-either:\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax;\n                  ...\n          - pattern-either:\n              - pattern: javax.crypto.Cipher.getInstance(\"AES\")\n              - pattern: (javax.crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto;\n                  ...\n          - pattern-either:\n              - pattern: crypto.Cipher.getInstance(\"AES\")\n              - pattern: (crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.crypto.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto.Cipher;\n                  ...\n          - pattern-either:\n              - pattern: Cipher.getInstance(\"AES\")\n              - pattern: (Cipher $CIPHER).getInstance(\"AES\")\n    metadata:\n      cwe:\n        - \"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\"\n      owasp:\n        - A03:2017 - Sensitive Data Exposure\n        - A02:2021 - Cryptographic Failures\n      category: security\n      technology:\n        - java\n      references:\n        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures\n        - https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html\n      subcategory:\n        - vuln\n      likelihood: MEDIUM\n      impact: MEDIUM\n      confidence: HIGH\n    message: >-\n      Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't \n      provide message confidentiality and is not semantically secure so should not be used.\n      Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n      See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n      for more information.\n    severity: WARNING\n    languages:\n      - java\n", "rule_path": "extend_dataset/f84a5d83/before/use-of-default-aes.yaml", "test_path": "extend_dataset/f84a5d83/after/use-of-default-aes.java", "category": "historical", "splited_testsuite_b": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES\");\n  }\n}"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false], "index": 183, "commit_message": "Updated to flexibly handle imports and eliminate type confusion (#2803)", "commit_date_str": "2023-03-16 17:00:17 -0700", "leaf_count": 1, "line_count": 1}
{"id": "use-of-default-aes", "rule": "rules:\n- id: use-of-default-aes\n  pattern: $CIPHER.getInstance(\"AES\")\n  message: >-\n    Use of AES with no settings detected. By default, ECB mode is used. ECB doesn't  provide\n    message confidentiality and is not semantically secure so should not be used.\n    Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n    for more information.\n  severity: WARNING\n  languages:\n  - java\n", "failed_tests": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES\");\n  }\n}"], "failed_type": "fp", "testsuite_a": "class AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "testsuite_b": "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(crypto.KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(javax.crypto.KeyGenerator.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "ground_truth": "rules:\n  - id: use-of-default-aes\n    pattern-either:\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax;\n                  ...\n          - pattern-either:\n              - pattern: javax.crypto.Cipher.getInstance(\"AES\")\n              - pattern: (javax.crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto;\n                  ...\n          - pattern-either:\n              - pattern: crypto.Cipher.getInstance(\"AES\")\n              - pattern: (crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.crypto.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto.Cipher;\n                  ...\n          - pattern-either:\n              - pattern: Cipher.getInstance(\"AES\")\n              - pattern: (Cipher $CIPHER).getInstance(\"AES\")\n    metadata:\n      cwe:\n        - \"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\"\n      owasp:\n        - A03:2017 - Sensitive Data Exposure\n        - A02:2021 - Cryptographic Failures\n      category: security\n      technology:\n        - java\n      references:\n        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures\n        - https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html\n      subcategory:\n        - vuln\n      likelihood: MEDIUM\n      impact: MEDIUM\n      confidence: HIGH\n    message: >-\n      Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't \n      provide message confidentiality and is not semantically secure so should not be used.\n      Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n      See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n      for more information.\n    severity: WARNING\n    languages:\n      - java\n", "rule_path": "extend_dataset/f84a5d83/before/use-of-default-aes.yaml", "test_path": "extend_dataset/f84a5d83/after/use-of-default-aes.java", "category": "historical", "splited_testsuite_b": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES\");\n  }\n}"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false], "index": 184, "commit_message": "Updated to flexibly handle imports and eliminate type confusion (#2803)", "commit_date_str": "2023-03-16 17:00:17 -0700", "leaf_count": 1, "line_count": 1}
{"id": "use-of-default-aes", "rule": "rules:\n- id: use-of-default-aes\n  pattern: $CIPHER.getInstance(\"AES\")\n  message: >-\n    Use of AES with no settings detected. By default, ECB mode is used. ECB doesn't  provide\n    message confidentiality and is not semantically secure so should not be used.\n    Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n    for more information.\n  severity: WARNING\n  languages:\n  - java\n", "failed_tests": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES\");\n  }\n}"], "failed_type": "fp", "testsuite_a": "class AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "testsuite_b": "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(crypto.KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(javax.crypto.KeyGenerator.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "ground_truth": "rules:\n  - id: use-of-default-aes\n    pattern-either:\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax;\n                  ...\n          - pattern-either:\n              - pattern: javax.crypto.Cipher.getInstance(\"AES\")\n              - pattern: (javax.crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto;\n                  ...\n          - pattern-either:\n              - pattern: crypto.Cipher.getInstance(\"AES\")\n              - pattern: (crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.crypto.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto.Cipher;\n                  ...\n          - pattern-either:\n              - pattern: Cipher.getInstance(\"AES\")\n              - pattern: (Cipher $CIPHER).getInstance(\"AES\")\n    metadata:\n      cwe:\n        - \"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\"\n      owasp:\n        - A03:2017 - Sensitive Data Exposure\n        - A02:2021 - Cryptographic Failures\n      category: security\n      technology:\n        - java\n      references:\n        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures\n        - https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html\n      subcategory:\n        - vuln\n      likelihood: MEDIUM\n      impact: MEDIUM\n      confidence: HIGH\n    message: >-\n      Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't \n      provide message confidentiality and is not semantically secure so should not be used.\n      Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n      See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n      for more information.\n    severity: WARNING\n    languages:\n      - java\n", "rule_path": "extend_dataset/f84a5d83/before/use-of-default-aes.yaml", "test_path": "extend_dataset/f84a5d83/after/use-of-default-aes.java", "category": "historical", "splited_testsuite_b": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES\");\n  }\n}"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false], "index": 185, "commit_message": "Updated to flexibly handle imports and eliminate type confusion (#2803)", "commit_date_str": "2023-03-16 17:00:17 -0700", "leaf_count": 1, "line_count": 1}
{"id": "use-of-default-aes", "rule": "rules:\n- id: use-of-default-aes\n  pattern: $CIPHER.getInstance(\"AES\")\n  message: >-\n    Use of AES with no settings detected. By default, ECB mode is used. ECB doesn't  provide\n    message confidentiality and is not semantically secure so should not be used.\n    Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n    for more information.\n  severity: WARNING\n  languages:\n  - java\n", "failed_tests": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ok: use-of-default-aes\n    useCipher(KeyGenerator.getInstance(\"AES\"));\n  }\n}"], "failed_type": "fp", "testsuite_a": "class AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "testsuite_b": "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(crypto.KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(javax.crypto.KeyGenerator.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "ground_truth": "rules:\n  - id: use-of-default-aes\n    pattern-either:\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax;\n                  ...\n          - pattern-either:\n              - pattern: javax.crypto.Cipher.getInstance(\"AES\")\n              - pattern: (javax.crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto;\n                  ...\n          - pattern-either:\n              - pattern: crypto.Cipher.getInstance(\"AES\")\n              - pattern: (crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.crypto.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto.Cipher;\n                  ...\n          - pattern-either:\n              - pattern: Cipher.getInstance(\"AES\")\n              - pattern: (Cipher $CIPHER).getInstance(\"AES\")\n    metadata:\n      cwe:\n        - \"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\"\n      owasp:\n        - A03:2017 - Sensitive Data Exposure\n        - A02:2021 - Cryptographic Failures\n      category: security\n      technology:\n        - java\n      references:\n        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures\n        - https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html\n      subcategory:\n        - vuln\n      likelihood: MEDIUM\n      impact: MEDIUM\n      confidence: HIGH\n    message: >-\n      Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't \n      provide message confidentiality and is not semantically secure so should not be used.\n      Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n      See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n      for more information.\n    severity: WARNING\n    languages:\n      - java\n", "rule_path": "extend_dataset/f84a5d83/before/use-of-default-aes.yaml", "test_path": "extend_dataset/f84a5d83/after/use-of-default-aes.java", "category": "historical", "splited_testsuite_b": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ok: use-of-default-aes\n    useCipher(KeyGenerator.getInstance(\"AES\"));\n  }\n}"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false], "index": 186, "commit_message": "Updated to flexibly handle imports and eliminate type confusion (#2803)", "commit_date_str": "2023-03-16 17:00:17 -0700", "leaf_count": 1, "line_count": 1}
{"id": "use-of-default-aes", "rule": "rules:\n- id: use-of-default-aes\n  pattern: $CIPHER.getInstance(\"AES\")\n  message: >-\n    Use of AES with no settings detected. By default, ECB mode is used. ECB doesn't  provide\n    message confidentiality and is not semantically secure so should not be used.\n    Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n    for more information.\n  severity: WARNING\n  languages:\n  - java\n", "failed_tests": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ok: use-of-default-aes\n    useCipher(crypto.KeyGenerator.getInstance(\"AES\"));\n  }\n}"], "failed_type": "fp", "testsuite_a": "class AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "testsuite_b": "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(crypto.KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(javax.crypto.KeyGenerator.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "ground_truth": "rules:\n  - id: use-of-default-aes\n    pattern-either:\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax;\n                  ...\n          - pattern-either:\n              - pattern: javax.crypto.Cipher.getInstance(\"AES\")\n              - pattern: (javax.crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto;\n                  ...\n          - pattern-either:\n              - pattern: crypto.Cipher.getInstance(\"AES\")\n              - pattern: (crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.crypto.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto.Cipher;\n                  ...\n          - pattern-either:\n              - pattern: Cipher.getInstance(\"AES\")\n              - pattern: (Cipher $CIPHER).getInstance(\"AES\")\n    metadata:\n      cwe:\n        - \"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\"\n      owasp:\n        - A03:2017 - Sensitive Data Exposure\n        - A02:2021 - Cryptographic Failures\n      category: security\n      technology:\n        - java\n      references:\n        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures\n        - https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html\n      subcategory:\n        - vuln\n      likelihood: MEDIUM\n      impact: MEDIUM\n      confidence: HIGH\n    message: >-\n      Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't \n      provide message confidentiality and is not semantically secure so should not be used.\n      Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n      See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n      for more information.\n    severity: WARNING\n    languages:\n      - java\n", "rule_path": "extend_dataset/f84a5d83/before/use-of-default-aes.yaml", "test_path": "extend_dataset/f84a5d83/after/use-of-default-aes.java", "category": "historical", "splited_testsuite_b": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ok: use-of-default-aes\n    useCipher(crypto.KeyGenerator.getInstance(\"AES\"));\n  }\n}"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false], "index": 187, "commit_message": "Updated to flexibly handle imports and eliminate type confusion (#2803)", "commit_date_str": "2023-03-16 17:00:17 -0700", "leaf_count": 1, "line_count": 1}
{"id": "use-of-default-aes", "rule": "rules:\n- id: use-of-default-aes\n  pattern: $CIPHER.getInstance(\"AES\")\n  message: >-\n    Use of AES with no settings detected. By default, ECB mode is used. ECB doesn't  provide\n    message confidentiality and is not semantically secure so should not be used.\n    Instead, use a strong, secure cipher: Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n    See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n    for more information.\n  severity: WARNING\n  languages:\n  - java\n", "failed_tests": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ok: use-of-default-aes\n    useCipher(javax.crypto.KeyGenerator.getInstance(\"AES\"));\n  }\n}"], "failed_type": "fp", "testsuite_a": "class AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "testsuite_b": "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES\");\n  }\n\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(crypto.KeyGenerator.getInstance(\"AES\"));\n\n    // ok: use-of-default-aes\n    useCipher(javax.crypto.KeyGenerator.getInstance(\"AES\"));\n  }\n\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}\n", "ground_truth": "rules:\n  - id: use-of-default-aes\n    pattern-either:\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax;\n                  ...\n          - pattern-either:\n              - pattern: javax.crypto.Cipher.getInstance(\"AES\")\n              - pattern: (javax.crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto;\n                  ...\n          - pattern-either:\n              - pattern: crypto.Cipher.getInstance(\"AES\")\n              - pattern: (crypto.Cipher $CIPHER).getInstance(\"AES\")\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  import javax.crypto.*;\n                  ...\n              - pattern-inside: |\n                  import javax.crypto.Cipher;\n                  ...\n          - pattern-either:\n              - pattern: Cipher.getInstance(\"AES\")\n              - pattern: (Cipher $CIPHER).getInstance(\"AES\")\n    metadata:\n      cwe:\n        - \"CWE-327: Use of a Broken or Risky Cryptographic Algorithm\"\n      owasp:\n        - A03:2017 - Sensitive Data Exposure\n        - A02:2021 - Cryptographic Failures\n      category: security\n      technology:\n        - java\n      references:\n        - https://owasp.org/Top10/A02_2021-Cryptographic_Failures\n        - https://googleprojectzero.blogspot.com/2022/10/rc4-is-still-considered-harmful.html\n      subcategory:\n        - vuln\n      likelihood: MEDIUM\n      impact: MEDIUM\n      confidence: HIGH\n    message: >-\n      Use of AES with no settings detected. By default, java.crypto.Cipher uses ECB mode. ECB doesn't \n      provide message confidentiality and is not semantically secure so should not be used.\n      Instead, use a strong, secure cipher: java.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\").\n      See https://owasp.org/www-community/Using_the_Java_Cryptographic_Extensions\n      for more information.\n    severity: WARNING\n    languages:\n      - java\n", "rule_path": "extend_dataset/f84a5d83/before/use-of-default-aes.yaml", "test_path": "extend_dataset/f84a5d83/after/use-of-default-aes.java", "category": "historical", "splited_testsuite_b": ["import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES() {\n    // ruleid: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ruleid: use-of-default-aes\n    useCipher(javax.crypto.Cipher.getInstance(\"AES\"));\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.Cipher.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void ok() {\n    // ok: use-of-default-aes\n    javax.crypto.KeyGenerator.getInstance(\"AES/CBC/PKCS7PADDING\");\n  }\n}", "import javax;\n\nimport javax.*;\n// import javax.crypto;\n\nimport javax.crypto.*;\n// import javax.crypto.Cipher;\n\nclass AES{\n  public void useofAES2() {\n    // ok: use-of-default-aes\n    useCipher(javax.crypto.KeyGenerator.getInstance(\"AES\"));\n  }\n}"], "actual": [true, true, true, true, true, true, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, true, false, false, false, false, false, false, false], "index": 188, "commit_message": "Updated to flexibly handle imports and eliminate type confusion (#2803)", "commit_date_str": "2023-03-16 17:00:17 -0700", "leaf_count": 1, "line_count": 1}
{"id": "saxparserfactory", "rule": "rules:\n- id: owasp.java.xxe.javax.xml.parsers.SAXParserFactory\n  message: >-\n    SAXParserFactory being instantiated without calling the setFeature functions that\n    are generally used for disabling entity\n    processing\n  severity: ERROR\n  patterns:\n      # Reference : https://www.programcreek.com/java-api-examples/?api=javax.xml.parsers.SAXParserFactory\n  - pattern-either:\n    - pattern: |\n        SAXParserFactory $SPF =  ... ;\n        ...\n        SAXParser $SAXPARSER = $SPF.newSAXParser();\n        ...\n        $SAXPARSER.parse(...);\n    - pattern: SAXParserFactory $SPF = SAXParserFactory.newInstance();\n    - pattern: SAXParser $SAXPARSER = SAXParserFactory.newInstance().newSAXParser();\n  - pattern-not-inside: |\n      $RETURNTYPE $METHOD(...) {\n        ...\n        $XXX.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n        $XXX.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n        $XXX.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n        ...\n      }\n  - pattern-not-inside: |\n      SAXParserFactory $SPF = ... ;\n      ...\n      $SPF.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n      $SPF.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n      $SPF.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n  languages:\n  - java\n", "failed_tests": ["```java\npackage org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @RequestMapping(value = \"/SAXParser/sec\", method = RequestMethod.POST)\n    public String SAXParserSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.parsers.SAXParserFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            SAXParser parser = spf.newSAXParser();\n            parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"SAXParser xxe security code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}\n```"], "failed_type": "fp", "testsuite_a": "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/xmlReader/vuln\")\n    public String xmlReaderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n            xmlReader.parse(new InputSource(new StringReader(body)));  // parse xml\n            return \"xmlReader xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/xmlReader/sec\", method = RequestMethod.POST)\n    public String xmlReaderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n            xmlReader.parse(new InputSource(new StringReader(body)));  // parse xml\n\n            // fix code start\n            xmlReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            //fix code end\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"xmlReader xxe security code\";\n    }\n\n\n    @RequestMapping(value = \"/SAXBuilder/vuln\", method = RequestMethod.POST)\n    public String SAXBuilderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            SAXBuilder builder = new SAXBuilder();\n            // org.jdom2.Document document\n            builder.build(new InputSource(new StringReader(body)));  // cause xxe\n            return \"SAXBuilder xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/SAXBuilder/sec\", method = RequestMethod.POST)\n    public String SAXBuilderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            SAXBuilder builder = new SAXBuilder();\n            builder.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            builder.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            builder.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            // org.jdom2.Document document\n            builder.build(new InputSource(new StringReader(body)));\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"SAXBuilder xxe security code\";\n    }\n\n    @RequestMapping(value = \"/SAXReader/vuln\", method = RequestMethod.POST)\n    public String SAXReaderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            SAXReader reader = new SAXReader();\n            // org.dom4j.Document document\n            reader.read(new InputSource(new StringReader(body))); // cause xxe\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"SAXReader xxe vuln code\";\n    }\n\n    @RequestMapping(value = \"/SAXReader/sec\", method = RequestMethod.POST)\n    public String SAXReaderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            SAXReader reader = new SAXReader();\n            reader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            reader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            reader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            // org.dom4j.Document document\n            reader.read(new InputSource(new StringReader(body)));\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"SAXReader xxe security code\";\n    }\n\n    @RequestMapping(value = \"/SAXParser/vuln\", method = RequestMethod.POST)\n    public String SAXParserVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.parsers.SAXParserFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            SAXParser parser = spf.newSAXParser();\n            parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml\n\n            return \"SAXParser xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/SAXParser/sec\", method = RequestMethod.POST)\n    public String SAXParserSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            spf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            SAXParser parser = spf.newSAXParser();\n            parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"SAXParser xxe security code\";\n    }\n\n\n    @RequestMapping(value = \"/Digester/vuln\", method = RequestMethod.POST)\n    public String DigesterVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            Digester digester = new Digester();\n            digester.parse(new StringReader(body));  // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"Digester xxe vuln code\";\n    }\n\n    @RequestMapping(value = \"/Digester/sec\", method = RequestMethod.POST)\n    public String DigesterSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            Digester digester = new Digester();\n            digester.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            digester.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            digester.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            digester.parse(new StringReader(body));  // parse xml\n\n            return \"Digester xxe security code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    // \u6709\u56de\u663e\n    @RequestMapping(value = \"/DocumentBuilder/vuln01\", method = RequestMethod.POST)\n    public String DocumentBuilderVuln01(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            // \u904d\u5386xml\u8282\u70b9name\u548cvalue\n            StringBuilder buf = new StringBuilder();\n            NodeList rootNodeList = document.getChildNodes();\n            for (int i = 0; i < rootNodeList.getLength(); i++) {\n                Node rootNode = rootNodeList.item(i);\n                NodeList child = rootNode.getChildNodes();\n                for (int j = 0; j < child.getLength(); j++) {\n                    Node node = child.item(j);\n                    buf.append(String.format(\"%s: %s\\n\", node.getNodeName(), node.getTextContent()));\n                }\n            }\n            sr.close();\n            return buf.toString();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    // \u6709\u56de\u663e\n    @RequestMapping(value = \"/DocumentBuilder/vuln02\", method = RequestMethod.POST)\n    public String DocumentBuilderVuln02(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            // \u904d\u5386xml\u8282\u70b9name\u548cvalue\n            StringBuilder result = new StringBuilder();\n            NodeList rootNodeList = document.getChildNodes();\n            for (int i = 0; i < rootNodeList.getLength(); i++) {\n                Node rootNode = rootNodeList.item(i);\n                NodeList child = rootNode.getChildNodes();\n                for (int j = 0; j < child.getLength(); j++) {\n                    Node node = child.item(j);\n                    // \u6b63\u5e38\u89e3\u6790XML\uff0c\u9700\u8981\u5224\u65ad\u662f\u5426\u662fELEMENT_NODE\u7c7b\u578b\u3002\u5426\u5219\u4f1a\u51fa\u73b0\u591a\u4f59\u7684\u7684\u8282\u70b9\u3002\n                    if (child.item(j).getNodeType() == Node.ELEMENT_NODE) {\n                        result.append(String.format(\"%s: %s\\n\", node.getNodeName(), node.getFirstChild()));\n                    }\n                }\n            }\n            sr.close();\n            return result.toString();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/DocumentBuilder/Sec\", method = RequestMethod.POST)\n    public String DocumentBuilderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            db.parse(is);  // parse xml\n            sr.close();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"DocumentBuilder xxe security code\";\n    }\n\n\n    @RequestMapping(value = \"/DocumentBuilder/xinclude/vuln\", method = RequestMethod.POST)\n    public String DocumentBuilderXincludeVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            dbf.setXIncludeAware(true);   // \u652f\u6301XInclude\n            dbf.setNamespaceAware(true);  // \u652f\u6301XInclude\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            NodeList rootNodeList = document.getChildNodes();\n            response(rootNodeList);\n\n            sr.close();\n            return \"DocumentBuilder xinclude xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/DocumentBuilder/xinclude/sec\", method = RequestMethod.POST)\n    public String DocumentBuilderXincludeSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n            dbf.setXIncludeAware(true);   // \u652f\u6301XInclude\n            dbf.setNamespaceAware(true);  // \u652f\u6301XInclude\n            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            NodeList rootNodeList = document.getChildNodes();\n            response(rootNodeList);\n\n            sr.close();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"DocumentBuilder xinclude xxe vuln code\";\n    }\n\n\n    @PostMapping(\"/XMLReader/vuln\")\n    public String XMLReaderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.parsers.SAXParserFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            SAXParser saxParser = spf.newSAXParser();\n            XMLReader xmlReader = saxParser.getXMLReader();\n            xmlReader.parse(new InputSource(new StringReader(body)));\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLReader xxe vuln code\";\n    }\n\n\n    @PostMapping(\"/XMLReader/sec\")\n    public String XMLReaderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            SAXParser saxParser = spf.newSAXParser();\n            XMLReader xmlReader = saxParser.getXMLReader();\n            xmlReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            xmlReader.parse(new InputSource(new StringReader(body)));\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"XMLReader xxe security code\";\n    }\n\n\n    /**\n     * \u4fee\u590d\u8be5\u6f0f\u6d1e\u53ea\u9700\u5347\u7ea7dom4j\u52302.1.1\u53ca\u4ee5\u4e0a\uff0c\u8be5\u7248\u672c\u53ca\u4ee5\u4e0a\u7981\u7528\u4e86ENTITY\uff1b\n     * \u4e0d\u5e26ENTITY\u7684PoC\u4e0d\u80fd\u5229\u7528\uff0c\u6240\u4ee5\u7981\u7528ENTITY\u5373\u53ef\u5b8c\u6210\u4fee\u590d\u3002\n     */\n    @PostMapping(\"/DocumentHelper/vuln\")\n    public String DocumentHelper(HttpServletRequest req) {\n        try {\n            String body = WebUtils.getRequestBody(req);\n            DocumentHelper.parseText(body); // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"DocumentHelper xxe vuln code\";\n    }\n\n\n    private static void response(NodeList rootNodeList){\n        for (int i = 0; i < rootNodeList.getLength(); i++) {\n            Node rootNode = rootNodeList.item(i);\n            NodeList xxe = rootNode.getChildNodes();\n            for (int j = 0; j < xxe.getLength(); j++) {\n                Node xxeNode = xxe.item(j);\n                // \u6d4b\u8bd5\u4e0d\u80fdblind xxe\uff0c\u6240\u4ee5\u5f3a\u884c\u52a0\u4e86\u4e00\u4e2a\u56de\u663e\n                logger.info(\"xxeNode: \" + xxeNode.getNodeValue());\n            }\n\n        }\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}\n", "testsuite_b": "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @RequestMapping(value = \"/SAXParser/vuln\", method = RequestMethod.POST)\n    public String SAXParserVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.parsers.SAXParserFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            SAXParser parser = spf.newSAXParser();\n            parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml\n\n            return \"SAXParser xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n    @RequestMapping(value = \"/SAXParser/sec\", method = RequestMethod.POST)\n    public String SAXParserSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.parsers.SAXParserFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            SAXParser parser = spf.newSAXParser();\n            parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"SAXParser xxe security code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}\n", "ground_truth": "rules:\n  - id: owasp.java.xxe.javax.xml.parsers.SAXParserFactory\n    message: >-\n      SAXParserFactory being instantiated without calling the setFeature functions that are generally used for disabling entity\n      processing\n    metadata:\n      cwe: \"CWE-611: Improper Restriction of XML External Entity Reference\"\n      owasp: \"A4: XML External Entities (XXE)\"\n      source-rule-url: https://cheatsheetseries.owasp.org//cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html\n      category: security\n    severity: ERROR\n    patterns:\n      # Reference : https://www.programcreek.com/java-api-examples/?api=javax.xml.parsers.SAXParserFactory\n      - pattern-either:\n          - pattern: |\n              SAXParserFactory $SPF =  ... ;\n              ...\n              SAXParser $SAXPARSER = $SPF.newSAXParser();\n              ...\n              $SAXPARSER.parse(...);\n          - pattern: SAXParserFactory $SPF = SAXParserFactory.newInstance();\n          - pattern: SAXParser $SAXPARSER = SAXParserFactory.newInstance().newSAXParser();\n      - pattern-not-inside: |\n          $RETURNTYPE $METHOD(...) {\n            ...\n            $SPF.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            ...\n          }\n      - pattern-not-inside: |\n          SAXParserFactory $SPF = ... ;\n          ...\n          $SPF.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n    languages:\n      - java\n", "rule_path": "extend_dataset/0eed6610/before/saxparserfactory.yaml", "test_path": "extend_dataset/0eed6610/after/saxparserfactory.java", "category": "historical", "splited_testsuite_b": ["```java\npackage org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @RequestMapping(value = \"/SAXParser/vuln\", method = RequestMethod.POST)\n    public String SAXParserVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.parsers.SAXParserFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            SAXParser parser = spf.newSAXParser();\n            parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml\n\n            return \"SAXParser xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}\n```", "```java\npackage org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @RequestMapping(value = \"/SAXParser/sec\", method = RequestMethod.POST)\n    public String SAXParserSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.parsers.SAXParserFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            SAXParser parser = spf.newSAXParser();\n            parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"SAXParser xxe security code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}\n```"], "actual": [true, true], "expected": [true, false], "index": 189, "commit_message": "Fixing OWASP saxparserfactory rule (#2059)", "commit_date_str": "2022-05-26 18:02:16 -0500", "leaf_count": 5, "line_count": 30}
{"id": "cookie-missing-samesite", "rule": "rules:\n- id: cookie-missing-samesite\n  message: >-\n    Detected cookie without the SameSite attribute.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-not-inside: |\n      $RETURNTYPE $METHOD(..., HttpServletResponse $RESP, ...) {\n        ...\n        $RESP.setHeader(\"Set-Cookie\", \"=~/.*SameSite=.*/\");\n        ...\n      }\n  - pattern-either:\n    - pattern: $RESP.addCookie(...);\n    - pattern: $RESP.setHeader(\"Set-Cookie\", ...);\n", "failed_tests": ["@Controller\npublic class CookieController {\n\n    @RequestMapping(value = \"/cookie4\", method = \"GET\")\n    public void setEverything(@RequestParam String value, HttpServletResponse response) {\n        // ok:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", null);\n    }\n}"], "failed_type": "fp", "testsuite_a": "@Controller\npublic class CookieController {\n\n    @RequestMapping(value = \"/cookie1\", method = \"GET\")\n    public void setCookie(@RequestParam String value, HttpServletResponse response) {\n        // ok:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", \"key=value; HttpOnly; SameSite=strict\");\n    }\n\n    @RequestMapping(value = \"/cookie2\", method = \"GET\")\n    public void setSecureCookie(@RequestParam String value, HttpServletResponse response) {\n        // ruleid:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", \"key=value; HttpOnly;\");\n    }\n\n    @RequestMapping(value = \"/cookie3\", method = \"GET\")\n    public void setSecureHttponlyCookie(@RequestParam String value, HttpServletResponse response) {\n        Cookie cookie = new Cookie(\"cookie\", value);\n        cookie.setSecure(true);\n        cookie.setHttpOnly(true);\n        // ruleid:cookie-missing-samesite\n        response.addCookie(cookie);\n    }\n\n    @RequestMapping(value = \"/cookie4\", method = \"GET\")\n    public void setEverything(@RequestParam String value, HttpServletResponse response) {\n        // ok:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", \"key=value; HttpOnly; Secure; SameSite=strict\");\n        response.addCookie(cookie);\n    }\n}\n", "testsuite_b": "@Controller\npublic class CookieController {\n\n    @RequestMapping(value = \"/cookie1\", method = \"GET\")\n    public void setCookie(@RequestParam String value, HttpServletResponse response) {\n        // ok:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", \"key=value; HttpOnly; SameSite=strict\");\n    }\n\n    @RequestMapping(value = \"/cookie2\", method = \"GET\")\n    public void setSecureCookie(@RequestParam String value, HttpServletResponse response) {\n        // ruleid:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", \"key=value; HttpOnly;\");\n    }\n\n    @RequestMapping(value = \"/cookie3\", method = \"GET\")\n    public void setSecureHttponlyCookie(@RequestParam String value, HttpServletResponse response) {\n        Cookie cookie = new Cookie(\"cookie\", value);\n        cookie.setSecure(true);\n        cookie.setHttpOnly(true);\n        // ruleid:cookie-missing-samesite\n        response.addCookie(cookie);\n    }\n\n    @RequestMapping(value = \"/cookie4\", method = \"GET\")\n    public void setEverything(@RequestParam String value, HttpServletResponse response) {\n        // ok:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", \"key=value; HttpOnly; Secure; SameSite=strict\");\n        response.addCookie(cookie);\n    }\n\n    @RequestMapping(value = \"/cookie4\", method = \"GET\")\n    public void setEverything(@RequestParam String value, HttpServletResponse response) {\n        // ok:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", null);\n    }\n}\n", "ground_truth": "rules:\n- id: cookie-missing-samesite\n  metadata:\n    cwe:\n    - 'CWE-352: Cross-Site Request Forgery (CSRF)'\n    owasp:\n    - A01:2021 - Broken Access Control\n    asvs:\n      section: 'V3: Session Management Verification Requirements'\n      control_id: 3.4.3 Missing Cookie Attribute\n      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x12-V3-Session-management.md#v34-cookie-based-session-management\n      version: '4'\n    references:\n    - https://stackoverflow.com/questions/42717210/samesite-cookie-in-java-application\n    category: security\n    technology:\n    - java\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: LOW\n    confidence: LOW\n  message: >-\n    Detected cookie without the SameSite attribute.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-not-inside: |\n      $RETURNTYPE $METHOD(..., HttpServletResponse $RESP, ...) {\n        ...\n        $RESP.setHeader(\"Set-Cookie\", \"=~/.*SameSite=.*/\");\n        ...\n      }\n  - pattern-either:\n    - pattern: $RESP.addCookie(...);\n    - pattern: $RESP.setHeader(\"Set-Cookie\", ...);\n  - pattern-not: $RESP.setHeader(\"Set-Cookie\", null);\n", "rule_path": "extend_dataset/54c53a25/before/cookie-missing-samesite.yaml", "test_path": "extend_dataset/54c53a25/after/cookie-missing-samesite.java", "category": "historical", "splited_testsuite_b": ["@Controller\npublic class CookieController {\n\n    @RequestMapping(value = \"/cookie1\", method = \"GET\")\n    public void setCookie(@RequestParam String value, HttpServletResponse response) {\n        // ok:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", \"key=value; HttpOnly; SameSite=strict\");\n    }\n}", "@Controller\npublic class CookieController {\n\n    @RequestMapping(value = \"/cookie2\", method = \"GET\")\n    public void setSecureCookie(@RequestParam String value, HttpServletResponse response) {\n        // ruleid:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", \"key=value; HttpOnly;\");\n    }\n}", "@Controller\npublic class CookieController {\n\n    @RequestMapping(value = \"/cookie3\", method = \"GET\")\n    public void setSecureHttponlyCookie(@RequestParam String value, HttpServletResponse response) {\n        Cookie cookie = new Cookie(\"cookie\", value);\n        cookie.setSecure(true);\n        cookie.setHttpOnly(true);\n        // ruleid:cookie-missing-samesite\n        response.addCookie(cookie);\n    }\n}", "@Controller\npublic class CookieController {\n\n    @RequestMapping(value = \"/cookie4\", method = \"GET\")\n    public void setEverything(@RequestParam String value, HttpServletResponse response) {\n        // ok:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", \"key=value; HttpOnly; Secure; SameSite=strict\");\n        response.addCookie(cookie);\n    }\n}", "@Controller\npublic class CookieController {\n\n    @RequestMapping(value = \"/cookie4\", method = \"GET\")\n    public void setEverything(@RequestParam String value, HttpServletResponse response) {\n        // ok:cookie-missing-samesite\n        response.setHeader(\"Set-Cookie\", null);\n    }\n}"], "actual": [false, true, true, false, true], "expected": [false, true, true, false, false], "index": 190, "commit_message": "Fixing cookie-missing-samesite flagging 'null' (#2565)", "commit_date_str": "2022-11-28 12:40:20 +0100", "leaf_count": 3, "line_count": 7}
{"id": "hardcoded-conditional", "rule": "rules:\n- id: hardcoded-conditional\n  message: useless if statement, always the same behavior\n  languages: [java]\n  severity: ERROR\n  pattern-either:\n  - pattern: if (<... true ...>) { ... }\n  - pattern: if (<... false ...>) { ... }\n", "failed_tests": ["class Bar {\n    void main(boolean arg) {\n        boolean myBoolean;\n\n        // ok:hardcoded-conditional\n        if (moveToChild(curs, index, false, false))\n        {\n            removeToken(curs);\n        }\n    }\n}"], "failed_type": "fp", "testsuite_a": "class Bar {\n    void main(boolean arg) {\n        boolean myBoolean;\n\n        // ruleid:hardcoded-conditional\n        if (myBoolean = true) {\n            continue;\n        }\n        // note that with new constant propagation, myBoolean is assumed\n        // to true below\n\n        // ruleid:hardcoded-conditional\n        if (true) {\n            continue;\n        }\n\n        // ruleid:hardcoded-conditional\n        if (true && false) {\n            continue;\n        }\n\n        // the dataflow constant-propagation now kicks in! this is true!\n        // ruleid:hardcoded-conditional\n        if (myBoolean) {\n\n        }\n        // to prevent constant propagation to assumes\n        // myBoolean is true below\n        myBoolean = arg;\n\n        // ok:hardcoded-conditional\n        if (myBoolean == myBoolean) {\n            continue;\n        }\n\n        // ok:hardcoded-conditional\n        if (myBoolean != myBoolean) {\n            continue;\n        }\n\n    }\n}\n", "testsuite_b": "class Bar {\n    void main(boolean arg) {\n        boolean myBoolean;\n\n        // ruleid:hardcoded-conditional\n        if (myBoolean = true) {\n            continue;\n        }\n        // note that with new constant propagation, myBoolean is assumed\n        // to true below\n\n        // ruleid:hardcoded-conditional\n        if (true) {\n            continue;\n        }\n\n        // ruleid:hardcoded-conditional\n        if (true && false) {\n            continue;\n        }\n\n        // the dataflow constant-propagation now kicks in! this is true!\n        // ruleid:hardcoded-conditional\n        if (myBoolean) {\n\n        }\n        // to prevent constant propagation to assumes\n        // myBoolean is true below\n        myBoolean = arg;\n\n        // ok:hardcoded-conditional\n        if (myBoolean == myBoolean) {\n            continue;\n        }\n\n        // ok:hardcoded-conditional\n        if (myBoolean != myBoolean) {\n            continue;\n        }\n\n        // ok:hardcoded-conditional\n        if (moveToChild(curs, index, false, false))\n        {\n            removeToken(curs);\n        }\n\n    }\n}\n", "ground_truth": "rules:\n- id: hardcoded-conditional\n  patterns:\n  - pattern-either:\n    - pattern: if (true) { ... }\n    - pattern: if (false) { ... }\n    - pattern: if ($VAR = true) { ... }\n    - pattern: if ($VAR = false) { ... }\n    - pattern: if ($EXPR && false) { ... }\n    - pattern: if (false && $EXPR) { ... }\n    - pattern: if ($EXPR || true) { ... }\n    - pattern: if (true || $EXPR) { ... }\n  message: This if statement will always have the same behavior and is therefore unnecessary.\n  languages: [java]\n  severity: ERROR\n  metadata:\n    category: correctness\n    technology:\n    - java\n", "rule_path": "extend_dataset/46347b7f/before/hardcoded-conditional.yaml", "test_path": "extend_dataset/46347b7f/after/hardcoded-conditional.java", "category": "historical", "splited_testsuite_b": ["class Bar {\n    void main(boolean arg) {\n        boolean myBoolean;\n\n        // ruleid:hardcoded-conditional\n        if (myBoolean = true) {\n            continue;\n        }\n        // note that with new constant propagation, myBoolean is assumed\n        // to true below\n    }\n}", "class Bar {\n    void main(boolean arg) {\n        boolean myBoolean;\n\n        // ruleid:hardcoded-conditional\n        if (true) {\n            continue;\n        }\n    }\n}", "class Bar {\n    void main(boolean arg) {\n        boolean myBoolean;\n\n        // ruleid:hardcoded-conditional\n        if (true && false) {\n            continue;\n        }\n    }\n}", "class Bar {\n    void main(boolean arg) {\n        boolean myBoolean;\n\n        // ok:hardcoded-conditional\n        if (myBoolean == myBoolean) {\n            continue;\n        }\n    }\n}", "class Bar {\n    void main(boolean arg) {\n        boolean myBoolean;\n\n        // ok:hardcoded-conditional\n        if (myBoolean != myBoolean) {\n            continue;\n        }\n    }\n}", "class Bar {\n    void main(boolean arg) {\n        boolean myBoolean;\n\n        // ok:hardcoded-conditional\n        if (moveToChild(curs, index, false, false))\n        {\n            removeToken(curs);\n        }\n    }\n}"], "actual": [true, true, true, false, false, true], "expected": [true, true, true, false, false, false], "index": 191, "commit_message": "Fix java hardcoded conditional (#1504)", "commit_date_str": "2021-10-01 11:31:20 -0500", "leaf_count": 2, "line_count": 3}
{"id": "formatted-sql-string", "rule": "rules:\n- id: formatted-sql-string\n  message: >-\n    Detected a formatted string in a SQL statement. This could lead to SQL\n    injection if variables in the SQL statement are not properly sanitized.\n    Use a prepared statements (java.sql.PreparedStatement) instead. You\n    can obtain a PreparedStatement using 'connection.prepareStatement'.\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          (HttpServletRequest $REQ)\n      - patterns:\n        - pattern-inside: |\n            $ANNOT $FUNC (..., $INPUT, ...) {\n              ...\n            }\n        - pattern-either:\n          - pattern: (String $INPUT)\n          - pattern: String.format(..., (String $INPUT), ...)\n  pattern-sinks:\n  - patterns:\n    - pattern-not: $W.$SQLFUNC(<... \"=~/.*TABLE *$/\" ...>)\n    - pattern-not: $W.$SQLFUNC(<... \"=~/.*TABLE %s$/\" ...>)\n    - pattern: $W.$SQLFUNC(...)\n    - metavariable-regex:\n        metavariable: $SQLFUNC\n        regex: execute|executeQuery|createQuery|query\n  severity: ERROR\n  languages:\n  - java\n", "failed_tests": ["// This whole operation has nothing to do with SQL\npublic class FalsePositiveCase {\n    private ApiClient apiClient; // imagine an ApiClient class that contains a method named execute\n\n    public void test(String parameter) throws ApiException {\n        com.squareup.okhttp.Call call = constructHttpCall(parameter); // Create OKHttp call using parameter from outside\n        apiClient.execute(call);\n        apiClient.execute(call);\n        apiClient.run(call); // proof that 'execute' name is causing the false-positive\n    }\n}"], "failed_type": "fp", "testsuite_a": "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SqlExample {\n    public void staticQuery() throws SQLException {\n        Connection c = DB.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM happy_messages\");\n    }\n\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM \" + tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n\n    public void findAccountsById(String id, String field) throws SQLException {\n        String sql = \"SELECT \";\n        sql += field;\n        sql += \" FROM accounts WHERE id = '\";\n        sql += id;\n        sql += \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n}\n\npublic class SqlExample2 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(\"SELECT * FROM \" + tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = \"from Account where id = '\" + id + \"'\";\n        // ruleid:formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n}\n\npublic class SQLExample3 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(String.format(\"SELECT * FROM %s\", tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = String.format(\"from Account where id = '%s'\", id);\n        // ruleid: formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n\n    public void findAccountsByIdOk() throws SQLException {\n        String id = \"const\"\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n}\n\npublic class tableConcatStatements {\n    public void tableConcat() {\n        // ok:formatted-sql-string\n        stmt.execute(\"DROP TABLE \" + tableName);\n        stmt.execute(String.format(\"CREATE TABLE %s\", tableName));\n    }\n}\n", "testsuite_b": "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SqlExample {\n    public void staticQuery() throws SQLException {\n        Connection c = DB.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM happy_messages\");\n    }\n\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM \" + tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n\n    public void findAccountsById(String id, String field) throws SQLException {\n        String sql = \"SELECT \";\n        sql += field;\n        sql += \" FROM accounts WHERE id = '\";\n        sql += id;\n        sql += \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n}\n\npublic class SqlExample2 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(\"SELECT * FROM \" + tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = \"from Account where id = '\" + id + \"'\";\n        EntityManager em = emfactory.createEntityManager();\n        // ruleid:formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n}\n\npublic class SQLExample3 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(String.format(\"SELECT * FROM %s\", tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = String.format(\"from Account where id = '%s'\", id);\n        EntityManager em = emfactory.createEntityManager();\n        // ruleid: formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n\n    public void findAccountsByIdOk() throws SQLException {\n        String id = \"const\"\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n}\n\npublic class tableConcatStatements {\n    public void tableConcat() {\n        // ok:formatted-sql-string\n        stmt.execute(\"DROP TABLE \" + tableName);\n        stmt.execute(String.format(\"CREATE TABLE %s\", tableName));\n    }\n}\n\n// This whole operation has nothing to do with SQL\npublic class FalsePositiveCase {\n    private ApiClient apiClient; // imagine an ApiClient class that contains a method named execute\n\n    public void test(String parameter) throws ApiException {\n        com.squareup.okhttp.Call call = constructHttpCall(parameter); // Create OKHttp call using parameter from outside\n        apiClient.execute(call);\n        apiClient.execute(call);\n        apiClient.run(call); // proof that 'execute' name is causing the false-positive\n    }\n}\n\n", "ground_truth": "rules:\n  - id: formatted-sql-string\n    metadata:\n      cwe: \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n      owasp: \"A1: Injection\"\n      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION\n      asvs:\n        section: \"V5: Validation, Sanitization and Encoding Verification Requirements\"\n        control_id: 5.3.5 Injection\n        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements\n        version: \"4\"\n      references:\n        - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n        - https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps\n        - https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement\n      category: security\n      technology:\n        - java\n    message: >-\n      Detected a formatted string in a SQL statement. This could lead to SQL\n      injection if variables in the SQL statement are not properly sanitized.\n      Use a prepared statements (java.sql.PreparedStatement) instead. You\n      can obtain a PreparedStatement using 'connection.prepareStatement'.\n    mode: taint\n    pattern-sources:\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            (HttpServletRequest $REQ)\n        - patterns:\n          - pattern-inside: |\n              $ANNOT $FUNC (..., $INPUT, ...) {\n                ...\n              }\n          - pattern-either:\n            - pattern: (String $INPUT)\n            - pattern: String.format(..., (String $INPUT), ...)\n    pattern-sinks: \n    - patterns:\n      - pattern-not: $S.$SQLFUNC(<... \"=~/.*TABLE *$/\" ...>)\n      - pattern-not: $S.$SQLFUNC(<... \"=~/.*TABLE %s$/\" ...>)\n      - pattern-either:\n        - pattern: (Statement $S).$SQLFUNC(...)\n        - pattern: (Connection $C).createStatement(...).$SQLFUNC(...)\n        - pattern: (EntityManager $EM).$SQLFUNC(...)\n      - metavariable-regex:\n          metavariable: $SQLFUNC\n          regex: execute|executeQuery|createQuery|query\n    severity: ERROR\n    languages:\n      - java\n", "rule_path": "extend_dataset/056b59dc/before/formatted-sql-string.yaml", "test_path": "extend_dataset/056b59dc/after/formatted-sql-string.java", "category": "historical", "splited_testsuite_b": ["// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SqlExample {\n    public void staticQuery() throws SQLException {\n        Connection c = DB.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM happy_messages\");\n    }\n}", "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SqlExample {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM \" + tableName);\n    }\n}", "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SqlExample {\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n}", "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SqlExample {\n    public void findAccountsById(String id, String field) throws SQLException {\n        String sql = \"SELECT \";\n        sql += field;\n        sql += \" FROM accounts WHERE id = '\";\n        sql += id;\n        sql += \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n}", "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SqlExample2 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(\"SELECT * FROM \" + tableName);\n    }\n}", "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SqlExample2 {\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n}", "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SqlExample2 {\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = \"from Account where id = '\" + id + \"'\";\n        EntityManager em = emfactory.createEntityManager();\n        // ruleid:formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n}", "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SQLExample3 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(String.format(\"SELECT * FROM %s\", tableName);\n    }\n}", "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SQLExample3 {\n    public void findAccountsById(String id) throws SQLException {\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n}", "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SQLExample3 {\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = String.format(\"from Account where id = '%s'\", id);\n        EntityManager em = emfactory.createEntityManager();\n        // ruleid: formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n}", "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SQLExample3 {\n    public void findAccountsByIdOk() throws SQLException {\n        String id = \"const\"\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n}", "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class tableConcatStatements {\n    public void tableConcat() {\n        // ok:formatted-sql-string\n        stmt.execute(\"DROP TABLE \" + tableName);\n        stmt.execute(String.format(\"CREATE TABLE %s\", tableName));\n    }\n}", "// This whole operation has nothing to do with SQL\npublic class FalsePositiveCase {\n    private ApiClient apiClient; // imagine an ApiClient class that contains a method named execute\n\n    public void test(String parameter) throws ApiException {\n        com.squareup.okhttp.Call call = constructHttpCall(parameter); // Create OKHttp call using parameter from outside\n        apiClient.execute(call);\n        apiClient.execute(call);\n        apiClient.run(call); // proof that 'execute' name is causing the false-positive\n    }\n}"], "actual": [false, true, true, true, true, true, true, true, true, true, false, false, true], "expected": [false, true, true, true, true, true, true, true, true, true, false, false, false], "index": 192, "commit_message": "edit rule to make sure there's not too many FPs", "commit_date_str": "2022-04-19 13:55:01 -0700", "leaf_count": 9, "line_count": 19}
{"id": "insecure-trust-manager", "rule": "rules:\n- id: insecure-trust-manager\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-inside: |\n      class $CLASS implements X509TrustManager {\n        ...\n      }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "failed_tests": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n    };\n}"], "failed_type": "fn", "testsuite_a": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "testsuite_b": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}\n", "ground_truth": "rules:\n- id: insecure-trust-manager\n  metadata:\n    cwe: 'CWE-295: Improper Certificate Validation'\n    owasp: 'A3: Sensitive Data Exposure'\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\n    references:\n    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        class $CLASS implements X509TrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509TrustManager() {\n          ...\n        }\n    - pattern-inside: |\n        class $CLASS implements X509ExtendedTrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509ExtendedTrustManager() {\n          ...\n        }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "rule_path": "extend_dataset/0d124538/before/insecure-trust-manager.yaml", "test_path": "extend_dataset/0d124538/after/insecure-trust-manager.java", "category": "historical", "splited_testsuite_b": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n    };\n}"], "actual": [true, true, true, false, false, false, false], "expected": [true, true, true, false, false, false, true], "index": 193, "commit_message": "Add additional Java X509TrustManager pattern (#865)", "commit_date_str": "2020-09-21 08:12:33 -0600", "leaf_count": 6, "line_count": 8}
{"id": "insecure-trust-manager", "rule": "rules:\n- id: insecure-trust-manager\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-inside: |\n      class $CLASS implements X509TrustManager {\n        ...\n      }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "failed_tests": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n    };\n}"], "failed_type": "fn", "testsuite_a": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "testsuite_b": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}\n", "ground_truth": "rules:\n- id: insecure-trust-manager\n  metadata:\n    cwe: 'CWE-295: Improper Certificate Validation'\n    owasp: 'A3: Sensitive Data Exposure'\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\n    references:\n    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        class $CLASS implements X509TrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509TrustManager() {\n          ...\n        }\n    - pattern-inside: |\n        class $CLASS implements X509ExtendedTrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509ExtendedTrustManager() {\n          ...\n        }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "rule_path": "extend_dataset/0d124538/before/insecure-trust-manager.yaml", "test_path": "extend_dataset/0d124538/after/insecure-trust-manager.java", "category": "historical", "splited_testsuite_b": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n    };\n}"], "actual": [true, true, true, false, false, false, false], "expected": [true, true, true, false, false, false, true], "index": 194, "commit_message": "Add additional Java X509TrustManager pattern (#865)", "commit_date_str": "2020-09-21 08:12:33 -0600", "leaf_count": 6, "line_count": 8}
{"id": "insecure-trust-manager", "rule": "rules:\n- id: insecure-trust-manager\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-inside: |\n      class $CLASS implements X509TrustManager {\n        ...\n      }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "failed_tests": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}"], "failed_type": "fn", "testsuite_a": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "testsuite_b": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}\n", "ground_truth": "rules:\n- id: insecure-trust-manager\n  metadata:\n    cwe: 'CWE-295: Improper Certificate Validation'\n    owasp: 'A3: Sensitive Data Exposure'\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\n    references:\n    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        class $CLASS implements X509TrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509TrustManager() {\n          ...\n        }\n    - pattern-inside: |\n        class $CLASS implements X509ExtendedTrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509ExtendedTrustManager() {\n          ...\n        }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "rule_path": "extend_dataset/0d124538/before/insecure-trust-manager.yaml", "test_path": "extend_dataset/0d124538/after/insecure-trust-manager.java", "category": "historical", "splited_testsuite_b": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}"], "actual": [true, true, true, false, false, false, false], "expected": [true, true, true, false, false, false, true], "index": 195, "commit_message": "Add additional Java X509TrustManager pattern (#865)", "commit_date_str": "2020-09-21 08:12:33 -0600", "leaf_count": 6, "line_count": 8}
{"id": "insecure-trust-manager", "rule": "rules:\n- id: insecure-trust-manager\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-inside: |\n      class $CLASS implements X509TrustManager {\n        ...\n      }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "failed_tests": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    }};\n}"], "failed_type": "fn", "testsuite_a": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "testsuite_b": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}\n", "ground_truth": "rules:\n- id: insecure-trust-manager\n  metadata:\n    cwe: 'CWE-295: Improper Certificate Validation'\n    owasp: 'A3: Sensitive Data Exposure'\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\n    references:\n    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        class $CLASS implements X509TrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509TrustManager() {\n          ...\n        }\n    - pattern-inside: |\n        class $CLASS implements X509ExtendedTrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509ExtendedTrustManager() {\n          ...\n        }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "rule_path": "extend_dataset/0d124538/before/insecure-trust-manager.yaml", "test_path": "extend_dataset/0d124538/after/insecure-trust-manager.java", "category": "historical", "splited_testsuite_b": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    }};\n}"], "actual": [true, true, true, false, false, false, false], "expected": [true, true, true, false, false, false, true], "index": 196, "commit_message": "Add additional Java X509TrustManager pattern (#865)", "commit_date_str": "2020-09-21 08:12:33 -0600", "leaf_count": 6, "line_count": 8}
{"id": "insecure-trust-manager", "rule": "rules:\n- id: insecure-trust-manager\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-inside: |\n      class $CLASS implements X509TrustManager {\n        ...\n      }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "failed_tests": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n    }};\n}"], "failed_type": "fn", "testsuite_a": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "testsuite_b": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}\n", "ground_truth": "rules:\n- id: insecure-trust-manager\n  metadata:\n    cwe: 'CWE-295: Improper Certificate Validation'\n    owasp: 'A3: Sensitive Data Exposure'\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\n    references:\n    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        class $CLASS implements X509TrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509TrustManager() {\n          ...\n        }\n    - pattern-inside: |\n        class $CLASS implements X509ExtendedTrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509ExtendedTrustManager() {\n          ...\n        }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "rule_path": "extend_dataset/0d124538/before/insecure-trust-manager.yaml", "test_path": "extend_dataset/0d124538/after/insecure-trust-manager.java", "category": "historical", "splited_testsuite_b": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n    }};\n}"], "actual": [true, true, true, false, false, false, false], "expected": [true, true, true, false, false, false, true], "index": 197, "commit_message": "Add additional Java X509TrustManager pattern (#865)", "commit_date_str": "2020-09-21 08:12:33 -0600", "leaf_count": 6, "line_count": 8}
{"id": "insecure-trust-manager", "rule": "rules:\n- id: insecure-trust-manager\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-inside: |\n      class $CLASS implements X509TrustManager {\n        ...\n      }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "failed_tests": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n    }};\n}"], "failed_type": "fn", "testsuite_a": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "testsuite_b": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}\n", "ground_truth": "rules:\n- id: insecure-trust-manager\n  metadata:\n    cwe: 'CWE-295: Improper Certificate Validation'\n    owasp: 'A3: Sensitive Data Exposure'\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\n    references:\n    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        class $CLASS implements X509TrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509TrustManager() {\n          ...\n        }\n    - pattern-inside: |\n        class $CLASS implements X509ExtendedTrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509ExtendedTrustManager() {\n          ...\n        }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "rule_path": "extend_dataset/0d124538/before/insecure-trust-manager.yaml", "test_path": "extend_dataset/0d124538/after/insecure-trust-manager.java", "category": "historical", "splited_testsuite_b": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n    }};\n}"], "actual": [true, true, true, false, false, false, false], "expected": [true, true, true, false, false, false, true], "index": 198, "commit_message": "Add additional Java X509TrustManager pattern (#865)", "commit_date_str": "2020-09-21 08:12:33 -0600", "leaf_count": 6, "line_count": 8}
{"id": "insecure-trust-manager", "rule": "rules:\n- id: insecure-trust-manager\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-inside: |\n      class $CLASS implements X509TrustManager {\n        ...\n      }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "failed_tests": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n    }};\n}"], "failed_type": "fn", "testsuite_a": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "testsuite_b": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}\n", "ground_truth": "rules:\n- id: insecure-trust-manager\n  metadata:\n    cwe: 'CWE-295: Improper Certificate Validation'\n    owasp: 'A3: Sensitive Data Exposure'\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\n    references:\n    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        class $CLASS implements X509TrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509TrustManager() {\n          ...\n        }\n    - pattern-inside: |\n        class $CLASS implements X509ExtendedTrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509ExtendedTrustManager() {\n          ...\n        }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "rule_path": "extend_dataset/0d124538/before/insecure-trust-manager.yaml", "test_path": "extend_dataset/0d124538/after/insecure-trust-manager.java", "category": "historical", "splited_testsuite_b": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n    }};\n}"], "actual": [true, true, true, false, false, false, false], "expected": [true, true, true, false, false, false, true], "index": 199, "commit_message": "Add additional Java X509TrustManager pattern (#865)", "commit_date_str": "2020-09-21 08:12:33 -0600", "leaf_count": 6, "line_count": 8}
{"id": "insecure-trust-manager", "rule": "rules:\n- id: insecure-trust-manager\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-inside: |\n      class $CLASS implements X509TrustManager {\n        ...\n      }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "failed_tests": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}"], "failed_type": "fn", "testsuite_a": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "testsuite_b": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}\n", "ground_truth": "rules:\n- id: insecure-trust-manager\n  metadata:\n    cwe: 'CWE-295: Improper Certificate Validation'\n    owasp: 'A3: Sensitive Data Exposure'\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\n    references:\n    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        class $CLASS implements X509TrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509TrustManager() {\n          ...\n        }\n    - pattern-inside: |\n        class $CLASS implements X509ExtendedTrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509ExtendedTrustManager() {\n          ...\n        }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "rule_path": "extend_dataset/0d124538/before/insecure-trust-manager.yaml", "test_path": "extend_dataset/0d124538/after/insecure-trust-manager.java", "category": "historical", "splited_testsuite_b": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}"], "actual": [true, true, true, false, false, false, false], "expected": [true, true, true, false, false, false, true], "index": 200, "commit_message": "Add additional Java X509TrustManager pattern (#865)", "commit_date_str": "2020-09-21 08:12:33 -0600", "leaf_count": 6, "line_count": 8}
{"id": "insecure-trust-manager", "rule": "rules:\n- id: insecure-trust-manager\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-inside: |\n      class $CLASS implements X509TrustManager {\n        ...\n      }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "failed_tests": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n    }};\n}"], "failed_type": "fn", "testsuite_a": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "testsuite_b": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}\n", "ground_truth": "rules:\n- id: insecure-trust-manager\n  metadata:\n    cwe: 'CWE-295: Improper Certificate Validation'\n    owasp: 'A3: Sensitive Data Exposure'\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\n    references:\n    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        class $CLASS implements X509TrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509TrustManager() {\n          ...\n        }\n    - pattern-inside: |\n        class $CLASS implements X509ExtendedTrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509ExtendedTrustManager() {\n          ...\n        }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "rule_path": "extend_dataset/0d124538/before/insecure-trust-manager.yaml", "test_path": "extend_dataset/0d124538/after/insecure-trust-manager.java", "category": "historical", "splited_testsuite_b": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n    }};\n}"], "actual": [true, true, true, false, false, false, false], "expected": [true, true, true, false, false, false, true], "index": 201, "commit_message": "Add additional Java X509TrustManager pattern (#865)", "commit_date_str": "2020-09-21 08:12:33 -0600", "leaf_count": 6, "line_count": 8}
{"id": "insecure-trust-manager", "rule": "rules:\n- id: insecure-trust-manager\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-inside: |\n      class $CLASS implements X509TrustManager {\n        ...\n      }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "failed_tests": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}"], "failed_type": "fn", "testsuite_a": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "testsuite_b": "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}\n\npublic final class TMClass {\n\n    private static final X509TrustManager TM = new X509TrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(final X509Certificate[] chain, final String authType)\n                throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n    };\n}\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public X509Certificate[] getAcceptedIssuers() {\n            return null;\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkClientTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, Socket socket) throws CertificateException {\n        }\n\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}\n", "ground_truth": "rules:\n- id: insecure-trust-manager\n  metadata:\n    cwe: 'CWE-295: Improper Certificate Validation'\n    owasp: 'A3: Sensitive Data Exposure'\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\n    references:\n    - https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n  message: |\n    Detected empty trust manager implementations. This is dangerous because it accepts any\n    certificate, enabling man-in-the-middle attacks. Consider using a KeyStore\n    and TrustManagerFactory isntead.\n    See https://stackoverflow.com/questions/2642777/trusting-all-certificates-using-httpclient-over-https\n    for more information.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern-inside: |\n        class $CLASS implements X509TrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509TrustManager() {\n          ...\n        }\n    - pattern-inside: |\n        class $CLASS implements X509ExtendedTrustManager {\n          ...\n        }\n    - pattern-inside: |\n        new X509ExtendedTrustManager() {\n          ...\n        }\n  - pattern-not: public void checkClientTrusted(...) { $SOMETHING; }\n  - pattern-not: public void checkServerTrusted(...) { $SOMETHING; }\n  - pattern-either:\n    - pattern: public void checkClientTrusted(...) {}\n    - pattern: public void checkServerTrusted(...) {}\n    - pattern: public X509Certificate[] getAcceptedIssuers(...) { return null; }\n", "rule_path": "extend_dataset/0d124538/before/insecure-trust-manager.yaml", "test_path": "extend_dataset/0d124538/after/insecure-trust-manager.java", "category": "historical", "splited_testsuite_b": ["package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any client connecting (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        //Trust any remote server (no certificate validation)\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\n//cf. https://find-sec-bugs.github.io/bugs.htm#WEAK_TRUST_MANAGER\npublic class TrustAllManager implements X509TrustManager {\n\n    // ruleid:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkClientTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public void checkServerTrusted(X509Certificate[] x509Certificates, String s) throws CertificateException {\n        KeyStore ks = loadKeyStore();\n        TrustManagerFactory tmf = TrustManagerFactory.getInstance(\"SunX509\");\n        tmf.init(ks);\n        tmf.getTrustManagers[0].checkClientTrusted(x509Certificates, s);\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic class GoodTrustManager implements X509TrustManager {\n\n    protected KeyStore loadKeyStore() {\n        KeyStore ks = KeyStore.getInstance(KeyStore.getDefaultType());\n        return ks;\n    }\n\n    // ok:insecure-trust-manager\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return loadKeyStore().getCertificate(\"alias\");\n    }\n}", "package Trust;\n\nimport java.security.KeyStore;\nimport java.security.cert.Certificate;\nimport java.security.cert.X509Certificate;\nimport javax.net.ssl.X509TrustManager;\nimport javax.net.ssl.X509ExtendedTrustManager;\n\npublic final class TMEClass {\n        TrustManager[] trustAllCerts = new TrustManager[]{new X509ExtendedTrustManager() {\n        // ruleid:insecure-trust-manager\n        @Override\n        public void checkServerTrusted(X509Certificate[] chain, String authType, SSLEngine engine) throws CertificateException {\n        }\n    }};\n}"], "actual": [true, true, true, false, false, false, false], "expected": [true, true, true, false, false, false, true], "index": 202, "commit_message": "Add additional Java X509TrustManager pattern (#865)", "commit_date_str": "2020-09-21 08:12:33 -0600", "leaf_count": 6, "line_count": 8}
{"id": "no-string-eqeq", "rule": "rules:\n- id: no-string-eqeq\n  languages: [java]\n  equivalences:\n  - equivalence: $X == $Y ==> $Y == $X\n  patterns:\n  - pattern: $X == (String $Y)\n  message: |\n    Strings should not be compared with '=='.\n    This is a reference comparison operator. \n    Use '.equals()' instead.\n  severity: WARNING\n", "failed_tests": ["public class Example {\n    public int foo(String a, int b) {\n        // ok:no-string-eqeq\n        if (null == \"hello\") return 12;\n        return 0;\n    }\n}"], "failed_type": "fp", "testsuite_a": "public class Example {\n    public int foo(String a, int b) {\n        // ruleid:no-string-eqeq\n        if (a == \"hello\") return 1;\n        // ok\n        if (b == 2) return -1;\n        // ruleid:no-string-eqeq\n        if (\"hello\" == a) return 2;\n    }\n}", "testsuite_b": "public class Example {\n    public int foo(String a, int b) {\n        // ruleid:no-string-eqeq\n        if (a == \"hello\") return 1;\n        // ok\n        if (b == 2) return -1;\n        // ruleid:no-string-eqeq\n        if (\"hello\" == a) return 2;\n        //ok\n        if (null == \"hello\") return 12;\n        //ok\n        if (\"hello\" == null) return 0;\n    }\n}", "ground_truth": "rules:\n- id: no-string-eqeq\n  languages: [java]\n  equivalences:\n  - equivalence: $X == $Y ==> $Y == $X\n  patterns:\n  - pattern-not: null == (String $Y)\n  - pattern: $X == (String $Y)\n  message: |\n    Strings should not be compared with '=='.\n    This is a reference comparison operator. \n    Use '.equals()' instead.\n  severity: WARNING\n", "rule_path": "extend_dataset/b3e044c0/before/no-string-eqeq.yaml", "test_path": "extend_dataset/b3e044c0/after/no-string-eqeq.java", "category": "historical", "splited_testsuite_b": ["public class Example {\n    public int foo(String a, int b) {\n        // ruleid:no-string-eqeq\n        if (a == \"hello\") return 1;\n        return 0;\n    }\n}", "public class Example {\n    public int foo(String a, int b) {\n        // ok:no-string-eqeq\n        if (b == 2) return -1;\n        return 0;\n    }\n}", "public class Example {\n    public int foo(String a, int b) {\n        // ruleid:no-string-eqeq\n        if (\"hello\" == a) return 2;\n        return 0;\n    }\n}", "public class Example {\n    public int foo(String a, int b) {\n        // ok:no-string-eqeq\n        if (\"hello\" == null) return 0;\n        return 0;\n    }\n}", "public class Example {\n    public int foo(String a, int b) {\n        // ok:no-string-eqeq\n        if (null == \"hello\") return 12;\n        return 0;\n    }\n}"], "actual": [true, false, true, false, true], "expected": [true, false, true, false, false], "index": 203, "commit_message": "New Published Rules - java.lang.correctness.no-string-eqeq (#620)", "commit_date_str": "2020-06-23 18:45:10 -0700", "leaf_count": 1, "line_count": 2}
{"id": "tainted-system-command", "rule": "rules:\n- id: tainted-system-command\n  languages:\n  - java\n  severity: ERROR\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern-inside: |\n          $METHODNAME(..., @$REQ($LOOKUP) $TYPE $SOURCE,...) {\n            ...\n          }\n      - pattern-inside: |\n          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {\n            ...\n          }\n    - metavariable-regex:\n        metavariable: $REQ\n        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue)\n    - pattern: $SOURCE\n  pattern-sinks:\n  - pattern-either:\n    - pattern: (Runtime $RUNTIME).exec(...)\n    - pattern: (Runtime $RUNTIME).loadLibrary(...)\n    - pattern: Runtime.getRuntime(...).exec(...)\n    - pattern: Runtime.getRuntime(...).loadLibrary(...)\n    - pattern: new ProcessBuilder($ONEARG)\n    - patterns:\n      - pattern: new ProcessBuilder(...)\n      - pattern-not: new ProcessBuilder(\"...\", ...)\n  message: >-\n    Detected user input entering a method which executes a system command.\n    This could result in a command injection vulnerability, which allows an\n    attacker to inject an arbitrary system command onto the server. The attacker\n    could download malware onto or steal data from the server. Instead, use\n    ProcessBuilder, separating the command into individual arguments, like this:\n    `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you\n    hardcode or allowlist the actual command so that attackers can't run arbitrary\n    commands.\n", "failed_tests": ["package org.sasanlabs.service.vulnerability.commandInjection;\n\nimport java.io.IOException;\nimport org.springframework.web.bind.annotation.RequestParam;\n\npublic class CommandInjection {\n\n    public static void test2(@RequestParam String input) throws IOException {\n        String latlonCoords = input;\n        Runtime rt = Runtime.getRuntime();\n        // ok: tainted-system-command\n        Process exec = rt.exec(new String[] {\n                \"c:\\path\\to\\latlon2utm.exe\",\n                latlonCoords }); // safe bc args are seperated\n    }\n}"], "failed_type": "fp", "testsuite_a": "package org.sasanlabs.service.vulnerability.commandInjection;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.function.Supplier;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang3.StringUtils;\nimport org.sasanlabs.internal.utility.LevelConstants;\nimport org.sasanlabs.internal.utility.Variant;\nimport org.sasanlabs.internal.utility.annotations.AttackVector;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;\nimport org.sasanlabs.service.exception.ServiceApplicationException;\nimport org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;\nimport org.sasanlabs.vulnerability.types.VulnerabilityType;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n/**\n * This class contains vulnerabilities related to Command Injection. <a\n * href=\"https://owasp.org/www-community/attacks/Command_Injection\">For More information</a>\n *\n * @author KSASAN preetkaran20@gmail.com\n */\n@VulnerableAppRestController(\n        descriptionLabel = \"COMMAND_INJECTION_VULNERABILITY\",\n        value = \"CommandInjection\")\npublic class CommandInjection {\n\n    private static final String IP_ADDRESS = \"ipaddress\";\n    private static final Pattern SEMICOLON_SPACE_LOGICAL_AND_PATTERN = Pattern.compile(\"[;& ]\");\n    private static final Pattern IP_ADDRESS_PATTERN =\n            Pattern.compile(\"\\\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\\\.|$)){4}\\\\b\");\n\n    StringBuilder getResponseFromPingCommand(String ipAddress, boolean isValid) throws IOException {\n        boolean isWindows = System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\");\n        StringBuilder stringBuilder = new StringBuilder();\n        if (isValid) {\n            Process process;\n            if (!isWindows) {\n                process =\n                        // deepruleid: tainted-system-command\n                        new ProcessBuilder(new String[] {\"sh\", \"-c\", \"ping -c 2 \" + ipAddress})\n                                .redirectErrorStream(true)\n                                .start();\n            } else {\n                process =\n                        // deepruleid: tainted-system-command\n                        new ProcessBuilder(new String[] {\"cmd\", \"/c\", \"ping -n 2 \" + ipAddress})\n                                .redirectErrorStream(true)\n                                .start();\n            }\n            try (BufferedReader bufferedReader =\n                    new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                bufferedReader.lines().forEach(val -> stringBuilder.append(val).append(\"\\n\"));\n            }\n        }\n        return stringBuilder;\n    }\n\n    @AttackVector(\n            vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION,\n            description = \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_1, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel1(\n            @RequestParam(IP_ADDRESS) String ipAddress) throws IOException {\n        Supplier<Boolean> validator = () -> StringUtils.isNotBlank(ipAddress);\n        boolean isWindows = System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\");\n        StringBuilder stringBuilder = new StringBuilder();\n        if (isValid) {\n            Process process;\n            if (!isWindows) {\n                process =\n                        // ruleid: tainted-system-command\n                        new ProcessBuilder(new String[] {\"sh\", \"-c\", \"ping -c 2 \" + ipAddress})\n                                .redirectErrorStream(true)\n                                .start();\n            } else {\n                process =\n                        // ruleid: tainted-system-command\n                        new ProcessBuilder(new String[] {\"cmd\", \"/c\", \"ping -n 2 \" + ipAddress})\n                                .redirectErrorStream(true)\n                                .start();\n            }\n            try (BufferedReader bufferedReader =\n                    new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                bufferedReader.lines().forEach(val -> stringBuilder.append(val).append(\"\\n\"));\n            }\n        }\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        stringBuilder.toString(),\n                        true),\n                HttpStatus.OK);\n    }\n\n    @AttackVector(\n            vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION,\n            description =\n                    \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_NOT_PRESENT\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_2, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel2(\n            @RequestParam(IP_ADDRESS) String ipAddress, RequestEntity<String> requestEntity)\n            throws ServiceApplicationException, IOException {\n\n        Supplier<Boolean> validator =\n                () ->\n                        StringUtils.isNotBlank(ipAddress)\n                                && !SEMICOLON_SPACE_LOGICAL_AND_PATTERN\n                                        .matcher(requestEntity.getUrl().toString())\n                                        .find();\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        // todoruleid: tainted-system-command\n                        // Indirection, needs interproc taint\n                        this.getResponseFromPingCommand(ipAddress, validator.get()).toString(),\n                        true),\n                HttpStatus.OK);\n    }\n\n    // Case Insensitive\n    @AttackVector(\n            vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION,\n            description =\n                    \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_NOT_PRESENT\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_3, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel3(\n            @RequestParam(IP_ADDRESS) String ipAddress, RequestEntity<String> requestEntity)\n            throws ServiceApplicationException, IOException {\n\n        Supplier<Boolean> validator =\n                () ->\n                        StringUtils.isNotBlank(ipAddress)\n                                && !SEMICOLON_SPACE_LOGICAL_AND_PATTERN\n                                        .matcher(requestEntity.getUrl().toString())\n                                        .find()\n                                && !requestEntity.getUrl().toString().contains(\"%26\")\n                                && !requestEntity.getUrl().toString().contains(\"%3B\");\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        this.getResponseFromPingCommand(ipAddress, validator.get()).toString(),\n                        true),\n                HttpStatus.OK);\n    }\n\n    // e.g Attack\n    // http://localhost:9090/vulnerable/CommandInjectionVulnerability/LEVEL_3?ipaddress=192.168.0.1%20%7c%20cat%20/etc/passwd\n    @AttackVector(\n            vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION,\n            description =\n                    \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_CASE_INSENSITIVE_NOT_PRESENT\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_4, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel4(\n            @RequestParam(IP_ADDRESS) String ipAddress, RequestEntity<String> requestEntity)\n            throws ServiceApplicationException, IOException {\n\n        Supplier<Boolean> validator =\n                () ->\n                        StringUtils.isNotBlank(ipAddress)\n                                && !SEMICOLON_SPACE_LOGICAL_AND_PATTERN\n                                        .matcher(requestEntity.getUrl().toString())\n                                        .find()\n                                && !requestEntity.getUrl().toString().toUpperCase().contains(\"%26\")\n                                && !requestEntity.getUrl().toString().toUpperCase().contains(\"%3B\");\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        this.getResponseFromPingCommand(ipAddress, validator.get()).toString(),\n                        true),\n                HttpStatus.OK);\n    }\n    // Payload: 127.0.0.1%0Als\n    @AttackVector(\n            vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION,\n            description =\n                    \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_%7C_CASE_INSENSITIVE_NOT_PRESENT\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_5, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel5(\n            @RequestParam(IP_ADDRESS) String ipAddress, RequestEntity<String> requestEntity)\n            throws IOException {\n        Supplier<Boolean> validator =\n                () ->\n                        StringUtils.isNotBlank(ipAddress)\n                                && !SEMICOLON_SPACE_LOGICAL_AND_PATTERN\n                                        .matcher(requestEntity.getUrl().toString())\n                                        .find()\n                                && !requestEntity.getUrl().toString().toUpperCase().contains(\"%26\")\n                                && !requestEntity.getUrl().toString().toUpperCase().contains(\"%3B\")\n                                        & !requestEntity\n                                                .getUrl()\n                                                .toString()\n                                                .toUpperCase()\n                                                .contains(\"%7C\");\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        this.getResponseFromPingCommand(ipAddress, validator.get()).toString(),\n                        true),\n                HttpStatus.OK);\n    }\n\n    @VulnerableAppRequestMapping(\n            value = LevelConstants.LEVEL_6,\n            htmlTemplate = \"LEVEL_1/CI_Level1\",\n            variant = Variant.SECURE)\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel6(\n            @RequestParam(IP_ADDRESS) String ipAddress) throws IOException {\n        Supplier<Boolean> validator =\n                () ->\n                        StringUtils.isNotBlank(ipAddress)\n                                && (IP_ADDRESS_PATTERN.matcher(ipAddress).matches()\n                                        || ipAddress.contentEquals(\"localhost\"));\n\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        this.getResponseFromPingCommand(ipAddress, validator.get()).toString(),\n                        true),\n                HttpStatus.OK);\n    }\n}\n", "testsuite_b": "package org.sasanlabs.service.vulnerability.commandInjection;\n\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.function.Supplier;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang3.StringUtils;\nimport org.sasanlabs.internal.utility.LevelConstants;\nimport org.sasanlabs.internal.utility.Variant;\nimport org.sasanlabs.internal.utility.annotations.AttackVector;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;\nimport org.sasanlabs.service.exception.ServiceApplicationException;\nimport org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;\nimport org.sasanlabs.vulnerability.types.VulnerabilityType;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n/**\n * This class contains vulnerabilities related to Command Injection. <a\n * href=\"https://owasp.org/www-community/attacks/Command_Injection\">For More information</a>\n *\n * @author KSASAN preetkaran20@gmail.com\n */\n@VulnerableAppRestController(\n        descriptionLabel = \"COMMAND_INJECTION_VULNERABILITY\",\n        value = \"CommandInjection\")\npublic class CommandInjection {\n\n    private static final String IP_ADDRESS = \"ipaddress\";\n    private static final Pattern SEMICOLON_SPACE_LOGICAL_AND_PATTERN = Pattern.compile(\"[;& ]\");\n    private static final Pattern IP_ADDRESS_PATTERN =\n            Pattern.compile(\"\\\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\\\.|$)){4}\\\\b\");\n\n    StringBuilder getResponseFromPingCommand(String ipAddress, boolean isValid) throws IOException {\n        boolean isWindows = System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\");\n        StringBuilder stringBuilder = new StringBuilder();\n        if (isValid) {\n            Process process;\n            if (!isWindows) {\n                process =\n                        // deepruleid: tainted-system-command\n                        new ProcessBuilder(new String[] {\"sh\", \"-c\", \"ping -c 2 \" + ipAddress})\n                                .redirectErrorStream(true)\n                                .start();\n            } else {\n                process =\n                        // deepruleid: tainted-system-command\n                        new ProcessBuilder(new String[] {\"cmd\", \"/c\", \"ping -n 2 \" + ipAddress})\n                                .redirectErrorStream(true)\n                                .start();\n            }\n            try (BufferedReader bufferedReader =\n                    new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                bufferedReader.lines().forEach(val -> stringBuilder.append(val).append(\"\\n\"));\n            }\n        }\n        return stringBuilder;\n    }\n\n    @AttackVector(\n            vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION,\n            description = \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_1, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel1(\n            @RequestParam(IP_ADDRESS) String ipAddress) throws IOException {\n        Supplier<Boolean> validator = () -> StringUtils.isNotBlank(ipAddress);\n        boolean isWindows = System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\");\n        StringBuilder stringBuilder = new StringBuilder();\n        if (isValid) {\n            Process process;\n            if (!isWindows) {\n                // ruleid: tainted-system-command\n                process =\n                        new ProcessBuilder(new String[] {\"sh\", \"-c\", \"ping -c 2 \" + ipAddress})\n                                .redirectErrorStream(true)\n                                .start();\n            } else {\n                // ruleid: tainted-system-command\n                process =\n                        new ProcessBuilder(new String[] {\"cmd\", \"/c\", \"ping -n 2 \" + ipAddress})\n                                .redirectErrorStream(true)\n                                .start();\n            }\n            try (BufferedReader bufferedReader =\n                    new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                bufferedReader.lines().forEach(val -> stringBuilder.append(val).append(\"\\n\"));\n            }\n        }\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        stringBuilder.toString(),\n                        true),\n                HttpStatus.OK);\n    }\n\n    @AttackVector(\n            vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION,\n            description =\n                    \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_NOT_PRESENT\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_2, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel2(\n            @RequestParam(IP_ADDRESS) String ipAddress, RequestEntity<String> requestEntity)\n            throws ServiceApplicationException, IOException {\n\n        Supplier<Boolean> validator =\n                () ->\n                        StringUtils.isNotBlank(ipAddress)\n                                && !SEMICOLON_SPACE_LOGICAL_AND_PATTERN\n                                        .matcher(requestEntity.getUrl().toString())\n                                        .find();\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        // todoruleid: tainted-system-command\n                        // Indirection, needs interproc taint\n                        this.getResponseFromPingCommand(ipAddress, validator.get()).toString(),\n                        true),\n                HttpStatus.OK);\n    }\n\n    // Case Insensitive\n    @AttackVector(\n            vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION,\n            description =\n                    \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_NOT_PRESENT\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_3, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel3(\n            @RequestParam(IP_ADDRESS) String ipAddress, RequestEntity<String> requestEntity)\n            throws ServiceApplicationException, IOException {\n\n        Supplier<Boolean> validator =\n                () ->\n                        StringUtils.isNotBlank(ipAddress)\n                                && !SEMICOLON_SPACE_LOGICAL_AND_PATTERN\n                                        .matcher(requestEntity.getUrl().toString())\n                                        .find()\n                                && !requestEntity.getUrl().toString().contains(\"%26\")\n                                && !requestEntity.getUrl().toString().contains(\"%3B\");\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        this.getResponseFromPingCommand(ipAddress, validator.get()).toString(),\n                        true),\n                HttpStatus.OK);\n    }\n\n    // e.g Attack\n    // http://localhost:9090/vulnerable/CommandInjectionVulnerability/LEVEL_3?ipaddress=192.168.0.1%20%7c%20cat%20/etc/passwd\n    @AttackVector(\n            vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION,\n            description =\n                    \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_CASE_INSENSITIVE_NOT_PRESENT\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_4, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel4(\n            @RequestParam(IP_ADDRESS) String ipAddress, RequestEntity<String> requestEntity)\n            throws ServiceApplicationException, IOException {\n\n        Supplier<Boolean> validator =\n                () ->\n                        StringUtils.isNotBlank(ipAddress)\n                                && !SEMICOLON_SPACE_LOGICAL_AND_PATTERN\n                                        .matcher(requestEntity.getUrl().toString())\n                                        .find()\n                                && !requestEntity.getUrl().toString().toUpperCase().contains(\"%26\")\n                                && !requestEntity.getUrl().toString().toUpperCase().contains(\"%3B\");\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        this.getResponseFromPingCommand(ipAddress, validator.get()).toString(),\n                        true),\n                HttpStatus.OK);\n    }\n    // Payload: 127.0.0.1%0Als\n    @AttackVector(\n            vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION,\n            description =\n                    \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_%26_%3B_%7C_CASE_INSENSITIVE_NOT_PRESENT\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_5, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel5(\n            @RequestParam(IP_ADDRESS) String ipAddress, RequestEntity<String> requestEntity)\n            throws IOException {\n        Supplier<Boolean> validator =\n                () ->\n                        StringUtils.isNotBlank(ipAddress)\n                                && !SEMICOLON_SPACE_LOGICAL_AND_PATTERN\n                                        .matcher(requestEntity.getUrl().toString())\n                                        .find()\n                                && !requestEntity.getUrl().toString().toUpperCase().contains(\"%26\")\n                                && !requestEntity.getUrl().toString().toUpperCase().contains(\"%3B\")\n                                        & !requestEntity\n                                                .getUrl()\n                                                .toString()\n                                                .toUpperCase()\n                                                .contains(\"%7C\");\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        this.getResponseFromPingCommand(ipAddress, validator.get()).toString(),\n                        true),\n                HttpStatus.OK);\n    }\n\n    @VulnerableAppRequestMapping(\n            value = LevelConstants.LEVEL_6,\n            htmlTemplate = \"LEVEL_1/CI_Level1\",\n            variant = Variant.SECURE)\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel6(\n            @RequestParam(IP_ADDRESS) String ipAddress) throws IOException {\n        Supplier<Boolean> validator =\n                () ->\n                        StringUtils.isNotBlank(ipAddress)\n                                && (IP_ADDRESS_PATTERN.matcher(ipAddress).matches()\n                                        || ipAddress.contentEquals(\"localhost\"));\n\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(\n                new GenericVulnerabilityResponseBean<String>(\n                        this.getResponseFromPingCommand(ipAddress, validator.get()).toString(),\n                        true),\n                HttpStatus.OK);\n    }\n\n    public static void test1(@RequestParam(IP_ADDRESS) String ipAddress) {\n        String args = \"ping -c 2 \" + ipAddress + \"test\";\n        Process process;\n        // ruleid: tainted-system-command\n        process = new ProcessBuilder(new String[] {\"sh\", \"-c\", args});\n        process.start();\n    }\n\n    public static void test2(@RequestParam String input) {\n        String latlonCoords = input;\n        Runtime rt = Runtime.getRuntime();\n        // ok: tainted-system-command\n        Process exec = rt.exec(new String[] {\n                \"c:\\\\path\\to\\latlon2utm.exe\",\n                latlonCoords }); // safe bc args are seperated\n    }\n\n    public static void test3(@RequestParam String input) {\n        StringBuilder stringBuilder = new StringBuilder(100);\n        stringBuilder.append(input);\n        stringBuilder.append(\"test2\");\n        Runtime rt = Runtime.getRuntime();\n        // ruleid: tainted-system-command\n        Process exec = rt.exec(stringBuilder);\n    }\n\n    public static void test4(@RequestParam String input) {\n        String test1 = \"test\";\n        String comb = test1.concat(input);\n        Runtime rt = Runtime.getRuntime();\n        // ruleid: tainted-system-command\n        Process exec = rt.exec(comb);\n    }\n\n    public static void test5(@RequestParam String input) {\n        String test1 = \"test\";\n        String comb = String.format(\"%s%s\", test1, input);\n        Runtime rt = Runtime.getRuntime();\n        // ruleid: tainted-system-command\n        Process exec = rt.exec(comb);\n    }\n}\n", "ground_truth": "rules:\n- id: tainted-system-command\n  languages:\n  - java\n  severity: ERROR\n  mode: taint\n  pattern-propagators:\n  - pattern: (StringBuilder $STRB).append($INPUT)\n    from: $INPUT\n    to: $STRB\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern-inside: |\n          $METHODNAME(..., @$REQ($LOOKUP) $TYPE $SOURCE,...) {\n            ...\n          }\n      - pattern-inside: |\n          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {\n            ...\n          }\n    - metavariable-regex:\n        metavariable: $REQ\n        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue|ModelAttribute)\n    - pattern: $SOURCE\n    label: INPUT\n  - patterns:\n    - pattern-either:\n      - pattern: $X + $SOURCE\n      - pattern: $SOURCE + $Y\n      - pattern: (StringBuilder $STRB).append($SOURCE)\n      - pattern: String.format(\"...\", ..., $SOURCE, ...)\n      - pattern: String.join(\"...\", ..., $SOURCE, ...)\n      - pattern: (String $STR).concat($SOURCE)\n      - pattern: $SOURCE.concat(...)\n      - pattern: $X += SOURCE\n      - pattern: $SOURCE += $X\n    label: CONCAT\n    requires: INPUT\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          (ProcessBuilder $PB) = new ProcessBuilder(...);\n      - pattern: |\n          (Process $P) = new Process(...);\n      - pattern: |\n          (ProcessBuilder $PB).command(...);\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              (Runtime $R).$EXEC(...);\n          - pattern: |\n               Runtime.getRuntime(...).$EXEC(...);\n        - metavariable-regex:\n            metavariable: $EXEC\n            regex: (exec|loadLibrary|load)\n      - patterns:\n        - pattern: |\n            (ProcessBuilder $PB).command(...).$ADD(...);\n        - metavariable-regex:\n            metavariable: $ADD\n            regex: (add|addAll)\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              $BUILDER = new ProcessBuilder(...);\n              ...\n              $BUILDER.start(...);\n          - pattern: |\n              new ProcessBuilder(...). ... .start(...);\n    requires: CONCAT\n  message: >-\n    Detected user input entering a method which executes a system command.\n    This could result in a command injection vulnerability, which allows an\n    attacker to inject an arbitrary system command onto the server. The attacker\n    could download malware onto or steal data from the server. Instead, use\n    ProcessBuilder, separating the command into individual arguments, like this:\n    `new ProcessBuilder(\"ls\", \"-al\", targetDirectory)`. Further, make sure you\n    hardcode or allowlist the actual command so that attackers can't run arbitrary commands.\n  metadata:\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    category: security\n    technology:\n    - java\n    - spring\n    confidence: HIGH\n    references:\n    - https://www.stackhawk.com/blog/command-injection-java/\n    - https://cheatsheetseries.owasp.org/cheatsheets/OS_Command_Injection_Defense_Cheat_Sheet.html\n    - https://github.com/github/codeql/blob/main/java/ql/src/Security/CWE/CWE-078/ExecUnescaped.java\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n    deepsemgrep: true\n", "rule_path": "extend_dataset/20d71bd1/before/tainted-system-command.yaml", "test_path": "extend_dataset/20d71bd1/after/tainted-system-command.java", "category": "historical", "splited_testsuite_b": ["package org.sasanlabs.service.vulnerability.commandInjection;\n\nimport java.io.IOException;\nimport org.springframework.web.bind.annotation.RequestParam;\n\npublic class CommandInjection {\n\n    public static void test1(@RequestParam(\"ipaddress\") String ipAddress) throws IOException {\n        String args = \"ping -c 2 \" + ipAddress + \"test\";\n        Process process;\n        // ruleid: tainted-system-command\n        process = new ProcessBuilder(new String[] {\"sh\", \"-c\", args}).start();\n    }\n}", "package org.sasanlabs.service.vulnerability.commandInjection;\n\nimport java.io.IOException;\nimport org.springframework.web.bind.annotation.RequestParam;\n\npublic class CommandInjection {\n\n    public static void test4(@RequestParam String input) throws IOException {\n        String test1 = \"test\";\n        String comb = test1.concat(input);\n        Runtime rt = Runtime.getRuntime();\n        // ruleid: tainted-system-command\n        Process exec = rt.exec(comb);\n    }\n}", "package org.sasanlabs.service.vulnerability.commandInjection;\n\nimport java.io.IOException;\nimport org.springframework.web.bind.annotation.RequestParam;\n\npublic class CommandInjection {\n\n    public static void test5(@RequestParam String input) throws IOException {\n        String test1 = \"test\";\n        String comb = String.format(\"%s%s\", test1, input);\n        Runtime rt = Runtime.getRuntime();\n        // ruleid: tainted-system-command\n        Process exec = rt.exec(comb);\n    }\n}", "package org.sasanlabs.service.vulnerability.commandInjection;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.function.Supplier;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang3.StringUtils;\nimport org.sasanlabs.internal.utility.LevelConstants;\nimport org.sasanlabs.internal.utility.Variant;\nimport org.sasanlabs.internal.utility.annotations.AttackVector;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;\nimport org.sasanlabs.service.exception.ServiceApplicationException;\nimport org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;\nimport org.sasanlabs.vulnerability.types.VulnerabilityType;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestParam;\n@VulnerableAppRestController(descriptionLabel = \"COMMAND_INJECTION_VULNERABILITY\", value = \"CommandInjection\")\npublic class CommandInjection {\n    private static final String IP_ADDRESS = \"ipaddress\";\n    private static final Pattern SEMICOLON_SPACE_LOGICAL_AND_PATTERN = Pattern.compile(\"[;& ]\");\n    private static final Pattern IP_ADDRESS_PATTERN = Pattern.compile(\"\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b\");\n    @AttackVector(vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION, description = \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_1, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel1(@RequestParam(IP_ADDRESS) String ipAddress) throws IOException {\n        Supplier<Boolean> validator = () -> StringUtils.isNotBlank(ipAddress);\n        boolean isWindows = System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\");\n        StringBuilder stringBuilder = new StringBuilder();\n        if (validator.get()) {\n            Process process;\n            if (!isWindows) {\n                // ruleid: tainted-system-command\n                process = new ProcessBuilder(new String[] {\"sh\", \"-c\", \"ping -c 2 \" + ipAddress}).redirectErrorStream(true).start();\n            }\n            try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                bufferedReader.lines().forEach(val -> stringBuilder.append(val).append(\"\n\"));\n            }\n        }\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(new GenericVulnerabilityResponseBean<String>(stringBuilder.toString(), true), HttpStatus.OK);\n    }\n}", "package org.sasanlabs.service.vulnerability.commandInjection;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.function.Supplier;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang3.StringUtils;\nimport org.sasanlabs.internal.utility.LevelConstants;\nimport org.sasanlabs.internal.utility.Variant;\nimport org.sasanlabs.internal.utility.annotations.AttackVector;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;\nimport org.sasanlabs.service.exception.ServiceApplicationException;\nimport org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;\nimport org.sasanlabs.vulnerability.types.VulnerabilityType;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestParam;\n@VulnerableAppRestController(descriptionLabel = \"COMMAND_INJECTION_VULNERABILITY\", value = \"CommandInjection\")\npublic class CommandInjection {\n    private static final String IP_ADDRESS = \"ipaddress\";\n    private static final Pattern SEMICOLON_SPACE_LOGICAL_AND_PATTERN = Pattern.compile(\"[;& ]\");\n    private static final Pattern IP_ADDRESS_PATTERN = Pattern.compile(\"\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b\");\n    @AttackVector(vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION, description = \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_1, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel1(@RequestParam(IP_ADDRESS) String ipAddress) throws IOException {\n        Supplier<Boolean> validator = () -> StringUtils.isNotBlank(ipAddress);\n        boolean isWindows = System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\");\n        StringBuilder stringBuilder = new StringBuilder();\n        if (validator.get()) {\n            Process process;\n            if (!isWindows) {\n                // ruleid: tainted-system-command\n                process = new ProcessBuilder(new String[] {\"cmd\", \"-c\", \"ping -c 2 \" + ipAddress}).redirectErrorStream(true).start();\n            }\n            try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                bufferedReader.lines().forEach(val -> stringBuilder.append(val).append(\"\n\"));\n            }\n        }\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(new GenericVulnerabilityResponseBean<String>(stringBuilder.toString(), true), HttpStatus.OK);\n    }\n}", "package org.sasanlabs.service.vulnerability.commandInjection;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.function.Supplier;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang3.StringUtils;\nimport org.sasanlabs.internal.utility.LevelConstants;\nimport org.sasanlabs.internal.utility.Variant;\nimport org.sasanlabs.internal.utility.annotations.AttackVector;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;\nimport org.sasanlabs.service.exception.ServiceApplicationException;\nimport org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;\nimport org.sasanlabs.vulnerability.types.VulnerabilityType;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestParam;\n@VulnerableAppRestController(descriptionLabel = \"COMMAND_INJECTION_VULNERABILITY\", value = \"CommandInjection\")\npublic class CommandInjection {\n    private static final String IP_ADDRESS = \"ipaddress\";\n    private static final Pattern SEMICOLON_SPACE_LOGICAL_AND_PATTERN = Pattern.compile(\"[;& ]\");\n    private static final Pattern IP_ADDRESS_PATTERN = Pattern.compile(\"\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b\");\n    StringBuilder getResponseFromPingCommand(String ipAddress, boolean isValid) throws IOException {\n        boolean isWindows = System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\");\n        StringBuilder stringBuilder = new StringBuilder();\n        if (isValid) {\n            Process process;\n            if (!isWindows) {\n                // deepruleid: tainted-system-command\n                process = new ProcessBuilder(new String[] {\"sh\", \"-c\", \"ping -c 2 \" + ipAddress}).redirectErrorStream(true).start();\n            }\n            try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                bufferedReader.lines().forEach(val -> stringBuilder.append(val).append(\"\n\"));\n            }\n        }\n        return stringBuilder;\n    }\n    @AttackVector(vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION, description = \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_NOT_PRESENT\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_2, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel2(@RequestParam(IP_ADDRESS) String ipAddress, RequestEntity<String> requestEntity) throws ServiceApplicationException, IOException {\n        Supplier<Boolean> validator = () -> StringUtils.isNotBlank(ipAddress) && !SEMICOLON_SPACE_LOGICAL_AND_PATTERN.matcher(requestEntity.getUrl().toString()).find();\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(new GenericVulnerabilityResponseBean<String>(this.getResponseFromPingCommand(ipAddress, validator.get()).toString(), true), HttpStatus.OK);\n    }\n}", "package org.sasanlabs.service.vulnerability.commandInjection;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.function.Supplier;\nimport java.util.regex.Pattern;\nimport org.apache.commons.lang3.StringUtils;\nimport org.sasanlabs.internal.utility.LevelConstants;\nimport org.sasanlabs.internal.utility.Variant;\nimport org.sasanlabs.internal.utility.annotations.AttackVector;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRequestMapping;\nimport org.sasanlabs.internal.utility.annotations.VulnerableAppRestController;\nimport org.sasanlabs.service.exception.ServiceApplicationException;\nimport org.sasanlabs.service.vulnerability.bean.GenericVulnerabilityResponseBean;\nimport org.sasanlabs.vulnerability.types.VulnerabilityType;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.RequestEntity;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.RequestParam;\n@VulnerableAppRestController(descriptionLabel = \"COMMAND_INJECTION_VULNERABILITY\", value = \"CommandInjection\")\npublic class CommandInjection {\n    private static final String IP_ADDRESS = \"ipaddress\";\n    private static final Pattern SEMICOLON_SPACE_LOGICAL_AND_PATTERN = Pattern.compile(\"[;& ]\");\n    private static final Pattern IP_ADDRESS_PATTERN = Pattern.compile(\"\\b((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(\\.|$)){4}\\b\");\n    StringBuilder getResponseFromPingCommand(String ipAddress, boolean isValid) throws IOException {\n        boolean isWindows = System.getProperty(\"os.name\").toLowerCase().startsWith(\"windows\");\n        StringBuilder stringBuilder = new StringBuilder();\n        if (isValid) {\n            Process process;\n            if (!isWindows) {\n                // deepruleid: tainted-system-command\n                process = new ProcessBuilder(new String[] {\"cmd\", \"-c\", \"ping -c 2 \" + ipAddress}).redirectErrorStream(true).start();\n            }\n            try (BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {\n                bufferedReader.lines().forEach(val -> stringBuilder.append(val).append(\"\n\"));\n            }\n        }\n        return stringBuilder;\n    }\n    @AttackVector(vulnerabilityExposed = VulnerabilityType.COMMAND_INJECTION, description = \"COMMAND_INJECTION_URL_PARAM_DIRECTLY_EXECUTED_IF_SEMICOLON_SPACE_LOGICAL_AND_NOT_PRESENT\")\n    @VulnerableAppRequestMapping(value = LevelConstants.LEVEL_2, htmlTemplate = \"LEVEL_1/CI_Level1\")\n    public ResponseEntity<GenericVulnerabilityResponseBean<String>> getVulnerablePayloadLevel2(@RequestParam(IP_ADDRESS) String ipAddress, RequestEntity<String> requestEntity) throws ServiceApplicationException, IOException {\n        Supplier<Boolean> validator = () -> StringUtils.isNotBlank(ipAddress) && !SEMICOLON_SPACE_LOGICAL_AND_PATTERN.matcher(requestEntity.getUrl().toString()).find();\n        return new ResponseEntity<GenericVulnerabilityResponseBean<String>>(new GenericVulnerabilityResponseBean<String>(this.getResponseFromPingCommand(ipAddress, validator.get()).toString(), true), HttpStatus.OK);\n    }\n}", "package org.sasanlabs.service.vulnerability.commandInjection;\n\nimport java.io.IOException;\nimport org.springframework.web.bind.annotation.RequestParam;\n\npublic class CommandInjection {\n\n    public static void test2(@RequestParam String input) throws IOException {\n        String latlonCoords = input;\n        Runtime rt = Runtime.getRuntime();\n        // ok: tainted-system-command\n        Process exec = rt.exec(new String[] {\n                \"c:\\path\\to\\latlon2utm.exe\",\n                latlonCoords }); // safe bc args are seperated\n    }\n}"], "actual": [true, true, true, true, true, true, true, true], "expected": [true, true, true, true, true, true, true, false], "index": 204, "commit_message": "adding spring command injection rule improvements", "commit_date_str": "2022-12-20 16:15:10 -0600", "leaf_count": 12, "line_count": 20}
{"id": "xmlinputfactory", "rule": "rules:\n- id: owasp.java.xxe.javax.xml.stream.XMLInputFactory\n  severity: WARNING\n  message: XMLInputFactory being instantiated without calling the setProperty functions\n    that are generally used for disabling entity processing\n  patterns:\n  - pattern-not-inside: |\n      $RETURNTYPE $METHOD(...) {\n        ...\n        $XMLFACTORY.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n        ...\n      }\n  - pattern-not-inside: |\n      $XMLFACTORY = $W.newInstance(...);\n      ...\n      $XMLFACTORY.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n  - pattern-either:\n    - pattern: $XMLFACTORY = $W.newFactory(...);\n    - pattern: $XMLFACTORY = new XMLInputFactory(...);\n    - pattern: $XMLFACTORY = SAXParserFactory.newInstance(...);\n    - pattern: $XMLFACTORY = DocumentBuilderFactory.newInstance(...);\n  languages:\n  - java\n", "failed_tests": ["package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/vuln\")\n    public String XMLInputFactoryVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}"], "failed_type": "fn", "testsuite_a": "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/xmlReader/vuln\")\n    public String xmlReaderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n            xmlReader.parse(new InputSource(new StringReader(body)));  // parse xml\n            return \"xmlReader xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/xmlReader/sec\", method = RequestMethod.POST)\n    public String xmlReaderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            XMLReader xmlReader = XMLReaderFactory.createXMLReader();\n            xmlReader.parse(new InputSource(new StringReader(body)));  // parse xml\n\n            // fix code start\n            xmlReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            //fix code end\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"xmlReader xxe security code\";\n    }\n\n\n    @RequestMapping(value = \"/SAXBuilder/vuln\", method = RequestMethod.POST)\n    public String SAXBuilderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            SAXBuilder builder = new SAXBuilder();\n            // org.jdom2.Document document\n            builder.build(new InputSource(new StringReader(body)));  // cause xxe\n            return \"SAXBuilder xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/SAXBuilder/sec\", method = RequestMethod.POST)\n    public String SAXBuilderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            SAXBuilder builder = new SAXBuilder();\n            builder.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            builder.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            builder.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            // org.jdom2.Document document\n            builder.build(new InputSource(new StringReader(body)));\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"SAXBuilder xxe security code\";\n    }\n\n    @RequestMapping(value = \"/SAXReader/vuln\", method = RequestMethod.POST)\n    public String SAXReaderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            SAXReader reader = new SAXReader();\n            // org.dom4j.Document document\n            reader.read(new InputSource(new StringReader(body))); // cause xxe\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"SAXReader xxe vuln code\";\n    }\n\n    @RequestMapping(value = \"/SAXReader/sec\", method = RequestMethod.POST)\n    public String SAXReaderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            SAXReader reader = new SAXReader();\n            reader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            reader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            reader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            // org.dom4j.Document document\n            reader.read(new InputSource(new StringReader(body)));\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"SAXReader xxe security code\";\n    }\n\n    @RequestMapping(value = \"/SAXParser/vuln\", method = RequestMethod.POST)\n    public String SAXParserVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            SAXParser parser = spf.newSAXParser();\n            parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml\n\n            return \"SAXParser xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/SAXParser/sec\", method = RequestMethod.POST)\n    public String SAXParserSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            spf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            spf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            spf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            SAXParser parser = spf.newSAXParser();\n            parser.parse(new InputSource(new StringReader(body)), new DefaultHandler());  // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"SAXParser xxe security code\";\n    }\n\n\n    @RequestMapping(value = \"/Digester/vuln\", method = RequestMethod.POST)\n    public String DigesterVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            Digester digester = new Digester();\n            digester.parse(new StringReader(body));  // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"Digester xxe vuln code\";\n    }\n\n    @RequestMapping(value = \"/Digester/sec\", method = RequestMethod.POST)\n    public String DigesterSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            Digester digester = new Digester();\n            digester.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            digester.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            digester.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            digester.parse(new StringReader(body));  // parse xml\n\n            return \"Digester xxe security code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    // \u6709\u56de\u663e\n    @RequestMapping(value = \"/DocumentBuilder/vuln01\", method = RequestMethod.POST)\n    public String DocumentBuilderVuln01(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            // \u904d\u5386xml\u8282\u70b9name\u548cvalue\n            StringBuilder buf = new StringBuilder();\n            NodeList rootNodeList = document.getChildNodes();\n            for (int i = 0; i < rootNodeList.getLength(); i++) {\n                Node rootNode = rootNodeList.item(i);\n                NodeList child = rootNode.getChildNodes();\n                for (int j = 0; j < child.getLength(); j++) {\n                    Node node = child.item(j);\n                    buf.append(String.format(\"%s: %s\\n\", node.getNodeName(), node.getTextContent()));\n                }\n            }\n            sr.close();\n            return buf.toString();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    // \u6709\u56de\u663e\n    @RequestMapping(value = \"/DocumentBuilder/vuln02\", method = RequestMethod.POST)\n    public String DocumentBuilderVuln02(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            // \u904d\u5386xml\u8282\u70b9name\u548cvalue\n            StringBuilder result = new StringBuilder();\n            NodeList rootNodeList = document.getChildNodes();\n            for (int i = 0; i < rootNodeList.getLength(); i++) {\n                Node rootNode = rootNodeList.item(i);\n                NodeList child = rootNode.getChildNodes();\n                for (int j = 0; j < child.getLength(); j++) {\n                    Node node = child.item(j);\n                    // \u6b63\u5e38\u89e3\u6790XML\uff0c\u9700\u8981\u5224\u65ad\u662f\u5426\u662fELEMENT_NODE\u7c7b\u578b\u3002\u5426\u5219\u4f1a\u51fa\u73b0\u591a\u4f59\u7684\u7684\u8282\u70b9\u3002\n                    if (child.item(j).getNodeType() == Node.ELEMENT_NODE) {\n                        result.append(String.format(\"%s: %s\\n\", node.getNodeName(), node.getFirstChild()));\n                    }\n                }\n            }\n            sr.close();\n            return result.toString();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/DocumentBuilder/Sec\", method = RequestMethod.POST)\n    public String DocumentBuilderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            db.parse(is);  // parse xml\n            sr.close();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"DocumentBuilder xxe security code\";\n    }\n\n\n    @RequestMapping(value = \"/DocumentBuilder/xinclude/vuln\", method = RequestMethod.POST)\n    public String DocumentBuilderXincludeVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            dbf.setXIncludeAware(true);   // \u652f\u6301XInclude\n            dbf.setNamespaceAware(true);  // \u652f\u6301XInclude\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            NodeList rootNodeList = document.getChildNodes();\n            response(rootNodeList);\n\n            sr.close();\n            return \"DocumentBuilder xinclude xxe vuln code\";\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n    }\n\n\n    @RequestMapping(value = \"/DocumentBuilder/xinclude/sec\", method = RequestMethod.POST)\n    public String DocumentBuilderXincludeSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\n            dbf.setXIncludeAware(true);   // \u652f\u6301XInclude\n            dbf.setNamespaceAware(true);  // \u652f\u6301XInclude\n            dbf.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            dbf.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            dbf.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            StringReader sr = new StringReader(body);\n            InputSource is = new InputSource(sr);\n            Document document = db.parse(is);  // parse xml\n\n            NodeList rootNodeList = document.getChildNodes();\n            response(rootNodeList);\n\n            sr.close();\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"DocumentBuilder xinclude xxe vuln code\";\n    }\n\n\n    @PostMapping(\"/XMLReader/vuln\")\n    public String XMLReaderVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            SAXParser saxParser = spf.newSAXParser();\n            XMLReader xmlReader = saxParser.getXMLReader();\n            xmlReader.parse(new InputSource(new StringReader(body)));\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLReader xxe vuln code\";\n    }\n\n\n    @PostMapping(\"/XMLReader/sec\")\n    public String XMLReaderSec(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            SAXParserFactory spf = SAXParserFactory.newInstance();\n            SAXParser saxParser = spf.newSAXParser();\n            XMLReader xmlReader = saxParser.getXMLReader();\n            xmlReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n            xmlReader.setFeature(\"http://xml.org/sax/features/external-parameter-entities\", false);\n            xmlReader.parse(new InputSource(new StringReader(body)));\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n        return \"XMLReader xxe security code\";\n    }\n\n    public static SortingMachine<Map.Pair<String, Integer>> shorten(\n            SortingMachine<Map.Pair<String, Integer>> sortMachine, int num) {\n        assert sortMachine != null : \"Violation of: sortMachine is not null\";\n        assert num <= sortMachine\n                .size() : \"Violation of: N <= size of sortMachine\";\n        // ok: owasp.java.xxe.javax.xml.stream.XMLInputFactory\n        SortingMachine<Map.Pair<String, Integer>> shortenedSM = sortMachine\n                .newInstance();\n        int i = 0;\n\n        //creates a new sortingMachine that only contains the N elements desired\n        //by the user\n        for (Map.Pair<String, Integer> pair : sortMachine) {\n            if (i < num) {\n                shortenedSM.add(pair);\n            }\n            i++;\n        }\n        return shortenedSM;\n    }\n\n    /**\n     * \u4fee\u590d\u8be5\u6f0f\u6d1e\u53ea\u9700\u5347\u7ea7dom4j\u52302.1.1\u53ca\u4ee5\u4e0a\uff0c\u8be5\u7248\u672c\u53ca\u4ee5\u4e0a\u7981\u7528\u4e86ENTITY\uff1b\n     * \u4e0d\u5e26ENTITY\u7684PoC\u4e0d\u80fd\u5229\u7528\uff0c\u6240\u4ee5\u7981\u7528ENTITY\u5373\u53ef\u5b8c\u6210\u4fee\u590d\u3002\n     */\n    @PostMapping(\"/DocumentHelper/vuln\")\n    public String DocumentHelper(HttpServletRequest req) {\n        try {\n            String body = WebUtils.getRequestBody(req);\n            DocumentHelper.parseText(body); // parse xml\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"DocumentHelper xxe vuln code\";\n    }\n\n\n    private static void response(NodeList rootNodeList){\n        for (int i = 0; i < rootNodeList.getLength(); i++) {\n            Node rootNode = rootNodeList.item(i);\n            NodeList xxe = rootNode.getChildNodes();\n            for (int j = 0; j < xxe.getLength(); j++) {\n                Node xxeNode = xxe.item(j);\n                // \u6d4b\u8bd5\u4e0d\u80fdblind xxe\uff0c\u6240\u4ee5\u5f3a\u884c\u52a0\u4e86\u4e00\u4e2a\u56de\u663e\n                logger.info(\"xxeNode: \" + xxeNode.getNodeValue());\n            }\n\n        }\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}\n", "testsuite_b": "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/vuln\")\n    public String XMLInputFactoryVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    @PostMapping(\"/XMLInputFactory/fix1\")\n    public String XMLInputFactoryFix1(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(\"javax.xml.stream.supportDTD\", false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    @PostMapping(\"/XMLInputFactory/fix2\")\n    public String XMLInputFactoryFix2(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    @PostMapping(\"/XMLInputFactory/fix3\")\n    public String XMLInputFactoryFix3(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static SortingMachine<Map.Pair<String, Integer>> shorten(\n            SortingMachine<Map.Pair<String, Integer>> sortMachine, int num) {\n        assert sortMachine != null : \"Violation of: sortMachine is not null\";\n        assert num <= sortMachine\n                .size() : \"Violation of: N <= size of sortMachine\";\n        // ok: owasp.java.xxe.javax.xml.stream.XMLInputFactory\n        SortingMachine<Map.Pair<String, Integer>> shortenedSM = sortMachine\n                .newInstance();\n        int i = 0;\n\n        //creates a new sortingMachine that only contains the N elements desired\n        //by the user\n        for (Map.Pair<String, Integer> pair : sortMachine) {\n            if (i < num) {\n                shortenedSM.add(pair);\n            }\n            i++;\n        }\n        return shortenedSM;\n    }\n\n\n    public static void main(String[] args)  {\n    }\n\n}\n", "ground_truth": "rules:\n  - id: owasp.java.xxe.javax.xml.stream.XMLInputFactory\n    severity: WARNING\n    metadata:\n      cwe: \"CWE-611: Improper Restriction of XML External Entity Reference\"\n      owasp:\n        - A04:2021 - XML External Entities (XXE)\n      references:\n        - https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html\n      category: security\n      license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n      technology: [java]\n    message:\n      XMLInputFactory being instantiated without calling the setProperty functions\n      that are generally used for disabling entity processing\n    patterns:\n      - pattern-not-inside: |\n          $RETURNTYPE $METHOD(...) {\n            ...\n            $XMLFACTORY.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n            ...\n          }\n      - pattern-not-inside: |\n          $RETURNTYPE $METHOD(...) {\n            ...\n            $XMLFACTORY.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n            ...\n          }\n      - pattern-not-inside: |\n          $RETURNTYPE $METHOD(...) {\n            ...\n            $XMLFACTORY.setProperty(\"javax.xml.stream.supportDTD\", false);\n            ...\n          }\n      - pattern-not-inside: |\n          $XMLFACTORY = $W.newInstance(...);\n          ...\n          $XMLFACTORY.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n      - pattern-either:\n          - pattern: $XMLFACTORY = XMLInputFactory.newFactory(...);\n          - pattern: $XMLFACTORY = new XMLInputFactory(...);\n          - pattern: $XMLFACTORY = XMLInputFactory.newInstance(...);\n    languages:\n      - java\n", "rule_path": "extend_dataset/5b4e5660/before/xmlinputfactory.yaml", "test_path": "extend_dataset/5b4e5660/after/xmlinputfactory.java", "category": "historical", "splited_testsuite_b": ["package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/fix1\")\n    public String XMLInputFactoryFix1(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(\"javax.xml.stream.supportDTD\", false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}", "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/fix2\")\n    public String XMLInputFactoryFix2(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}", "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/fix3\")\n    public String XMLInputFactoryFix3(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ok:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            xmlInputFactory.setProperty(\"javax.xml.stream.isSupportingExternalEntities\", false);\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}", "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    public static SortingMachine<Map.Pair<String, Integer>> shorten(\n            SortingMachine<Map.Pair<String, Integer>> sortMachine, int num) {\n        assert sortMachine != null : \"Violation of: sortMachine is not null\";\n        assert num <= sortMachine\n                .size() : \"Violation of: N <= size of sortMachine\";\n        // ok: owasp.java.xxe.javax.xml.stream.XMLInputFactory\n        SortingMachine<Map.Pair<String, Integer>> shortenedSM = sortMachine\n                .newInstance();\n        int i = 0;\n\n        //creates a new sortingMachine that only contains the N elements desired\n        //by the user\n        for (Map.Pair<String, Integer> pair : sortMachine) {\n            if (i < num) {\n                shortenedSM.add(pair);\n            }\n            i++;\n        }\n        return shortenedSM;\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}", "package org.joychou.controller;\n\nimport org.dom4j.DocumentHelper;\nimport org.dom4j.io.SAXReader;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.web.bind.annotation.*;\n\nimport javax.servlet.http.HttpServletRequest;\n\nimport org.w3c.dom.Document;\nimport org.w3c.dom.Node;\nimport org.w3c.dom.NodeList;\nimport org.xml.sax.helpers.XMLReaderFactory;\nimport org.xml.sax.XMLReader;\n\nimport java.io.*;\n\nimport org.xml.sax.InputSource;\n\nimport javax.xml.parsers.DocumentBuilder;\nimport javax.xml.parsers.DocumentBuilderFactory;\nimport javax.xml.parsers.SAXParserFactory;\nimport javax.xml.parsers.SAXParser;\n\nimport org.xml.sax.helpers.DefaultHandler;\nimport org.apache.commons.digester3.Digester;\nimport org.jdom2.input.SAXBuilder;\nimport org.joychou.util.WebUtils;\n\n/**\n * Java xxe vuln and security code.\n *\n * @author JoyChou @2017-12-22\n */\n\n@RestController\n@RequestMapping(\"/xxe\")\npublic class XXE {\n\n    private static Logger logger = LoggerFactory.getLogger(XXE.class);\n    private static String EXCEPT = \"xxe except\";\n\n    @PostMapping(\"/XMLInputFactory/vuln\")\n    public String XMLInputFactoryVuln(HttpServletRequest request) {\n        try {\n            String body = WebUtils.getRequestBody(request);\n            logger.info(body);\n            // ruleid:owasp.java.xxe.javax.xml.stream.XMLInputFactory\n            XMLInputFactory xmlInputFactory = XMLInputFactory.newInstance();\n            XMLStreamReader reader = xmlInputFactory.createXMLStreamReader(new StringReader(body));\n            reader.nextTag();\n\n        } catch (Exception e) {\n            logger.error(e.toString());\n            return EXCEPT;\n        }\n\n        return \"XMLInputFactory xxe vuln code\";\n    }\n\n    public static void main(String[] args)  {\n    }\n\n}"], "actual": [false, false, false, false, false], "expected": [false, false, false, false, true], "index": 205, "commit_message": "Fixing owasp xmlinputfactory rule (#2052)", "commit_date_str": "2022-05-02 17:37:40 -0600", "leaf_count": 6, "line_count": 15}
{"id": "el-injection", "rule": "rules:\n- id: el-injection\n  message: |\n    An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern: |\n        class $CLASS {\n          ...\n          ExpressionFactory $EF;\n          ...\n          $X $METHOD(...) {\n            ...\n            $EF.createValueExpression($CTX,$INPUT,...);\n            ...\n          }\n          ...\n        }\n    - pattern: |\n        class $CLASS {\n          ...\n          ExpressionFactory $EF = ...;\n          ...\n          $X $METHOD(...) {\n            ...\n            $EF.createValueExpression($CTX,$INPUT,...);\n            ...\n          }\n          ...\n        }\n    - pattern: |\n        $X $METHOD(...) {\n          ...\n          ExpressionFactory $EF = ...;\n          ...\n          $EF.createValueExpression($CTX,$INPUT,...);\n          ...\n        }\n    - pattern: |\n        $X $METHOD(...,ExpressionFactory $EF,...) {\n          ...\n          $EF.createValueExpression($CTX,$INPUT,...);\n          ...\n        }\n    - pattern: |\n        class $CLASS {\n          ...\n          ExpressionFactory $EF;\n          ...\n          $X $METHOD(...) {\n            ...\n            $EF.createMethodExpression($CTX,$INPUT,...);\n            ...\n          }\n          ...\n        }\n    - pattern: |\n        class $CLASS {\n          ...\n          ExpressionFactory $EF = ...;\n          ...\n          $X $METHOD(...) {\n            ...\n            $EF.createMethodExpression($CTX,$INPUT,...);\n            ...\n          }\n          ...\n        }\n    - pattern: |\n        $X $METHOD(...) {\n          ...\n          ExpressionFactory $EF = ...;\n          ...\n          $EF.createMethodExpression($CTX,$INPUT,...);\n          ...\n        }\n    - pattern: |\n        $X $METHOD(...,ExpressionFactory $EF,...) {\n          ...\n          $EF.createMethodExpression($CTX,$INPUT,...);\n          ...\n        }\n  - pattern-not: |\n      $X $METHOD(...) {\n        ...\n        $EF.createValueExpression($CTX,\"...\",...);\n        ...\n      }\n  - pattern-not: |\n      $X $METHOD(...) {\n        ...\n        String $S = \"...\";\n        ...\n        $EF.createValueExpression($CTX,$S,...);\n        ...\n      }\n  - pattern-not: |\n      $X $METHOD(...) {\n        ...\n        $EF.createMethodExpression($CTX,\"...\",...);\n        ...\n      }\n  - pattern-not: |\n      $X $METHOD(...) {\n        ...\n        String $S = \"...\";\n        ...\n        $EF.createMethodExpression($CTX,$S,...);\n        ...\n      }\n", "failed_tests": ["package testcode.script;\n\nimport javax.validation.ConstraintValidatorContext;\n\npublic class ElExpressionSample {\n\n    //ruleid: el-injection\n    private void unsafeELTemplate(String message, ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n         context\n             .someMethod()\n             .buildConstraintViolationWithTemplate(message)\n             .addConstraintViolation();\n    }\n}"], "failed_type": "fn", "testsuite_a": "package testcode.script;\n\nimport javax.el.ELContext;\nimport javax.el.ExpressionFactory;\nimport javax.el.ValueExpression;\nimport javax.faces.context.FacesContext;\n\npublic class ElExpressionSample {\n\n    // ruleid: el-injection\n    public void unsafeEL(String expression) {\n        FacesContext context = FacesContext.getCurrentInstance();\n        ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();\n        ELContext elContext = context.getELContext();\n        ValueExpression vex = expressionFactory.createValueExpression(elContext, expression, String.class);\n        String result = (String) vex.getValue(elContext);\n        System.out.println(result);\n    }\n\n    // ok: el-injection\n    public void safeEL() {\n        FacesContext context = FacesContext.getCurrentInstance();\n        ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();\n        ELContext elContext = context.getELContext();\n        ValueExpression vex = expressionFactory.createValueExpression(elContext, \"1+1\", String.class);\n        String result = (String) vex.getValue(elContext);\n        System.out.println(result);\n    }\n\n    // ruleid: el-injection\n    public void unsafeELMethod(ELContext elContext,ExpressionFactory expressionFactory, String expression) {\n        expressionFactory.createMethodExpression(elContext, expression, String.class, new Class[]{Integer.class});\n    }\n\n    //ok: el-injection\n    public void safeELMethod(ELContext elContext,ExpressionFactory expressionFactory) {\n        expressionFactory.createMethodExpression(elContext, \"1+1\", String.class,new Class[] {Integer.class});\n    }\n}\n", "testsuite_b": "package testcode.script;\n\nimport javax.el.ELContext;\nimport javax.el.ExpressionFactory;\nimport javax.el.ValueExpression;\nimport javax.faces.context.FacesContext;\n\npublic class ElExpressionSample {\n\n    // ruleid: el-injection\n    public void unsafeEL(String expression) {\n        FacesContext context = FacesContext.getCurrentInstance();\n        ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();\n        ELContext elContext = context.getELContext();\n        ValueExpression vex = expressionFactory.createValueExpression(elContext, expression, String.class);\n        String result = (String) vex.getValue(elContext);\n        System.out.println(result);\n    }\n\n    // ok: el-injection\n    public void safeEL() {\n        FacesContext context = FacesContext.getCurrentInstance();\n        ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();\n        ELContext elContext = context.getELContext();\n        ValueExpression vex = expressionFactory.createValueExpression(elContext, \"1+1\", String.class);\n        String result = (String) vex.getValue(elContext);\n        System.out.println(result);\n    }\n\n    // ruleid: el-injection\n    public void unsafeELMethod(ELContext elContext,ExpressionFactory expressionFactory, String expression) {\n        expressionFactory.createMethodExpression(elContext, expression, String.class, new Class[]{Integer.class});\n    }\n\n    //ok: el-injection\n    public void safeELMethod(ELContext elContext,ExpressionFactory expressionFactory) {\n        expressionFactory.createMethodExpression(elContext, \"1+1\", String.class,new Class[] {Integer.class});\n    }\n\n    //ruleid: el-injection\n    private void unsafeELTemplate(String message, ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n         context\n             .someMethod()\n             .buildConstraintViolationWithTemplate(message)\n             .addConstraintViolation();\n    }\n\n    //ok: el-injection\n    private void safeELTemplate(String message, ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n         context\n             .someMethod()\n             .buildConstraintViolationWithTemplate(\"somestring\")\n             .addConstraintViolation();\n    }\n}\n", "ground_truth": "rules:\n- id: el-injection\n  metadata:\n    cwe: \"CWE-94: Improper Control of Generation of Code ('Code Injection')\"\n    owasp: 'A1: Injection'\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#EL_INJECTION\n    category: security\n  message: |\n    An expression is built with a dynamic value. The source of the value(s) should be verified to avoid that unfiltered values fall into this risky code evaluation.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-either:\n    - pattern: |\n        class $CLASS {\n          ...\n          ExpressionFactory $EF;\n          ...\n          $X $METHOD(...) {\n            ...\n            $EF.createValueExpression($CTX,$INPUT,...);\n            ...\n          }\n          ...\n        }\n    - pattern: |\n        class $CLASS {\n          ...\n          ExpressionFactory $EF = ...;\n          ...\n          $X $METHOD(...) {\n            ...\n            $EF.createValueExpression($CTX,$INPUT,...);\n            ...\n          }\n          ...\n        }\n    - pattern: |\n        $X $METHOD(...) {\n          ...\n          ExpressionFactory $EF = ...;\n          ...\n          $EF.createValueExpression($CTX,$INPUT,...);\n          ...\n        }\n    - pattern: |\n        $X $METHOD(...,ExpressionFactory $EF,...) {\n          ...\n          $EF.createValueExpression($CTX,$INPUT,...);\n          ...\n        }\n    - pattern: |\n        class $CLASS {\n          ...\n          ExpressionFactory $EF;\n          ...\n          $X $METHOD(...) {\n            ...\n            $EF.createMethodExpression($CTX,$INPUT,...);\n            ...\n          }\n          ...\n        }\n    - pattern: |\n        class $CLASS {\n          ...\n          ExpressionFactory $EF = ...;\n          ...\n          $X $METHOD(...) {\n            ...\n            $EF.createMethodExpression($CTX,$INPUT,...);\n            ...\n          }\n          ...\n        }\n    - pattern: |\n        $X $METHOD(...) {\n          ...\n          ExpressionFactory $EF = ...;\n          ...\n          $EF.createMethodExpression($CTX,$INPUT,...);\n          ...\n        }\n    - pattern: |\n        $X $METHOD(...,ExpressionFactory $EF,...) {\n          ...\n          $EF.createMethodExpression($CTX,$INPUT,...);\n          ...\n        }\n    - pattern: |\n        $X $METHOD(String $INPUT, ...) {\n          ...\n          $OBJECT.buildConstraintViolationWithTemplate($INPUT, ...);\n          ...\n        }\n  - pattern-not: |\n      $X $METHOD(...) {\n        ...\n        $EF.createValueExpression($CTX,\"...\",...);\n        ...\n      }\n  - pattern-not: |\n      $X $METHOD(...) {\n        ...\n        String $S = \"...\";\n        ...\n        $EF.createValueExpression($CTX,$S,...);\n        ...\n      }\n  - pattern-not: |\n      $X $METHOD(...) {\n        ...\n        $EF.createMethodExpression($CTX,\"...\",...);\n        ...\n      }\n  - pattern-not: |\n      $X $METHOD(...) {\n        ...\n        String $S = \"...\";\n        ...\n        $EF.createMethodExpression($CTX,$S,...);\n        ...\n      }\n", "rule_path": "extend_dataset/534faf01/before/el-injection.yaml", "test_path": "extend_dataset/534faf01/after/el-injection.java", "category": "historical", "splited_testsuite_b": ["package testcode.script;\n\nimport javax.el.ELContext;\nimport javax.el.ExpressionFactory;\nimport javax.el.ValueExpression;\nimport javax.faces.context.FacesContext;\n\npublic class ElExpressionSample {\n\n    // ruleid: el-injection\n    public void unsafeEL(String expression) {\n        FacesContext context = FacesContext.getCurrentInstance();\n        ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();\n        ELContext elContext = context.getELContext();\n        ValueExpression vex = expressionFactory.createValueExpression(elContext, expression, String.class);\n        String result = (String) vex.getValue(elContext);\n        System.out.println(result);\n    }\n}", "package testcode.script;\n\nimport javax.el.ELContext;\nimport javax.el.ExpressionFactory;\nimport javax.el.ValueExpression;\nimport javax.faces.context.FacesContext;\n\npublic class ElExpressionSample {\n\n    // ok: el-injection\n    public void safeEL() {\n        FacesContext context = FacesContext.getCurrentInstance();\n        ExpressionFactory expressionFactory = context.getApplication().getExpressionFactory();\n        ELContext elContext = context.getELContext();\n        ValueExpression vex = expressionFactory.createValueExpression(elContext, \"1+1\", String.class);\n        String result = (String) vex.getValue(elContext);\n        System.out.println(result);\n    }\n}", "package testcode.script;\n\nimport javax.el.ELContext;\nimport javax.el.ExpressionFactory;\n\npublic class ElExpressionSample {\n\n    // ruleid: el-injection\n    public void unsafeELMethod(ELContext elContext,ExpressionFactory expressionFactory, String expression) {\n        expressionFactory.createMethodExpression(elContext, expression, String.class, new Class[]{Integer.class});\n    }\n}", "package testcode.script;\n\nimport javax.el.ELContext;\nimport javax.el.ExpressionFactory;\n\npublic class ElExpressionSample {\n\n    //ok: el-injection\n    public void safeELMethod(ELContext elContext,ExpressionFactory expressionFactory) {\n        expressionFactory.createMethodExpression(elContext, \"1+1\", String.class,new Class[] {Integer.class});\n    }\n}", "package testcode.script;\n\nimport javax.validation.ConstraintValidatorContext;\n\npublic class ElExpressionSample {\n\n    //ok: el-injection\n    private void safeELTemplate(String message, ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n         context\n             .someMethod()\n             .buildConstraintViolationWithTemplate(\"somestring\")\n             .addConstraintViolation();\n    }\n}", "package testcode.script;\n\nimport javax.validation.ConstraintValidatorContext;\n\npublic class ElExpressionSample {\n\n    //ruleid: el-injection\n    private void unsafeELTemplate(String message, ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n         context\n             .someMethod()\n             .buildConstraintViolationWithTemplate(message)\n             .addConstraintViolation();\n    }\n}"], "actual": [true, false, true, false, false, false], "expected": [true, false, true, false, false, true], "index": 206, "commit_message": "method buildConstraintViolationWithTemplate() leads to EL injection, (#1382)", "commit_date_str": "2021-07-22 12:57:40 -0400", "leaf_count": 12, "line_count": 30}
{"id": "command-injection-formatted-runtime-call", "rule": "rules:\n- id: command-injection-formatted-runtime-call\n  patterns:\n  - metavariable-pattern:\n      metavariable: $RUNTIME\n      patterns:\n      - pattern-either:\n        - pattern: (java.lang.Runtime $R)\n        - pattern: java.lang.Runtime.getRuntime(...)\n  - pattern-either:\n    - pattern: $RUNTIME.exec($X + $Y);\n    - pattern: $RUNTIME.exec(String.format(...));\n    - pattern: $RUNTIME.loadLibrary($X + $Y);\n    - pattern: $RUNTIME.loadLibrary(String.format(...));\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            $RUNTIME.exec(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...)\n        - pattern: |\n            $RUNTIME.exec(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n        - pattern: |\n            $RUNTIME.exec(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n        - patterns:\n          - pattern-either:\n            - pattern: |\n                $RUNTIME.exec($CMD,\"-c\",$ARG,...)\n            - pattern: |\n                $RUNTIME.exec(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n            - pattern: |\n                $RUNTIME.exec(new String[]{$CMD,\"-c\",$ARG,...},...)\n          - pattern-inside: |\n              $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n              ...\n      - pattern-not-inside: |\n          $ARG = \"...\";\n          ...\n      - pattern-not: |\n          $RUNTIME.exec(\"...\",\"...\",\"...\",...)\n      - pattern-not: |\n          $RUNTIME.exec(new String[]{\"...\",\"...\",\"...\",...},...)\n      - pattern-not: |\n          $RUNTIME.exec(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n  message: >-\n    A formatted or concatenated string was detected as input to a java.lang.Runtime\n    call.\n    This is dangerous if a variable is controlled by user input and could result in\n    a\n    command injection. Ensure your variables are not controlled by users or sufficiently\n    sanitized.\n  severity: ERROR\n  languages:\n  - java\n\n", "failed_tests": ["import java.lang.Runtime;\n\nclass Cls {\n\n    public void test6(String input) {\n        String[] envp = new String[]{\"-c\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", envp, input);\n    }\n}"], "failed_type": "fn", "testsuite_a": "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"/bin/sh -c some_tool\" + input);\n    }\n\n    public void test1(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test2(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"bash\", \"-c\", input);\n    }\n\n    public void test3(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test4(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", \"-c\", input);\n    }\n\n    public void okTest(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ok: command-injection-formatted-runtime-call\n        r.exec(\"echo 'blah'\");\n    }\n\n    public void okTest2(String input) {\n        // ok: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(\"lib.dll\");\n    }\n}\n\n", "testsuite_b": "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"/bin/sh -c some_tool\" + input);\n    }\n\n    public void test1(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test2(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"bash\", \"-c\", input);\n    }\n\n    public void test3(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test4(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", \"-c\", input);\n    }\n\n    public void okTest(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ok: command-injection-formatted-runtime-call\n        r.exec(\"echo 'blah'\");\n    }\n\n    public void okTest2(String input) {\n        // ok: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(\"lib.dll\");\n    }\n\n    public void test6(String input) {\n        String[] envp = new String[]{\"-c\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", envp, input);\n    }\n\n    public void test6(String input) {\n        String[] command = new String[]{\"bash\"};\n        String[] envp = new String[]{\"-c\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(command, envp, input);\n    }\n\n        public void test6(String input) {\n        String[] command = new String[]{\"bash\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(command, \"-c\", input);\n    }\n}\n", "ground_truth": "rules:\n- id: command-injection-formatted-runtime-call\n  patterns:\n  - metavariable-pattern:\n      metavariable: $RUNTIME\n      patterns:\n      - pattern-either:\n        - pattern: (java.lang.Runtime $R)\n        - pattern: java.lang.Runtime.getRuntime(...)\n  - pattern-either:\n    - pattern: $RUNTIME.exec($X + $Y);\n    - pattern: $RUNTIME.exec(String.format(...));\n    - pattern: $RUNTIME.loadLibrary($X + $Y);\n    - pattern: $RUNTIME.loadLibrary(String.format(...));\n    - patterns:\n      - pattern-either:\n        - pattern: | \n            $RUNTIME.exec(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $ARG,...)\n        - pattern: |\n            $RUNTIME.exec(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n        - pattern: |\n            $RUNTIME.exec(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n        - patterns:\n          - pattern-either:\n            - pattern: |\n                $RUNTIME.exec($CMD,\"-c\",$ARG,...)\n            - pattern: |\n                $RUNTIME.exec(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n            - pattern: |\n                $RUNTIME.exec(new String[]{$CMD,\"-c\",$ARG,...},...)\n          - pattern-inside: |\n              $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n              ...\n        - patterns:\n          - pattern-either:\n            - pattern: |\n                $RUNTIME.exec($CMD, $EXECUTE, $ARG, ...)\n          - pattern-inside: |\n              $CMD = new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", ...};\n              ...\n        - patterns:\n            - pattern-either:\n                - pattern: | \n                    $RUNTIME.exec(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", $BASH, $ARG,...)\n                - pattern: |\n                    $RUNTIME.exec(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",$BASH,$ARG,...),...)\n                - pattern: |\n                    $RUNTIME.exec(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",$BASH,$ARG,...},...)\n            - pattern-inside: |\n                $BASH = new String[]{\"=~/(-c)/\", ...};\n                ...\n      - pattern-not-inside: |\n          $ARG = \"...\";\n          ...\n      - pattern-not: |\n          $RUNTIME.exec(\"...\",\"...\",\"...\",...)\n      - pattern-not: |\n          $RUNTIME.exec(new String[]{\"...\",\"...\",\"...\",...},...)\n      - pattern-not: |\n          $RUNTIME.exec(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n  message: >-\n    A formatted or concatenated string was detected as input to a java.lang.Runtime\n    call.\n    This is dangerous if a variable is controlled by user input and could result in\n    a\n    command injection. Ensure your variables are not controlled by users or sufficiently\n    sanitized.\n  metadata:\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#COMMAND_INJECTION.\n    category: security\n    technology:\n    - java\n    references:\n    - https://owasp.org/Top10/A03_2021-Injection\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - java\n", "rule_path": "extend_dataset/cf0a2b72/before/command-injection-formatted-runtime-call.yaml", "test_path": "extend_dataset/cf0a2b72/after/command-injection-formatted-runtime-call.java", "category": "historical", "splited_testsuite_b": ["import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"/bin/sh -c some_tool\" + input);\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test1(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.loadLibrary(String.format(\"%s.dll\", input));\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test2(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"bash\", \"-c\", input);\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test3(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(String.format(\"%s.dll\", input));\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test4(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", \"-c\", input);\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void okTest(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ok: command-injection-formatted-runtime-call\n        r.exec(\"echo 'blah'\");\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void okTest2(String input) {\n        // ok: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(\"lib.dll\");\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test6(String input) {\n        String[] envp = new String[]{\"-c\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", envp, input);\n    }\n}"], "actual": [true, true, true, true, true, false, false, false], "expected": [true, true, true, true, true, false, false, true], "index": 207, "commit_message": "Improve Java command injection rule (#2695)", "commit_date_str": "2023-02-06 13:47:28 +0100", "leaf_count": 18, "line_count": 53}
{"id": "command-injection-formatted-runtime-call", "rule": "rules:\n- id: command-injection-formatted-runtime-call\n  patterns:\n  - metavariable-pattern:\n      metavariable: $RUNTIME\n      patterns:\n      - pattern-either:\n        - pattern: (java.lang.Runtime $R)\n        - pattern: java.lang.Runtime.getRuntime(...)\n  - pattern-either:\n    - pattern: $RUNTIME.exec($X + $Y);\n    - pattern: $RUNTIME.exec(String.format(...));\n    - pattern: $RUNTIME.loadLibrary($X + $Y);\n    - pattern: $RUNTIME.loadLibrary(String.format(...));\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            $RUNTIME.exec(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...)\n        - pattern: |\n            $RUNTIME.exec(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n        - pattern: |\n            $RUNTIME.exec(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n        - patterns:\n          - pattern-either:\n            - pattern: |\n                $RUNTIME.exec($CMD,\"-c\",$ARG,...)\n            - pattern: |\n                $RUNTIME.exec(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n            - pattern: |\n                $RUNTIME.exec(new String[]{$CMD,\"-c\",$ARG,...},...)\n          - pattern-inside: |\n              $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n              ...\n      - pattern-not-inside: |\n          $ARG = \"...\";\n          ...\n      - pattern-not: |\n          $RUNTIME.exec(\"...\",\"...\",\"...\",...)\n      - pattern-not: |\n          $RUNTIME.exec(new String[]{\"...\",\"...\",\"...\",...},...)\n      - pattern-not: |\n          $RUNTIME.exec(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n  message: >-\n    A formatted or concatenated string was detected as input to a java.lang.Runtime\n    call.\n    This is dangerous if a variable is controlled by user input and could result in\n    a\n    command injection. Ensure your variables are not controlled by users or sufficiently\n    sanitized.\n  severity: ERROR\n  languages:\n  - java\n\n", "failed_tests": ["import java.lang.Runtime;\n\nclass Cls {\n\n    public void test6(String input) {\n        String[] command = new String[]{\"bash\"};\n        String[] envp = new String[]{\"-c\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(command, envp, input);\n    }\n}"], "failed_type": "fn", "testsuite_a": "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"/bin/sh -c some_tool\" + input);\n    }\n\n    public void test1(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test2(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"bash\", \"-c\", input);\n    }\n\n    public void test3(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test4(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", \"-c\", input);\n    }\n\n    public void okTest(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ok: command-injection-formatted-runtime-call\n        r.exec(\"echo 'blah'\");\n    }\n\n    public void okTest2(String input) {\n        // ok: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(\"lib.dll\");\n    }\n}\n\n", "testsuite_b": "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"/bin/sh -c some_tool\" + input);\n    }\n\n    public void test1(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test2(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"bash\", \"-c\", input);\n    }\n\n    public void test3(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test4(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", \"-c\", input);\n    }\n\n    public void okTest(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ok: command-injection-formatted-runtime-call\n        r.exec(\"echo 'blah'\");\n    }\n\n    public void okTest2(String input) {\n        // ok: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(\"lib.dll\");\n    }\n\n    public void test6(String input) {\n        String[] envp = new String[]{\"-c\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", envp, input);\n    }\n\n    public void test6(String input) {\n        String[] command = new String[]{\"bash\"};\n        String[] envp = new String[]{\"-c\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(command, envp, input);\n    }\n\n        public void test6(String input) {\n        String[] command = new String[]{\"bash\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(command, \"-c\", input);\n    }\n}\n", "ground_truth": "rules:\n- id: command-injection-formatted-runtime-call\n  patterns:\n  - metavariable-pattern:\n      metavariable: $RUNTIME\n      patterns:\n      - pattern-either:\n        - pattern: (java.lang.Runtime $R)\n        - pattern: java.lang.Runtime.getRuntime(...)\n  - pattern-either:\n    - pattern: $RUNTIME.exec($X + $Y);\n    - pattern: $RUNTIME.exec(String.format(...));\n    - pattern: $RUNTIME.loadLibrary($X + $Y);\n    - pattern: $RUNTIME.loadLibrary(String.format(...));\n    - patterns:\n      - pattern-either:\n        - pattern: | \n            $RUNTIME.exec(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $ARG,...)\n        - pattern: |\n            $RUNTIME.exec(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n        - pattern: |\n            $RUNTIME.exec(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n        - patterns:\n          - pattern-either:\n            - pattern: |\n                $RUNTIME.exec($CMD,\"-c\",$ARG,...)\n            - pattern: |\n                $RUNTIME.exec(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n            - pattern: |\n                $RUNTIME.exec(new String[]{$CMD,\"-c\",$ARG,...},...)\n          - pattern-inside: |\n              $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n              ...\n        - patterns:\n          - pattern-either:\n            - pattern: |\n                $RUNTIME.exec($CMD, $EXECUTE, $ARG, ...)\n          - pattern-inside: |\n              $CMD = new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", ...};\n              ...\n        - patterns:\n            - pattern-either:\n                - pattern: | \n                    $RUNTIME.exec(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", $BASH, $ARG,...)\n                - pattern: |\n                    $RUNTIME.exec(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",$BASH,$ARG,...),...)\n                - pattern: |\n                    $RUNTIME.exec(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",$BASH,$ARG,...},...)\n            - pattern-inside: |\n                $BASH = new String[]{\"=~/(-c)/\", ...};\n                ...\n      - pattern-not-inside: |\n          $ARG = \"...\";\n          ...\n      - pattern-not: |\n          $RUNTIME.exec(\"...\",\"...\",\"...\",...)\n      - pattern-not: |\n          $RUNTIME.exec(new String[]{\"...\",\"...\",\"...\",...},...)\n      - pattern-not: |\n          $RUNTIME.exec(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n  message: >-\n    A formatted or concatenated string was detected as input to a java.lang.Runtime\n    call.\n    This is dangerous if a variable is controlled by user input and could result in\n    a\n    command injection. Ensure your variables are not controlled by users or sufficiently\n    sanitized.\n  metadata:\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#COMMAND_INJECTION.\n    category: security\n    technology:\n    - java\n    references:\n    - https://owasp.org/Top10/A03_2021-Injection\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - java\n", "rule_path": "extend_dataset/cf0a2b72/before/command-injection-formatted-runtime-call.yaml", "test_path": "extend_dataset/cf0a2b72/after/command-injection-formatted-runtime-call.java", "category": "historical", "splited_testsuite_b": ["import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"/bin/sh -c some_tool\" + input);\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test1(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.loadLibrary(String.format(\"%s.dll\", input));\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test2(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"bash\", \"-c\", input);\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test3(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(String.format(\"%s.dll\", input));\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test4(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", \"-c\", input);\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void okTest(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ok: command-injection-formatted-runtime-call\n        r.exec(\"echo 'blah'\");\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void okTest2(String input) {\n        // ok: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(\"lib.dll\");\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test6(String input) {\n        String[] command = new String[]{\"bash\"};\n        String[] envp = new String[]{\"-c\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(command, envp, input);\n    }\n}"], "actual": [true, true, true, true, true, false, false, false], "expected": [true, true, true, true, true, false, false, true], "index": 208, "commit_message": "Improve Java command injection rule (#2695)", "commit_date_str": "2023-02-06 13:47:28 +0100", "leaf_count": 18, "line_count": 53}
{"id": "command-injection-formatted-runtime-call", "rule": "rules:\n- id: command-injection-formatted-runtime-call\n  patterns:\n  - metavariable-pattern:\n      metavariable: $RUNTIME\n      patterns:\n      - pattern-either:\n        - pattern: (java.lang.Runtime $R)\n        - pattern: java.lang.Runtime.getRuntime(...)\n  - pattern-either:\n    - pattern: $RUNTIME.exec($X + $Y);\n    - pattern: $RUNTIME.exec(String.format(...));\n    - pattern: $RUNTIME.loadLibrary($X + $Y);\n    - pattern: $RUNTIME.loadLibrary(String.format(...));\n    - patterns:\n      - pattern-either:\n        - pattern: |\n            $RUNTIME.exec(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...)\n        - pattern: |\n            $RUNTIME.exec(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n        - pattern: |\n            $RUNTIME.exec(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n        - patterns:\n          - pattern-either:\n            - pattern: |\n                $RUNTIME.exec($CMD,\"-c\",$ARG,...)\n            - pattern: |\n                $RUNTIME.exec(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n            - pattern: |\n                $RUNTIME.exec(new String[]{$CMD,\"-c\",$ARG,...},...)\n          - pattern-inside: |\n              $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n              ...\n      - pattern-not-inside: |\n          $ARG = \"...\";\n          ...\n      - pattern-not: |\n          $RUNTIME.exec(\"...\",\"...\",\"...\",...)\n      - pattern-not: |\n          $RUNTIME.exec(new String[]{\"...\",\"...\",\"...\",...},...)\n      - pattern-not: |\n          $RUNTIME.exec(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n  message: >-\n    A formatted or concatenated string was detected as input to a java.lang.Runtime\n    call.\n    This is dangerous if a variable is controlled by user input and could result in\n    a\n    command injection. Ensure your variables are not controlled by users or sufficiently\n    sanitized.\n  severity: ERROR\n  languages:\n  - java\n\n", "failed_tests": ["import java.lang.Runtime;\n\nclass Cls {\n\n    public void test6(String input) {\n        String[] command = new String[]{\"bash\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(command, \"-c\", input);\n    }\n}"], "failed_type": "fn", "testsuite_a": "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"/bin/sh -c some_tool\" + input);\n    }\n\n    public void test1(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test2(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"bash\", \"-c\", input);\n    }\n\n    public void test3(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test4(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", \"-c\", input);\n    }\n\n    public void okTest(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ok: command-injection-formatted-runtime-call\n        r.exec(\"echo 'blah'\");\n    }\n\n    public void okTest2(String input) {\n        // ok: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(\"lib.dll\");\n    }\n}\n\n", "testsuite_b": "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"/bin/sh -c some_tool\" + input);\n    }\n\n    public void test1(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test2(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"bash\", \"-c\", input);\n    }\n\n    public void test3(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(String.format(\"%s.dll\", input));\n    }\n\n    public void test4(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", \"-c\", input);\n    }\n\n    public void okTest(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ok: command-injection-formatted-runtime-call\n        r.exec(\"echo 'blah'\");\n    }\n\n    public void okTest2(String input) {\n        // ok: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(\"lib.dll\");\n    }\n\n    public void test6(String input) {\n        String[] envp = new String[]{\"-c\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", envp, input);\n    }\n\n    public void test6(String input) {\n        String[] command = new String[]{\"bash\"};\n        String[] envp = new String[]{\"-c\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(command, envp, input);\n    }\n\n        public void test6(String input) {\n        String[] command = new String[]{\"bash\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(command, \"-c\", input);\n    }\n}\n", "ground_truth": "rules:\n- id: command-injection-formatted-runtime-call\n  patterns:\n  - metavariable-pattern:\n      metavariable: $RUNTIME\n      patterns:\n      - pattern-either:\n        - pattern: (java.lang.Runtime $R)\n        - pattern: java.lang.Runtime.getRuntime(...)\n  - pattern-either:\n    - pattern: $RUNTIME.exec($X + $Y);\n    - pattern: $RUNTIME.exec(String.format(...));\n    - pattern: $RUNTIME.loadLibrary($X + $Y);\n    - pattern: $RUNTIME.loadLibrary(String.format(...));\n    - patterns:\n      - pattern-either:\n        - pattern: | \n            $RUNTIME.exec(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", \"-c\", $ARG,...)\n        - pattern: |\n            $RUNTIME.exec(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n        - pattern: |\n            $RUNTIME.exec(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n        - patterns:\n          - pattern-either:\n            - pattern: |\n                $RUNTIME.exec($CMD,\"-c\",$ARG,...)\n            - pattern: |\n                $RUNTIME.exec(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n            - pattern: |\n                $RUNTIME.exec(new String[]{$CMD,\"-c\",$ARG,...},...)\n          - pattern-inside: |\n              $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n              ...\n        - patterns:\n          - pattern-either:\n            - pattern: |\n                $RUNTIME.exec($CMD, $EXECUTE, $ARG, ...)\n          - pattern-inside: |\n              $CMD = new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", ...};\n              ...\n        - patterns:\n            - pattern-either:\n                - pattern: | \n                    $RUNTIME.exec(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\", $BASH, $ARG,...)\n                - pattern: |\n                    $RUNTIME.exec(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",$BASH,$ARG,...),...)\n                - pattern: |\n                    $RUNTIME.exec(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",$BASH,$ARG,...},...)\n            - pattern-inside: |\n                $BASH = new String[]{\"=~/(-c)/\", ...};\n                ...\n      - pattern-not-inside: |\n          $ARG = \"...\";\n          ...\n      - pattern-not: |\n          $RUNTIME.exec(\"...\",\"...\",\"...\",...)\n      - pattern-not: |\n          $RUNTIME.exec(new String[]{\"...\",\"...\",\"...\",...},...)\n      - pattern-not: |\n          $RUNTIME.exec(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n  message: >-\n    A formatted or concatenated string was detected as input to a java.lang.Runtime\n    call.\n    This is dangerous if a variable is controlled by user input and could result in\n    a\n    command injection. Ensure your variables are not controlled by users or sufficiently\n    sanitized.\n  metadata:\n    cwe:\n    - \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#COMMAND_INJECTION.\n    category: security\n    technology:\n    - java\n    references:\n    - https://owasp.org/Top10/A03_2021-Injection\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - audit\n    likelihood: LOW\n    impact: HIGH\n    confidence: LOW\n  severity: ERROR\n  languages:\n  - java\n", "rule_path": "extend_dataset/cf0a2b72/before/command-injection-formatted-runtime-call.yaml", "test_path": "extend_dataset/cf0a2b72/after/command-injection-formatted-runtime-call.java", "category": "historical", "splited_testsuite_b": ["import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"/bin/sh -c some_tool\" + input);\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test1(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.loadLibrary(String.format(\"%s.dll\", input));\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test2(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ruleid: command-injection-formatted-runtime-call\n        r.exec(\"bash\", \"-c\", input);\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test3(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(String.format(\"%s.dll\", input));\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test4(String input) {\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(\"bash\", \"-c\", input);\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void okTest(String input) {\n        Runtime r = Runtime.getRuntime();\n        // ok: command-injection-formatted-runtime-call\n        r.exec(\"echo 'blah'\");\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void okTest2(String input) {\n        // ok: command-injection-formatted-runtime-call\n        Runtime.getRuntime().loadLibrary(\"lib.dll\");\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public void test6(String input) {\n        String[] command = new String[]{\"bash\"};\n        // ruleid: command-injection-formatted-runtime-call\n        Runtime.getRuntime().exec(command, \"-c\", input);\n    }\n}"], "actual": [true, true, true, true, true, false, false, false], "expected": [true, true, true, true, true, false, false, true], "index": 209, "commit_message": "Improve Java command injection rule (#2695)", "commit_date_str": "2023-02-06 13:47:28 +0100", "leaf_count": 18, "line_count": 53}
{"id": "weak-ssl-context", "rule": "rules:\n- id: weak-ssl-context\n  message: |\n    An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions\n    are considered weak encryption and are deprecated.\n    Use SSLContext.getInstance(\"TLSv1.2\") for the best security.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-not: SSLContext.getInstance(\"TLS1.3\")\n  - pattern-not: SSLContext.getInstance(\"TLS1.2\")\n  - pattern: SSLContext.getInstance(\"...\")\n  fix-regex:\n    regex: (.*?)\\.getInstance\\(.*?\\)\n    replacement: \\1.getInstance(\"TLS1.2\")\n", "failed_tests": ["import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test6() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}"], "failed_type": "fp", "testsuite_a": "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test1() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"SSL\");\n    }\n\n    public void test2() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS1.0\");\n    }\n\n    public void test3() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS1.1\");\n    }\n\n    public void test4() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS1.2\");\n    }\n\n    public void test5() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS1.3\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n\n    public void test5() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(getSslContext());\n    }\n}\n", "testsuite_b": "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test1() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"SSL\");\n    }\n\n    public void test2() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n    }\n\n    public void test3() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1\");\n    }\n\n    public void test4() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"SSLv3\");\n    }\n\n    public void test5() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.1\");\n    }\n\n    public void test6() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n    }\n\n    public void test7() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.3\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n\n    public void test8() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(getSslContext());\n    }\n}\n", "ground_truth": "rules:\n- id: weak-ssl-context\n  metadata:\n    cwe: 'CWE-326: Inadequate Encryption Strength'\n    owasp: 'A3: Sensitive Data Exposure'\n    source_rule_url: https://find-sec-bugs.github.io/bugs.htm#SSL_CONTEXT\n    references:\n    - https://tools.ietf.org/html/rfc7568\n    - https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html\n  message: |\n    An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions\n    are considered weak encryption and are deprecated.\n    Use SSLContext.getInstance(\"TLSv1.2\") for the best security.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-not: SSLContext.getInstance(\"TLSv1.3\")\n  - pattern-not: SSLContext.getInstance(\"TLSv1.2\")\n  - pattern: SSLContext.getInstance(\"...\")\n  fix-regex:\n    regex: (.*?)\\.getInstance\\(.*?\\)\n    replacement: \\1.getInstance(\"TLSv1.2\")\n", "rule_path": "extend_dataset/0533282b/before/weak-ssl-context.yaml", "test_path": "extend_dataset/0533282b/after/weak-ssl-context.java", "category": "historical", "splited_testsuite_b": ["import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test1() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"SSL\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test2() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test3() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test4() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"SSLv3\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test5() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.1\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test8() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(getSslContext());\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test6() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}"], "actual": [true, true, true, true, true, false, true], "expected": [true, true, true, true, true, false, false], "index": 210, "commit_message": "Correct protocol names for Java SSLContext. (#1205)", "commit_date_str": "2021-04-07 07:36:06 -0600", "leaf_count": 3, "line_count": 4}
{"id": "weak-ssl-context", "rule": "rules:\n- id: weak-ssl-context\n  message: |\n    An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions\n    are considered weak encryption and are deprecated.\n    Use SSLContext.getInstance(\"TLSv1.2\") for the best security.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-not: SSLContext.getInstance(\"TLS1.3\")\n  - pattern-not: SSLContext.getInstance(\"TLS1.2\")\n  - pattern: SSLContext.getInstance(\"...\")\n  fix-regex:\n    regex: (.*?)\\.getInstance\\(.*?\\)\n    replacement: \\1.getInstance(\"TLS1.2\")\n", "failed_tests": ["import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test7() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.3\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}"], "failed_type": "fp", "testsuite_a": "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test1() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"SSL\");\n    }\n\n    public void test2() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS1.0\");\n    }\n\n    public void test3() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS1.1\");\n    }\n\n    public void test4() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS1.2\");\n    }\n\n    public void test5() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS1.3\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n\n    public void test5() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(getSslContext());\n    }\n}\n", "testsuite_b": "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test1() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"SSL\");\n    }\n\n    public void test2() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n    }\n\n    public void test3() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1\");\n    }\n\n    public void test4() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"SSLv3\");\n    }\n\n    public void test5() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.1\");\n    }\n\n    public void test6() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.2\");\n    }\n\n    public void test7() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.3\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n\n    public void test8() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(getSslContext());\n    }\n}\n", "ground_truth": "rules:\n- id: weak-ssl-context\n  metadata:\n    cwe: 'CWE-326: Inadequate Encryption Strength'\n    owasp: 'A3: Sensitive Data Exposure'\n    source_rule_url: https://find-sec-bugs.github.io/bugs.htm#SSL_CONTEXT\n    references:\n    - https://tools.ietf.org/html/rfc7568\n    - https://tools.ietf.org/id/draft-ietf-tls-oldversions-deprecate-02.html\n  message: |\n    An insecure SSL context was detected. TLS versions 1.0, 1.1, and all SSL versions\n    are considered weak encryption and are deprecated.\n    Use SSLContext.getInstance(\"TLSv1.2\") for the best security.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern-not: SSLContext.getInstance(\"TLSv1.3\")\n  - pattern-not: SSLContext.getInstance(\"TLSv1.2\")\n  - pattern: SSLContext.getInstance(\"...\")\n  fix-regex:\n    regex: (.*?)\\.getInstance\\(.*?\\)\n    replacement: \\1.getInstance(\"TLSv1.2\")\n", "rule_path": "extend_dataset/0533282b/before/weak-ssl-context.yaml", "test_path": "extend_dataset/0533282b/after/weak-ssl-context.java", "category": "historical", "splited_testsuite_b": ["import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test1() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"SSL\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test2() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLS\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test3() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test4() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"SSLv3\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test5() {\n        // ruleid: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.1\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test8() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(getSslContext());\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}", "import java.lang.Runtime;\n\nclass Cls {\n\n    public Cls() {\n        System.out.println(\"Hello\");\n    }\n\n    public void test7() {\n        // ok: weak-ssl-context\n        SSLContext ctx = SSLContext.getInstance(\"TLSv1.3\");\n    }\n\n    public String getSslContext() {\n        return \"Anything\";\n    }\n}"], "actual": [true, true, true, true, true, false, true], "expected": [true, true, true, true, true, false, false], "index": 211, "commit_message": "Correct protocol names for Java SSLContext. (#1205)", "commit_date_str": "2021-04-07 07:36:06 -0600", "leaf_count": 3, "line_count": 4}
{"id": "tainted-sql-string", "rule": "rules:\n- id: tainted-sql-string\n  languages:\n  - java\n  severity: ERROR\n  message: User data flows into this manually-constructed SQL string. User data can\n    be safely inserted into SQL strings using prepared statements or an object-relational\n    mapper (ORM). Manually-constructed SQL strings is a possible indicator of SQL\n    injection, which could let an attacker steal or manipulate data from the database.\n    Instead, use prepared statements (`connection.PreparedStatement`) or a safe library.\n  options:\n    taint_assume_safe_numbers: true\n    taint_assume_safe_booleans: true\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern-inside: |\n          $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {\n            ...\n          }\n      - pattern-inside: |\n          $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {\n            ...\n          }\n    - metavariable-regex:\n        metavariable: $REQ\n        regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue)\n    - metavariable-regex:\n        metavariable: $TYPE\n        regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))\n    - focus-metavariable: $SOURCE\n  pattern-sinks:\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          \"$SQLSTR\" + ...\n      - pattern: |\n          \"$SQLSTR\".concat(...)\n      - patterns:\n        - pattern-inside: |\n            StringBuilder $SB = new StringBuilder(\"$SQLSTR\");\n            ...\n        - pattern: $SB.append(...)\n      - patterns:\n        - pattern-inside: |\n            $VAR = \"$SQLSTR\";\n            ...\n        - pattern: $VAR += ...\n      - pattern: String.format(\"$SQLSTR\", ...)\n      - patterns:\n        - pattern-inside: |\n            String $VAR = \"$SQLSTR\";\n            ...\n        - pattern: String.format($VAR, ...)\n    - pattern-not-inside: System.out.println(...)\n    - pattern-not-inside: $LOG.info(...)\n    - pattern-not-inside: $LOG.warn(...)\n    - pattern-not-inside: $LOG.warning(...)\n    - pattern-not-inside: $LOG.debug(...)\n    - pattern-not-inside: $LOG.debugging(...)\n    - pattern-not-inside: $LOG.error(...)\n    - metavariable-regex:\n        metavariable: $SQLSTR\n        regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "failed_tests": ["package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/test5\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test5(@RequestBody String name) {\n        try {\n            // ok: tainted-sql-string\n            throw new Exception(String.format(\"Update request from %s to %s isn't allowed\",\n            name, bar\n            ));\n        }\n        catch (NullPointerException e) {\n            System.out.println(\"Caught inside fun().\");\n            throw e; // rethrowing the exception\n        }\n    }\n}"], "failed_type": "fp", "testsuite_a": "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/test1\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test1(@RequestBody String name) {\n        // ruleid: tainted-sql-string\n        String sql = \"SELECT * FROM table WHERE name = \" + name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/test2\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test2(@RequestBody String name) {\n        // ruleid: tainted-sql-string\n        String sql = String.format(\"SELECT * FROM table WHERE name = %s;\", name);\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/test3\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test3(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ruleid: tainted-sql-string\n        sql.concat(name + \";\");\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/test4\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test4(@RequestBody String name) {\n        StringBuilder sql = new StringBuilder(\"SELECT * FROM table WHERE name = \");\n        // ruleid: tainted-sql-string\n        sql.append(name + \";\");\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql.toString());\n        return rs;\n    }\n\n    @RequestMapping(value = \"/test5\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test5(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ruleid: tainted-sql-string\n        sql += name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/ok1\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok1(@RequestBody String name) {\n        // ok: tainted-sql-string\n        String sql = \"SELECT * FROM table WHERE name = 'everyone';\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/ok2\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok2(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = 'everyone';\";\n        // ok: tainted-sql-string\n        System.out.println(String.format(\"Got request from %s\", name));\n        // ok: tainted-sql-string\n        System.out.println(\"select noise for tests using tainted name:\" + name);\n        // ok: tainted-sql-string\n        Logger.debug(\"Create noise for tests using tainted name:\" + name);\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/testok3\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok3(@RequestBody Integer name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/testok4\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok4(@RequestBody Boolean name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/testok5\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok5(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += (name.substring(2,3) != \"hello\".substring(2,3)) + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/testok6\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok6(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += (\"hello\".substring(2,3) == name.substring(2,3)) + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}\n\nclass Bar {\n  int x;\n\n  public int getX() {\n    return x;\n  }\n}\n\nclass Foo {\n  List<Bar> bars;\n\n  public List<Bar> getBars(String name) {\n    return bars;\n  }\n}\n\nclass Test {\n  @RequestMapping(value = \"/testok6\", method = RequestMethod.POST, produces = \"plain/text\")\n  public ResultSet ok7(@RequestBody String name, Foo foo) {\n        var v = foo.getBars(name).get(0).getX();\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok in pro engine\n        // ruleid: tainted-sql-string\n        sql += v + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n  }\n}\n\n@Getter\n@Setter\npublic class SiteModel {\n\tprivate List<PrefixSiteIds> prefixes;\n    public List<PrefixSiteIds> getPrefixes(String name) {\n        return prefixes;\n    }\n}\n\n@Getter\n@Setter\npublic class PrefixSiteIds {\n\n\tpublic SiteIds sites;\n}\n@Getter\n@Setter\npublic class SiteIds {\n\tpublic Set<Integer> ids = new HashSet<>();\n}\n\nclass Test2 {\n  @RequestMapping(value = \"/testok8\", method = RequestMethod.POST, produces = \"plain/text\")\n  public ResultSet ok8(@RequestBody String name, SiteModel sitemodel) {\n        var v = sitemodel.getPrefixes(name).sites.ids.get(0);\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok in pro-engine\n        // ruleid: tainted-sql-string\n        sql += v + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n}\n", "testsuite_b": "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/test1\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test1(@RequestBody String name) {\n        // ruleid: tainted-sql-string\n        String sql = \"SELECT * FROM table WHERE name = \" + name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/test2\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test2(@RequestBody String name) {\n        // ruleid: tainted-sql-string\n        String sql = String.format(\"SELECT * FROM table WHERE name = %s;\", name);\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/test3\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test3(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ruleid: tainted-sql-string\n        sql.concat(name + \";\");\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/test4\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test4(@RequestBody String name) {\n        StringBuilder sql = new StringBuilder(\"SELECT * FROM table WHERE name = \");\n        // ruleid: tainted-sql-string\n        sql.append(name + \";\");\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql.toString());\n        return rs;\n    }\n\n    @RequestMapping(value = \"/test5\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test5(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ruleid: tainted-sql-string\n        sql += name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/test5\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test5(@RequestBody String name) {\n        try {\n            // ok: tainted-sql-string\n            throw new Exception(String.format(\"Update request from %s to %s isn't allowed\",\n            name, bar\n            ));\n        }\n        catch (NullPointerException e) {\n            System.out.println(\"Caught inside fun().\");\n            throw e; // rethrowing the exception\n        }\n    }\n\n    @RequestMapping(value = \"/ok1\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok1(@RequestBody String name) {\n        // ok: tainted-sql-string\n        String sql = \"SELECT * FROM table WHERE name = 'everyone';\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/ok2\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok2(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = 'everyone';\";\n        // ok: tainted-sql-string\n        System.out.println(String.format(\"Got request from %s\", name));\n        // ok: tainted-sql-string\n        System.out.println(\"select noise for tests using tainted name:\" + name);\n        // ok: tainted-sql-string\n        Logger.debug(\"Create noise for tests using tainted name:\" + name);\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/testok3\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok3(@RequestBody Integer name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/testok4\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok4(@RequestBody Boolean name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/testok5\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok5(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += (name.substring(2,3) != \"hello\".substring(2,3)) + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n\n    @RequestMapping(value = \"/testok6\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok6(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += (\"hello\".substring(2,3) == name.substring(2,3)) + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}\n\nclass Bar {\n  int x;\n\n  public int getX() {\n    return x;\n  }\n}\n\nclass Foo {\n  List<Bar> bars;\n\n  public List<Bar> getBars(String name) {\n    return bars;\n  }\n}\n\nclass Test {\n  @RequestMapping(value = \"/testok6\", method = RequestMethod.POST, produces = \"plain/text\")\n  public ResultSet ok7(@RequestBody String name, Foo foo) {\n        var v = foo.getBars(name).get(0).getX();\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok in pro engine\n        // ruleid: tainted-sql-string\n        sql += v + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n  }\n}\n\n@Getter\n@Setter\npublic class SiteModel {\n\tprivate List<PrefixSiteIds> prefixes;\n    public List<PrefixSiteIds> getPrefixes(String name) {\n        return prefixes;\n    }\n}\n\n@Getter\n@Setter\npublic class PrefixSiteIds {\n\n\tpublic SiteIds sites;\n}\n@Getter\n@Setter\npublic class SiteIds {\n\tpublic Set<Integer> ids = new HashSet<>();\n}\n\nclass Test2 {\n  @RequestMapping(value = \"/testok8\", method = RequestMethod.POST, produces = \"plain/text\")\n  public ResultSet ok8(@RequestBody String name, SiteModel sitemodel) {\n        var v = sitemodel.getPrefixes(name).sites.ids.get(0);\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok in pro-engine\n        // ruleid: tainted-sql-string\n        sql += v + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n}\n", "ground_truth": "rules:\n  - id: tainted-sql-string-copy\n    languages:\n      - java\n    severity: ERROR\n    message: User data flows into this manually-constructed SQL string. User data\n      can be safely inserted into SQL strings using prepared statements or an\n      object-relational mapper (ORM). Manually-constructed SQL strings is a\n      possible indicator of SQL injection, which could let an attacker steal or\n      manipulate data from the database. Instead, use prepared statements\n      (`connection.PreparedStatement`) or a safe library.\n    metadata:\n      cwe:\n        - \"CWE-89: Improper Neutralization of Special Elements used in an SQL\n          Command ('SQL Injection')\"\n      owasp:\n        - A01:2017 - Injection\n        - A03:2021 - Injection\n      references:\n        - https://docs.oracle.com/javase/7/docs/api/java/sql/PreparedStatement.html\n      category: security\n      technology:\n        - spring\n      license: Commons Clause License Condition v1.0[LGPL-2.1-only]\n      cwe2022-top25: true\n      cwe2021-top25: true\n      subcategory:\n        - vuln\n      likelihood: HIGH\n      impact: MEDIUM\n      confidence: MEDIUM\n      interfile: true\n    options:\n      taint_assume_safe_numbers: true\n      taint_assume_safe_booleans: true\n    mode: taint\n    pattern-sources:\n      - patterns:\n          - pattern-either:\n              - pattern-inside: |\n                  $METHODNAME(..., @$REQ(...) $TYPE $SOURCE,...) {\n                    ...\n                  }\n              - pattern-inside: |\n                  $METHODNAME(..., @$REQ $TYPE $SOURCE,...) {\n                    ...\n                  }\n          - metavariable-regex:\n              metavariable: $REQ\n              regex: (RequestBody|PathVariable|RequestParam|RequestHeader|CookieValue)\n          - metavariable-regex:\n              metavariable: $TYPE\n              regex: ^(?!(Integer|Long|Float|Double|Char|Boolean|int|long|float|double|char|boolean))\n          - focus-metavariable: $SOURCE\n    pattern-sinks:\n      - patterns:\n          - pattern-either:\n              - pattern: |\n                  \"$SQLSTR\" + ...\n              - pattern: |\n                  \"$SQLSTR\".concat(...)\n              - patterns:\n                  - pattern-inside: |\n                      StringBuilder $SB = new StringBuilder(\"$SQLSTR\");\n                      ...\n                  - pattern: $SB.append(...)\n              - patterns:\n                  - pattern-inside: |\n                      $VAR = \"$SQLSTR\";\n                      ...\n                  - pattern: $VAR += ...\n              - pattern: String.format(\"$SQLSTR\", ...)\n              - patterns:\n                  - pattern-inside: |\n                      String $VAR = \"$SQLSTR\";\n                      ...\n                  - pattern: String.format($VAR, ...)\n          - pattern-not-inside: System.out.println(...)\n          - pattern-not-inside: $LOG.info(...)\n          - pattern-not-inside: $LOG.warn(...)\n          - pattern-not-inside: $LOG.warning(...)\n          - pattern-not-inside: $LOG.debug(...)\n          - pattern-not-inside: $LOG.debugging(...)\n          - pattern-not-inside: $LOG.error(...)\n          - pattern-not-inside: new Exception(...)\n          - pattern-not-inside: throw ...;\n          - metavariable-regex:\n              metavariable: $SQLSTR\n              regex: (?i)(select|delete|insert|create|update|alter|drop)\\b\n", "rule_path": "extend_dataset/f59a4f07/before/tainted-sql-string.yaml", "test_path": "extend_dataset/f59a4f07/after/tainted-sql-string.java", "category": "historical", "splited_testsuite_b": ["package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/test1\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test1(@RequestBody String name) {\n        // ruleid: tainted-sql-string\n        String sql = \"SELECT * FROM table WHERE name = \" + name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/test2\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test2(@RequestBody String name) {\n        // ruleid: tainted-sql-string\n        String sql = String.format(\"SELECT * FROM table WHERE name = %s;\", name);\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/test3\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test3(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ruleid: tainted-sql-string\n        sql.concat(name + \";\");\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/test4\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test4(@RequestBody String name) {\n        StringBuilder sql = new StringBuilder(\"SELECT * FROM table WHERE name = \");\n        // ruleid: tainted-sql-string\n        sql.append(name + \";\");\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql.toString());\n        return rs;\n    }\n}", "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/test5\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test5(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ruleid: tainted-sql-string\n        sql += name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/ok1\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok1(@RequestBody String name) {\n        // ok: tainted-sql-string\n        String sql = \"SELECT * FROM table WHERE name = 'everyone';\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "import java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n    @RequestMapping(value = \"/ok2\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok2(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = 'everyone';\";\n        // ok: tainted-sql-string\n        System.out.println(String.format(\"Got request from %s\", name));\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "import java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n    @RequestMapping(value = \"/ok2\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok2(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = 'everyone';\";\n        // ok: tainted-sql-string\n        System.out.println(\"select noise for tests using tainted name:\" + name);\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "package com.r2c.tests;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n    @RequestMapping(value = \"/ok2\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok2(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = 'everyone';\";\n        // ok: tainted-sql-string\n        Logger.debug(\"Create noise for tests using tainted name:\" + name);\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/testok3\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok3(@RequestBody Integer name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/testok4\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok4(@RequestBody Boolean name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += name + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/testok5\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok5(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += (name.substring(2,3) != \"hello\".substring(2,3)) + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/testok6\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet ok6(@RequestBody String name) {\n        String sql = \"SELECT * FROM table WHERE name = \";\n        // ok: tainted-sql-string\n        sql += (\"hello\".substring(2,3) == name.substring(2,3)) + \";\";\n        Connection conn = DriverManager.getConnection(\"jdbc:mysql://localhost:8080\", \"guest\", \"password\");\n        Statement stmt = conn.createStatement();\n        ResultSet rs = stmt.execute(sql);\n        return rs;\n    }\n}", "package com.r2c.tests;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.autoconfigure.*;\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.sql.Statement;\n\n\n@RestController\n@EnableAutoConfiguration\npublic class TestController {\n\n    private static final Logger LOGGER = LoggerFactory.getLogger(TestController.class);\n\n    @RequestMapping(value = \"/test5\", method = RequestMethod.POST, produces = \"plain/text\")\n    ResultSet test5(@RequestBody String name) {\n        try {\n            // ok: tainted-sql-string\n            throw new Exception(String.format(\"Update request from %s to %s isn't allowed\",\n            name, bar\n            ));\n        }\n        catch (NullPointerException e) {\n            System.out.println(\"Caught inside fun().\");\n            throw e; // rethrowing the exception\n        }\n    }\n}"], "actual": [true, true, true, true, true, false, false, false, false, false, false, false, false, true], "expected": [true, true, true, true, true, false, false, false, false, false, false, false, false, false], "index": 212, "commit_message": "adding more pattern-not-insides", "commit_date_str": "2023-06-20 15:53:53 -0500", "leaf_count": 25, "line_count": 54}
{"id": "desede-is-deprecated", "rule": "rules:\n- id: desede-is-deprecated\n  message: >-\n    Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher.\n    Upgrade to use AES.\n    See https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA\n    for more information.\n  severity: WARNING\n  pattern: $CIPHER.getInstance(\"=~/DESede.*/\")\n  languages:\n  - java\n  - kt\n", "failed_tests": ["/**\n * OWASP Benchmark v1.2\n *\n * <p>This file is part of the Open Web Application Security Project (OWASP) Benchmark Project. For\n * details, please see <a\n * href=\"https://owasp.org/www-project-benchmark/\">https://owasp.org/www-project-benchmark/</a>.\n *\n * <p>The OWASP Benchmark is free software: you can redistribute it and/or modify it under the terms\n * of the GNU General Public License as published by the Free Software Foundation, version 2.\n *\n * <p>The OWASP Benchmark is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n * PURPOSE. See the GNU General Public License for more details.\n *\n * @author Dave Wichers\n * @created 2015\n */\n@WebServlet(value = \"/crypto-00/BenchmarkTest00019\")\npublic class BenchmarkTest00019 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        java.io.InputStream param = request.getInputStream();\n\n        try {\n            java.util.Properties benchmarkprops = new java.util.Properties();\n            benchmarkprops.load(\n                    this.getClass().getClassLoader().getResourceAsStream(\"benchmark.properties\"));\n            String algorithm = benchmarkprops.getProperty(\"cryptoAlg1\", \"DESede/ECB/PKCS5Padding\");\n            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);\n\n            // Prepare the cipher to encrypt\n            // ruleid: desede-is-deprecated\n            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();\n            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = param;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    }\n}"], "failed_type": "fn", "testsuite_a": "package servlets;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\npublic class Cls extends HttpServlet\n{\n    private static org.apache.log4j.Logger log = Logger.getLogger(Register.class);\n\n    // cf. https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE\n    protected void danger(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // ruleid: desede-is-deprecated\n        Cipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n        c.init(Cipher.ENCRYPT_MODE, k, iv);\n        byte[] cipherText = c.doFinal(plainText);\n    }\n\n    protected void ok(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // ok: desede-is-deprecated\n        Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n        c.init(Cipher.ENCRYPT_MODE, k, iv);\n        byte[] cipherText = c.doFinal(plainText);\n    }\n}\n", "testsuite_b": "package servlets;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\npublic class Cls extends HttpServlet\n{\n    private static org.apache.log4j.Logger log = Logger.getLogger(Register.class);\n\n    // cf. https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE\n    protected void danger(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // ruleid: desede-is-deprecated\n        Cipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n        c.init(Cipher.ENCRYPT_MODE, k, iv);\n        byte[] cipherText = c.doFinal(plainText);\n    }\n\n    protected void ok(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // ok: desede-is-deprecated\n        Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n        c.init(Cipher.ENCRYPT_MODE, k, iv);\n        byte[] cipherText = c.doFinal(plainText);\n    }\n}\n\n/**\n * OWASP Benchmark v1.2\n *\n * <p>This file is part of the Open Web Application Security Project (OWASP) Benchmark Project. For\n * details, please see <a\n * href=\"https://owasp.org/www-project-benchmark/\">https://owasp.org/www-project-benchmark/</a>.\n *\n * <p>The OWASP Benchmark is free software: you can redistribute it and/or modify it under the terms\n * of the GNU General Public License as published by the Free Software Foundation, version 2.\n *\n * <p>The OWASP Benchmark is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n * PURPOSE. See the GNU General Public License for more details.\n *\n * @author Dave Wichers\n * @created 2015\n */\n@WebServlet(value = \"/crypto-00/BenchmarkTest00019\")\npublic class BenchmarkTest00019 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        java.io.InputStream param = request.getInputStream();\n\n        try {\n            java.util.Properties benchmarkprops = new java.util.Properties();\n            benchmarkprops.load(\n                    this.getClass().getClassLoader().getResourceAsStream(\"benchmark.properties\"));\n            String algorithm = benchmarkprops.getProperty(\"cryptoAlg1\", \"DESede/ECB/PKCS5Padding\");\n            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);\n\n            // Prepare the cipher to encrypt\n            // ruleid: desede-is-deprecated\n            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();\n            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = param;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    }\n}\n\n", "ground_truth": "rules:\n  - id: desede-is-deprecated\n    message: >-\n      Triple DES (3DES or DESede) is considered deprecated. AES is the recommended cipher.\n      Upgrade to use AES.\n    metadata:\n      cwe: \"CWE-326: Inadequate Encryption Strength\"\n      owasp: \"A3: Sensitive Data Exposure\"\n      source-rule-url: https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE\n      asvs:\n        section: V6 Stored Cryptography Verification Requirements\n        control_id: 6.2.5 Insecure Algorithm\n        control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x14-V6-Cryptography.md#v62-algorithms\n      references:\n        - https://csrc.nist.gov/News/2017/Update-to-Current-Use-and-Deprecation-of-TDEA\n      category: security\n      technology:\n        - java\n    severity: WARNING\n    patterns: \n    - pattern-either: \n      - pattern: |\n          $CIPHER.getInstance(\"=~/DESede.*/\")\n      - pattern: |\n          $CRYPTO.KeyGenerator.getInstance(\"DES\")\n    languages:\n      - java\n      - kt\n", "rule_path": "extend_dataset/a7dd64af/before/desede-is-deprecated.yaml", "test_path": "extend_dataset/a7dd64af/after/desede-is-deprecated.java", "category": "historical", "splited_testsuite_b": ["package servlets;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\npublic class Cls extends HttpServlet\n{\n    private static org.apache.log4j.Logger log = Logger.getLogger(Register.class);\n\n    // cf. https://find-sec-bugs.github.io/bugs.htm#TDES_USAGE\n    protected void danger(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // ruleid: desede-is-deprecated\n        Cipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n        c.init(Cipher.ENCRYPT_MODE, k, iv);\n        byte[] cipherText = c.doFinal(plainText);\n    }\n}", "package servlets;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintWriter;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServlet;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpSession;\n\npublic class Cls extends HttpServlet\n{\n    private static org.apache.log4j.Logger log = Logger.getLogger(Register.class);\n\n    protected void ok(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {\n        // ok: desede-is-deprecated\n        Cipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n        c.init(Cipher.ENCRYPT_MODE, k, iv);\n        byte[] cipherText = c.doFinal(plainText);\n    }\n}", "/**\n * OWASP Benchmark v1.2\n *\n * <p>This file is part of the Open Web Application Security Project (OWASP) Benchmark Project. For\n * details, please see <a\n * href=\"https://owasp.org/www-project-benchmark/\">https://owasp.org/www-project-benchmark/</a>.\n *\n * <p>The OWASP Benchmark is free software: you can redistribute it and/or modify it under the terms\n * of the GNU General Public License as published by the Free Software Foundation, version 2.\n *\n * <p>The OWASP Benchmark is distributed in the hope that it will be useful, but WITHOUT ANY\n * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR\n * PURPOSE. See the GNU General Public License for more details.\n *\n * @author Dave Wichers\n * @created 2015\n */\n@WebServlet(value = \"/crypto-00/BenchmarkTest00019\")\npublic class BenchmarkTest00019 extends HttpServlet {\n\n    private static final long serialVersionUID = 1L;\n\n    @Override\n    public void doGet(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        doPost(request, response);\n    }\n\n    @Override\n    public void doPost(HttpServletRequest request, HttpServletResponse response)\n            throws ServletException, IOException {\n        response.setContentType(\"text/html;charset=UTF-8\");\n\n        java.io.InputStream param = request.getInputStream();\n\n        try {\n            java.util.Properties benchmarkprops = new java.util.Properties();\n            benchmarkprops.load(\n                    this.getClass().getClassLoader().getResourceAsStream(\"benchmark.properties\"));\n            String algorithm = benchmarkprops.getProperty(\"cryptoAlg1\", \"DESede/ECB/PKCS5Padding\");\n            javax.crypto.Cipher c = javax.crypto.Cipher.getInstance(algorithm);\n\n            // Prepare the cipher to encrypt\n            // ruleid: desede-is-deprecated\n            javax.crypto.SecretKey key = javax.crypto.KeyGenerator.getInstance(\"DES\").generateKey();\n            c.init(javax.crypto.Cipher.ENCRYPT_MODE, key);\n\n            // encrypt and store the results\n            byte[] input = {(byte) '?'};\n            Object inputParam = param;\n            if (inputParam instanceof String) input = ((String) inputParam).getBytes();\n            if (inputParam instanceof java.io.InputStream) {\n                byte[] strInput = new byte[1000];\n                int i = ((java.io.InputStream) inputParam).read(strInput);\n                if (i == -1) {\n                    response.getWriter()\n                            .println(\n                                    \"This input source requires a POST, not a GET. Incompatible UI for the InputStream source.\");\n                    return;\n                }\n                input = java.util.Arrays.copyOf(strInput, i);\n            }\n            byte[] result = c.doFinal(input);\n\n            java.io.File fileTarget =\n                    new java.io.File(\n                            new java.io.File(org.owasp.benchmark.helpers.Utils.TESTFILES_DIR),\n                            \"passwordFile.txt\");\n            java.io.FileWriter fw =\n                    new java.io.FileWriter(fileTarget, true); // the true will append the new data\n            fw.write(\n                    \"secret_value=\"\n                            + org.owasp.esapi.ESAPI.encoder().encodeForBase64(result, true)\n                            + \"\\n\");\n            fw.close();\n            response.getWriter()\n                    .println(\n                            \"Sensitive value: '\"\n                                    + org.owasp\n                                            .esapi\n                                            .ESAPI\n                                            .encoder()\n                                            .encodeForHTML(new String(input))\n                                    + \"' encrypted and stored<br/>\");\n\n        } catch (java.security.NoSuchAlgorithmException\n                | javax.crypto.NoSuchPaddingException\n                | javax.crypto.IllegalBlockSizeException\n                | javax.crypto.BadPaddingException\n                | java.security.InvalidKeyException e) {\n            response.getWriter()\n                    .println(\n                            \"Problem executing crypto - javax.crypto.Cipher.getInstance(java.lang.String,java.security.Provider) Test Case\");\n            e.printStackTrace(response.getWriter());\n            throw new ServletException(e);\n        }\n    }\n}"], "actual": [true, false, false], "expected": [true, false, true], "index": 213, "commit_message": "desede rule change", "commit_date_str": "2022-01-25 10:44:27 -0800", "leaf_count": 1, "line_count": 1}
{"id": "command-injection-process-builder", "rule": "rules:\n- id: command-injection-process-builder\n  pattern-either:\n  - patterns:\n    - pattern: |\n        new ProcessBuilder($CMD,...)\n    - pattern-not-inside: |\n        $CMD = \"...\";\n        ...\n    - pattern-not-inside: |\n        $CMD = Arrays.asList(\"...\",...);\n        ...\n    - pattern-not-inside: |\n        $CMD = new String[]{\"...\",...};\n        ...\n    - pattern-not: |\n        new ProcessBuilder(\"...\",...)\n    - pattern-not: |\n        new ProcessBuilder(new String[]{\"...\",...},...)\n    - pattern-not: |\n        new ProcessBuilder(Arrays.asList(\"...\",...),...)\n  - patterns:\n    - pattern: |\n        $PB.command($CMD,...)\n    - pattern-inside: |\n        $TYPE $PB = new ProcessBuilder(...);\n        ...\n    - pattern-not-inside: |\n        $CMD = \"...\";\n        ...\n    - pattern-not-inside: |\n        $CMD = Arrays.asList(\"...\",...);\n        ...\n    - pattern-not-inside: |\n        $CMD = new String[]{\"...\",...};\n        ...\n    - pattern-not: |\n        $PB.command(\"...\",...)\n    - pattern-not: |\n        $PB.command(new String[]{\"...\",...},...)\n    - pattern-not: |\n        $PB.command(Arrays.asList(\"...\",...),...)\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          new ProcessBuilder(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...)\n      - pattern: |\n          new ProcessBuilder(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n      - pattern: |\n          new ProcessBuilder(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              new ProcessBuilder($CMD,\"-c\",$ARG,...)\n          - pattern: |\n              new ProcessBuilder(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n          - pattern: |\n              new ProcessBuilder(new String[]{$CMD,\"-c\",$ARG,...},...)\n        - pattern-inside: |\n            $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n            ...\n    - pattern-not-inside: |\n        $ARG = \"...\";\n        ...\n    - pattern-not: |\n        new ProcessBuilder(\"...\",\"...\",\"...\",...)\n    - pattern-not: |\n        new ProcessBuilder(new String[]{\"...\",\"...\",\"...\",...},...)\n    - pattern-not: |\n        new ProcessBuilder(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          $PB.command(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...)\n      - pattern: |\n          $PB.command(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n      - pattern: |\n          $PB.command(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              $PB.command($CMD,\"-c\",$ARG,...)\n          - pattern: |\n              $PB.command(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n          - pattern: |\n              $PB.command(new String[]{$CMD,\"-c\",$ARG,...},...)\n        - pattern-inside: |\n            $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n            ...\n    - pattern-inside: |\n        $TYPE $PB = new ProcessBuilder(...);\n        ...\n    - pattern-not-inside: |\n        $ARG = \"...\";\n        ...\n    - pattern-not: |\n        $PB.command(\"...\",\"...\",\"...\",...)\n    - pattern-not: |\n        $PB.command(new String[]{\"...\",\"...\",\"...\",...},...)\n    - pattern-not: |\n        $PB.command(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n  message: >-\n    A formatted or concatenated string was detected as input to a ProcessBuilder call.\n    This is dangerous if a variable is controlled by user input and could result in\n    a\n    command injection. Ensure your variables are not controlled by users or sufficiently\n    sanitized.\n  severity: ERROR\n  languages:\n  - java\n", "failed_tests": ["public class TestExecutor {\n\n    public String test4(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"cmd\", \"/c\", userInput);\n      return \"foo\";\n    }\n\n}"], "failed_type": "fn", "testsuite_a": "public class TestExecutor {\n\n    private Pair<Integer, String> test1(String command, Logger logAppender) throws IOException {\n      String[] cmd = new String[3];\n      String osName = System.getProperty(\"os.name\");\n      if (osName.startsWith(\"Windows\")) {\n          cmd[0] = \"cmd.exe\";\n          cmd[1] = \"/C\";\n      } else {\n          cmd[0] = \"/bin/bash\";\n          cmd[1] = \"-c\";\n      }\n      cmd[2] = command;\n\n      // ruleid: command-injection-process-builder\n      ProcessBuilder builder = new ProcessBuilder(cmd);\n      builder.redirectErrorStream(true);\n      Process proc = builder.start();\n      return Pair.newPair(1, \"Killed\");\n    }\n\n    public String test2(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(userInput);\n      return \"foo\";\n    }\n\n    public String test3(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"bash\", \"-c\", userInput);\n      return \"foo\";\n    }\n\n    public String okTest() {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ok: command-injection-process-builder\n      builder.command(\"bash\", \"-c\", \"ls\");\n      return \"foo\";\n    }\n\n}\n", "testsuite_b": "public class TestExecutor {\n\n    private Pair<Integer, String> test1(String command, Logger logAppender) throws IOException {\n      String[] cmd = new String[3];\n      String osName = System.getProperty(\"os.name\");\n      if (osName.startsWith(\"Windows\")) {\n          cmd[0] = \"cmd.exe\";\n          cmd[1] = \"/C\";\n      } else {\n          cmd[0] = \"/bin/bash\";\n          cmd[1] = \"-c\";\n      }\n      cmd[2] = command;\n\n      // ruleid: command-injection-process-builder\n      ProcessBuilder builder = new ProcessBuilder(cmd);\n      builder.redirectErrorStream(true);\n      Process proc = builder.start();\n      return Pair.newPair(1, \"Killed\");\n    }\n\n    public String test2(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(userInput);\n      return \"foo\";\n    }\n\n    public String test3(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"bash\", \"-c\", userInput);\n      return \"foo\";\n    }\n\n    public String test4(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"cmd\", \"/c\", userInput);\n      return \"foo\";\n    }\n\n    public String okTest() {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ok: command-injection-process-builder\n      builder.command(\"bash\", \"-c\", \"ls\");\n      return \"foo\";\n    }\n\n\n}\n", "ground_truth": "rules:\n  - id: command-injection-process-builder\n    pattern-either:\n      - patterns:\n          - pattern: |\n              new ProcessBuilder($CMD,...)\n          - pattern-not-inside: |\n              $CMD = \"...\";\n              ...\n          - pattern-not-inside: |\n              $CMD = Arrays.asList(\"...\",...);\n              ...\n          - pattern-not-inside: |\n              $CMD = new String[]{\"...\",...};\n              ...\n          - pattern-not: |\n              new ProcessBuilder(\"...\",...)\n          - pattern-not: |\n              new ProcessBuilder(new String[]{\"...\",...},...)\n          - pattern-not: |\n              new ProcessBuilder(Arrays.asList(\"...\",...),...)\n      - patterns:\n          - pattern: |\n              $PB.command($CMD,...)\n          - pattern-inside: |\n              $TYPE $PB = new ProcessBuilder(...);\n              ...\n          - pattern-not-inside: |\n              $CMD = \"...\";\n              ...\n          - pattern-not-inside: |\n              $CMD = Arrays.asList(\"...\",...);\n              ...\n          - pattern-not-inside: |\n              $CMD = new String[]{\"...\",...};\n              ...\n          - pattern-not: |\n              $PB.command(\"...\",...)\n          - pattern-not: |\n              $PB.command(new String[]{\"...\",...},...)\n          - pattern-not: |\n              $PB.command(Arrays.asList(\"...\",...),...)\n      - patterns:\n          - pattern-either:\n              - pattern: |\n                  new ProcessBuilder(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...)\n              - pattern: |\n                  new ProcessBuilder(\"cmd\",\"/c\",$ARG,...)\n              - pattern: |\n                  new ProcessBuilder(Arrays.asList(\"cmd\",\"/c\",$ARG,...),...)\n              - pattern: |\n                  new ProcessBuilder(new String[]{\"cmd\",\"/c\",$ARG,...},...)\n              - patterns:\n                  - pattern-either:\n                      - pattern: |\n                          new ProcessBuilder($CMD,\"/c\",$ARG,...)\n                      - pattern: |\n                          new ProcessBuilder(Arrays.asList($CMD,\"/c\",$ARG,...),...)\n                      - pattern: |\n                          new ProcessBuilder(new String[]{$CMD,\"/c\",$ARG,...},...)\n                  - pattern-inside: |\n                      $CMD = \"cmd\";\n                      ...\n          - pattern-not-inside: |\n              $ARG = \"...\";\n              ...\n          - pattern-not: |\n              new ProcessBuilder(\"...\",\"...\",\"...\",...)\n          - pattern-not: |\n              new ProcessBuilder(new String[]{\"...\",\"...\",\"...\",...},...)\n          - pattern-not: |\n              new ProcessBuilder(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n      - patterns:\n          - pattern-either:\n              - pattern: |\n                  $PB.command(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...)\n              - pattern: |\n                  $PB.command(\"cmd\",\"/c\",$ARG,...)\n              - pattern: |\n                  $PB.command(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n              - pattern: |\n                  $PB.command(Arrays.asList(\"cmd\",\"/c\",$ARG,...),...)\n              - pattern: |\n                  $PB.command(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n              - pattern: |\n                  $PB.command(new String[]{\"cmd\",\"/c\",$ARG,...},...)\n              - patterns:\n                  - pattern-either:\n                      - pattern: |\n                          $PB.command($CMD,\"-c\",$ARG,...)\n                      - pattern: |\n                          $PB.command(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n                      - pattern: |\n                          $PB.command(new String[]{$CMD,\"-c\",$ARG,...},...)\n                  - pattern-inside: |\n                      $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n                      ...\n              - patterns:\n                  - pattern-either:\n                      - pattern: |\n                          $PB.command($CMD,\"/c\",$ARG,...)\n                      - pattern: |\n                          $PB.command(Arrays.asList($CMD,\"/c\",$ARG,...),...)\n                      - pattern: |\n                          $PB.command(new String[]{$CMD,\"/c\",$ARG,...},...)\n                  - pattern-inside: |\n                      $CMD = \"cmd\";\n                      ...\n          - pattern-inside: |\n              $TYPE $PB = new ProcessBuilder(...);\n              ...\n          - pattern-not-inside: |\n              $ARG = \"...\";\n              ...\n          - pattern-not: |\n              $PB.command(\"...\",\"...\",\"...\",...)\n          - pattern-not: |\n              $PB.command(new String[]{\"...\",\"...\",\"...\",...},...)\n          - pattern-not: |\n              $PB.command(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n    message: >-\n      A formatted or concatenated string was detected as input to a ProcessBuilder call.\n      This is dangerous if a variable is controlled by user input and could result in\n      a\n      command injection. Ensure your variables are not controlled by users or sufficiently\n      sanitized.\n    metadata:\n      cwe: \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n      owasp: \"A1: Injection\"\n      category: security\n      technology:\n        - java\n    severity: ERROR\n    languages:\n      - java\n", "rule_path": "extend_dataset/814eea4b/before/command-injection-process-builder.yaml", "test_path": "extend_dataset/814eea4b/after/command-injection-process-builder.java", "category": "historical", "splited_testsuite_b": ["public class TestExecutor {\n\n    private Pair<Integer, String> test1(String command, Logger logAppender) throws IOException {\n      String[] cmd = new String[3];\n      String osName = System.getProperty(\"os.name\");\n      if (osName.startsWith(\"Windows\")) {\n          cmd[0] = \"cmd.exe\";\n          cmd[1] = \"/C\";\n      } else {\n          cmd[0] = \"/bin/bash\";\n          cmd[1] = \"-c\";\n      }\n      cmd[2] = command;\n\n      // ruleid: command-injection-process-builder\n      ProcessBuilder builder = new ProcessBuilder(cmd);\n      builder.redirectErrorStream(true);\n      Process proc = builder.start();\n      return Pair.newPair(1, \"Killed\");\n    }\n\n}", "public class TestExecutor {\n\n    public String test2(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(userInput);\n      return \"foo\";\n    }\n\n}", "public class TestExecutor {\n\n    public String test3(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"bash\", \"-c\", userInput);\n      return \"foo\";\n    }\n\n}", "public class TestExecutor {\n\n    public String okTest() {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ok: command-injection-process-builder\n      builder.command(\"bash\", \"-c\", \"ls\");\n      return \"foo\";\n    }\n\n}", "public class TestExecutor {\n\n    public String test4(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"cmd\", \"/c\", userInput);\n      return \"foo\";\n    }\n\n}"], "actual": [true, true, true, false, false], "expected": [true, true, true, false, true], "index": 214, "commit_message": "Merge pull request #1908 from returntocorp/command-injection-process-builder-bugfix", "commit_date_str": "2022-03-22 09:19:38 +0100", "leaf_count": 38, "line_count": 149}
{"id": "disallow-old-tls-versions1", "rule": "rules:\n- id: disallow-old-tls-versions1\n  message: >-\n    Detects direct creations of SSLConnectionSocketFactories that don't disallow SSL\n    v2, SSL v3, and TLS\n    v1.\n    SSLSocketFactory can be used to validate the identity of the HTTPS server against\n    a list of trusted\n    certificates.\n    These protocols are deprecated due to POODLE, man in the middle attacks, and other\n    vulnerabilities.\n  severity: WARNING\n  languages: [java]\n  patterns:\n  - pattern: |\n      new SSLConnectionSocketFactory(...);\n  - pattern-not: |\n      new SSLConnectionSocketFactory(..., new String[] {\"TLSv1.2\", \"TLSv1.3\"}, ...);\n  - pattern-not: |\n      new SSLConnectionSocketFactory(..., new String[] {\"TLSv1.3\", \"TLSv1.2\"}, ...);\n  - pattern-not: |\n      new SSLConnectionSocketFactory(..., new String[] {\"TLSv1.3\"}, ...);\n  - pattern-not: |\n      new SSLConnectionSocketFactory(..., new String[] {\"TLSv1.2\"}, ...);\n", "failed_tests": ["class Ok {\n    public void ok_disable_old_tls4() {\n            TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -> true;\n\t\t\tSSLContext sslContext = SSLContexts.custom().loadTrustMaterial(null, acceptingTrustStrategy).build();\n            //ok: disallow-old-tls-versions1\n\t\t\tSSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n\t\t\tTlsConfig tlsConfig = TlsConfig.custom().setHandshakeTimeout(Timeout.ofSeconds(30)).setSupportedProtocols(TLS.V_1_3).build();\n\t\t\tHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder.create().setSSLSocketFactory(csf).setDefaultTlsConfig(tlsConfig).build();\n\t\t\tCloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(cm).build();\n\t\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();\n\t\t\trequestFactory.setHttpClient(httpClient);\n\t\t\trestTemplate = new RestTemplate(requestFactory);\n    }\n}"], "failed_type": "fp", "testsuite_a": "class Bad {\n    public void bad_disable_old_tls1() {\n        //ruleid: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1\", \"TLSv1.1\", \"TLSv1.2\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n\n    public void bad_disable_old_tls2() {\n        //ruleid: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n\n    public void bad_disable_old_tls2() {\n        //ruleid: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1\", \"TLSv1.1\", \"SSLv3\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n}\n\nclass Ok {\n    public void ok_disable_old_tls1() {\n        //ok: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1.2\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n\n    public void ok_disable_old_tls2() {\n        //ok: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1.2\", \"TLSv1.3\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n\n    public void ok_disable_old_tls3() {\n        //ok: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1.3\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n}\n", "testsuite_b": "class Bad {\n    public void bad_disable_old_tls1() {\n        //ruleid: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1\", \"TLSv1.1\", \"TLSv1.2\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n\n    public void bad_disable_old_tls2() {\n        //ruleid: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n\n    public void bad_disable_old_tls2() {\n        //ruleid: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1\", \"TLSv1.1\", \"SSLv3\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n}\n\nclass Ok {\n    public void ok_disable_old_tls1() {\n        //ok: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1.2\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n\n    public void ok_disable_old_tls2() {\n        //ok: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1.2\", \"TLSv1.3\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n\n    public void ok_disable_old_tls3() {\n        //ok: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1.3\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n\n    public void ok_disable_old_tls4() {\n            TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -> true;\n\t\t\tSSLContext sslContext = SSLContexts.custom().loadTrustMaterial(null, acceptingTrustStrategy).build();\n            //ok: disallow-old-tls-versions1\n\t\t\tSSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n\t\t\tTlsConfig tlsConfig = TlsConfig.custom().setHandshakeTimeout(Timeout.ofSeconds(30)).setSupportedProtocols(TLS.V_1_3).build();\n\t\t\tHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder.create().setSSLSocketFactory(csf).setDefaultTlsConfig(tlsConfig).build();\n\t\t\tCloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(cm).build();\n\t\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();\n\t\t\trequestFactory.setHttpClient(httpClient);\n\t\t\trestTemplate = new RestTemplate(requestFactory);\n    }\n}\n", "ground_truth": "rules:\n- id: disallow-old-tls-versions1\n  message: >-\n    Detects direct creations of SSLConnectionSocketFactories that don't disallow SSL v2, SSL v3, and TLS\n    v1.\n    SSLSocketFactory can be used to validate the identity of the HTTPS server against a list of trusted\n    certificates.\n    These protocols are deprecated due to POODLE, man in the middle attacks, and other vulnerabilities.\n  severity: WARNING\n  metadata:\n    likelihood: HIGH\n    impact: MEDIUM\n    confidence: MEDIUM\n    category: security\n    cwe: 'CWE-319: Cleartext Transmission of Sensitive Information'\n    owasp: 'A03:2017 - Sensitive Data Exposure'\n    references:\n    - https://stackoverflow.com/questions/26429751/java-http-clients-and-poodle\n    subcategory:\n    - vuln\n    technology:\n    - java\n    vulnerability: Insecure Transport\n  languages: [java]\n  patterns:\n  - pattern: |\n      new SSLConnectionSocketFactory(...);\n  - pattern-not: |\n      new SSLConnectionSocketFactory(..., new String[] {\"TLSv1.2\", \"TLSv1.3\"}, ...);\n  - pattern-not: |\n      new SSLConnectionSocketFactory(..., new String[] {\"TLSv1.3\", \"TLSv1.2\"}, ...);\n  - pattern-not: |\n      new SSLConnectionSocketFactory(..., new String[] {\"TLSv1.3\"}, ...);\n  - pattern-not: |\n      new SSLConnectionSocketFactory(..., new String[] {\"TLSv1.2\"}, ...);\n  - pattern-not-inside: >\n      (SSLConnectionSocketFactory $SF) = new\n      SSLConnectionSocketFactory(...);\n      ...\n      (TlsConfig $TLSCONFIG) = TlsConfig.custom(). ... .setSupportedProtocols(TLS.V_1_2). ... .build();\n      ...\n      HttpClientConnectionManager cm = $CM.create(). ... .setSSLSocketFactory($SF). ... .setDefaultTlsConfig($TLSCONFIG). ... .build();\n  - pattern-not-inside: >\n      (SSLConnectionSocketFactory $SF) = new\n      SSLConnectionSocketFactory(...);\n      ...\n      (TlsConfig $TLSCONFIG) = TlsConfig.custom(). ... .setSupportedProtocols(TLS.V_1_3). ... .build();\n      ...\n      HttpClientConnectionManager cm = $CM.create(). ... .setSSLSocketFactory($SF). ... .setDefaultTlsConfig($TLSCONFIG). ... .build();\n", "rule_path": "extend_dataset/fc9ff9a4/before/disallow-old-tls-versions1.yaml", "test_path": "extend_dataset/fc9ff9a4/after/disallow-old-tls-versions1.java", "category": "historical", "splited_testsuite_b": ["class Bad {\n    public void bad_disable_old_tls1() {\n        //ruleid: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1\", \"TLSv1.1\", \"TLSv1.2\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n}", "class Bad {\n    public void bad_disable_old_tls2() {\n        //ruleid: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n}", "class Bad {\n    public void bad_disable_old_tls2() {\n        //ruleid: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1\", \"TLSv1.1\", \"SSLv3\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n}", "class Ok {\n    public void ok_disable_old_tls1() {\n        //ok: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1.2\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n}", "class Ok {\n    public void ok_disable_old_tls2() {\n        //ok: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1.2\", \"TLSv1.3\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n}", "class Ok {\n    public void ok_disable_old_tls3() {\n        //ok: disallow-old-tls-versions1\n        SSLConnectionSocketFactory sf = new SSLConnectionSocketFactory(\n                sslContext,\n                new String[] {\"TLSv1.3\"},\n                null,\n                SSLConnectionSocketFactory.BROWSER_COMPATIBLE_HOSTNAME_VERIFIER);\n    }\n}", "class Ok {\n    public void ok_disable_old_tls4() {\n            TrustStrategy acceptingTrustStrategy = (X509Certificate[] chain, String authType) -> true;\n\t\t\tSSLContext sslContext = SSLContexts.custom().loadTrustMaterial(null, acceptingTrustStrategy).build();\n            //ok: disallow-old-tls-versions1\n\t\t\tSSLConnectionSocketFactory csf = new SSLConnectionSocketFactory(sslContext);\n\t\t\tTlsConfig tlsConfig = TlsConfig.custom().setHandshakeTimeout(Timeout.ofSeconds(30)).setSupportedProtocols(TLS.V_1_3).build();\n\t\t\tHttpClientConnectionManager cm = PoolingHttpClientConnectionManagerBuilder.create().setSSLSocketFactory(csf).setDefaultTlsConfig(tlsConfig).build();\n\t\t\tCloseableHttpClient httpClient = HttpClients.custom().setConnectionManager(cm).build();\n\t\t\tHttpComponentsClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory();\n\t\t\trequestFactory.setHttpClient(httpClient);\n\t\t\trestTemplate = new RestTemplate(requestFactory);\n    }\n}"], "actual": [true, true, true, false, false, false, true], "expected": [true, true, true, false, false, false, false], "index": 215, "commit_message": "Update disallow-old-tls-versions1.yaml (#3257)", "commit_date_str": "2024-01-02 22:42:15 +0100", "leaf_count": 5, "line_count": 18}
{"id": "command-injection-process-builder", "rule": "rules:\n- id: command-injection-process-builder\n  pattern-either:\n  - patterns:\n    - pattern: |\n        new ProcessBuilder($CMD,...)\n    - pattern-not-inside: |\n        $CMD = \"...\";\n        ...\n    - pattern-not-inside: |\n        $CMD = Arrays.asList(\"...\",...);\n        ...\n    - pattern-not-inside: |\n        $CMD = new String[]{\"...\",...};\n        ...\n    - pattern-not: |\n        new ProcessBuilder(\"...\",...)\n    - pattern-not: |\n        new ProcessBuilder(new String[]{\"...\",...},...)\n    - pattern-not: |\n        new ProcessBuilder(Arrays.asList(\"...\",...),...)\n  - patterns:\n    - pattern: |\n        $PB.command($CMD,...)\n    - pattern-inside: |\n        $TYPE $PB = new ProcessBuilder(...);\n        ...\n    - pattern-not-inside: |\n        $CMD = \"...\";\n        ...\n    - pattern-not-inside: |\n        $CMD = Arrays.asList(\"...\",...);\n        ...\n    - pattern-not-inside: |\n        $CMD = new String[]{\"...\",...};\n        ...\n    - pattern-not: |\n        $PB.command(\"...\",...)\n    - pattern-not: |\n        $PB.command(new String[]{\"...\",...},...)\n    - pattern-not: |\n        $PB.command(Arrays.asList(\"...\",...),...)\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          new ProcessBuilder(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...)\n      - pattern: |\n          new ProcessBuilder(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n      - pattern: |\n          new ProcessBuilder(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              new ProcessBuilder($CMD,\"-c\",$ARG,...)\n          - pattern: |\n              new ProcessBuilder(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n          - pattern: |\n              new ProcessBuilder(new String[]{$CMD,\"-c\",$ARG,...},...)\n        - pattern-inside: |\n            $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n            ...\n    - pattern-not-inside: |\n        $ARG = \"...\";\n        ...\n    - pattern-not: |\n        new ProcessBuilder(\"...\",\"...\",\"...\",...)\n    - pattern-not: |\n        new ProcessBuilder(new String[]{\"...\",\"...\",\"...\",...},...)\n    - pattern-not: |\n        new ProcessBuilder(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          $PB.command(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...)\n      - pattern: |\n          $PB.command(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n      - pattern: |\n          $PB.command(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n      - patterns:\n        - pattern-either:\n          - pattern: |\n              $PB.command($CMD,\"-c\",$ARG,...)\n          - pattern: |\n              $PB.command(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n          - pattern: |\n              $PB.command(new String[]{$CMD,\"-c\",$ARG,...},...)\n        - pattern-inside: |\n            $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n            ...\n    - pattern-inside: |\n        $TYPE $PB = new ProcessBuilder(...);\n        ...\n    - pattern-not-inside: |\n        $ARG = \"...\";\n        ...\n    - pattern-not: |\n        $PB.command(\"...\",\"...\",\"...\",...)\n    - pattern-not: |\n        $PB.command(new String[]{\"...\",\"...\",\"...\",...},...)\n    - pattern-not: |\n        $PB.command(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n  message: >-\n    A formatted or concatenated string was detected as input to a ProcessBuilder call.\n    This is dangerous if a variable is controlled by user input and could result in\n    a\n    command injection. Ensure your variables are not controlled by users or sufficiently\n    sanitized.\n  severity: ERROR\n  languages:\n  - java\n", "failed_tests": ["public class TestExecutor {\n\n    public String test4(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"cmd\", \"/c\", userInput);\n      return \"foo\";\n    }\n\n}"], "failed_type": "fn", "testsuite_a": "public class TestExecutor {\n\n    private Pair<Integer, String> test1(String command, Logger logAppender) throws IOException {\n      String[] cmd = new String[3];\n      String osName = System.getProperty(\"os.name\");\n      if (osName.startsWith(\"Windows\")) {\n          cmd[0] = \"cmd.exe\";\n          cmd[1] = \"/C\";\n      } else {\n          cmd[0] = \"/bin/bash\";\n          cmd[1] = \"-c\";\n      }\n      cmd[2] = command;\n\n      // ruleid: command-injection-process-builder\n      ProcessBuilder builder = new ProcessBuilder(cmd);\n      builder.redirectErrorStream(true);\n      Process proc = builder.start();\n      return Pair.newPair(1, \"Killed\");\n    }\n\n    public String test2(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(userInput);\n      return \"foo\";\n    }\n\n    public String test3(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"bash\", \"-c\", userInput);\n      return \"foo\";\n    }\n\n    public String okTest() {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ok: command-injection-process-builder\n      builder.command(\"bash\", \"-c\", \"ls\");\n      return \"foo\";\n    }\n\n}\n", "testsuite_b": "public class TestExecutor {\n\n    private Pair<Integer, String> test1(String command, Logger logAppender) throws IOException {\n      String[] cmd = new String[3];\n      String osName = System.getProperty(\"os.name\");\n      if (osName.startsWith(\"Windows\")) {\n          cmd[0] = \"cmd.exe\";\n          cmd[1] = \"/C\";\n      } else {\n          cmd[0] = \"/bin/bash\";\n          cmd[1] = \"-c\";\n      }\n      cmd[2] = command;\n\n      // ruleid: command-injection-process-builder\n      ProcessBuilder builder = new ProcessBuilder(cmd);\n      builder.redirectErrorStream(true);\n      Process proc = builder.start();\n      return Pair.newPair(1, \"Killed\");\n    }\n\n    public String test2(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(userInput);\n      return \"foo\";\n    }\n\n    public String test3(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"bash\", \"-c\", userInput);\n      return \"foo\";\n    }\n\n    public String test4(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"cmd\", \"/c\", userInput);\n      return \"foo\";\n    }\n\n    public String okTest() {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ok: command-injection-process-builder\n      builder.command(\"bash\", \"/c\", \"ls\");\n      return \"foo\";\n    }\n\n\n}\n", "ground_truth": "rules:\n  - id: command-injection-process-builder\n    pattern-either:\n      - patterns:\n          - pattern: |\n              new ProcessBuilder($CMD,...)\n          - pattern-not-inside: |\n              $CMD = \"...\";\n              ...\n          - pattern-not-inside: |\n              $CMD = Arrays.asList(\"...\",...);\n              ...\n          - pattern-not-inside: |\n              $CMD = new String[]{\"...\",...};\n              ...\n          - pattern-not: |\n              new ProcessBuilder(\"...\",...)\n          - pattern-not: |\n              new ProcessBuilder(new String[]{\"...\",...},...)\n          - pattern-not: |\n              new ProcessBuilder(Arrays.asList(\"...\",...),...)\n      - patterns:\n          - pattern: |\n              $PB.command($CMD,...)\n          - pattern-inside: |\n              $TYPE $PB = new ProcessBuilder(...);\n              ...\n          - pattern-not-inside: |\n              $CMD = \"...\";\n              ...\n          - pattern-not-inside: |\n              $CMD = Arrays.asList(\"...\",...);\n              ...\n          - pattern-not-inside: |\n              $CMD = new String[]{\"...\",...};\n              ...\n          - pattern-not: |\n              $PB.command(\"...\",...)\n          - pattern-not: |\n              $PB.command(new String[]{\"...\",...},...)\n          - pattern-not: |\n              $PB.command(Arrays.asList(\"...\",...),...)\n      - patterns:\n          - pattern-either:\n              - pattern: |\n                  new ProcessBuilder(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...)\n              - pattern: |\n                  new ProcessBuilder(\"cmd\",\"/c\",$ARG,...)\n              - pattern: |\n                  new ProcessBuilder(Arrays.asList(\"cmd\",\"/c\",$ARG,...),...)\n              - pattern: |\n                  new ProcessBuilder(new String[]{\"cmd\",\"/c\",$ARG,...},...)\n              - patterns:\n                  - pattern-either:\n                      - pattern: |\n                          new ProcessBuilder($CMD,\"/c\",$ARG,...)\n                      - pattern: |\n                          new ProcessBuilder(Arrays.asList($CMD,\"/c\",$ARG,...),...)\n                      - pattern: |\n                          new ProcessBuilder(new String[]{$CMD,\"/c\",$ARG,...},...)\n                  - pattern-inside: |\n                      $CMD = \"cmd\";\n                      ...\n          - pattern-not-inside: |\n              $ARG = \"...\";\n              ...\n          - pattern-not: |\n              new ProcessBuilder(\"...\",\"...\",\"...\",...)\n          - pattern-not: |\n              new ProcessBuilder(new String[]{\"...\",\"...\",\"...\",...},...)\n          - pattern-not: |\n              new ProcessBuilder(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n      - patterns:\n          - pattern-either:\n              - pattern: |\n                  $PB.command(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...)\n              - pattern: |\n                  $PB.command(\"cmd\",\"/c\",$ARG,...)\n              - pattern: |\n                  $PB.command(Arrays.asList(\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...),...)\n              - pattern: |\n                  $PB.command(Arrays.asList(\"cmd\",\"/c\",$ARG,...),...)\n              - pattern: |\n                  $PB.command(new String[]{\"=~/(sh|bash|ksh|csh|tcsh|zsh)/\",\"-c\",$ARG,...},...)\n              - pattern: |\n                  $PB.command(new String[]{\"cmd\",\"/c\",$ARG,...},...)\n              - patterns:\n                  - pattern-either:\n                      - pattern: |\n                          $PB.command($CMD,\"-c\",$ARG,...)\n                      - pattern: |\n                          $PB.command(Arrays.asList($CMD,\"-c\",$ARG,...),...)\n                      - pattern: |\n                          $PB.command(new String[]{$CMD,\"-c\",$ARG,...},...)\n                  - pattern-inside: |\n                      $CMD = \"=~/(sh|bash|ksh|csh|tcsh|zsh)/\";\n                      ...\n              - patterns:\n                  - pattern-either:\n                      - pattern: |\n                          $PB.command($CMD,\"/c\",$ARG,...)\n                      - pattern: |\n                          $PB.command(Arrays.asList($CMD,\"/c\",$ARG,...),...)\n                      - pattern: |\n                          $PB.command(new String[]{$CMD,\"/c\",$ARG,...},...)\n                  - pattern-inside: |\n                      $CMD = \"cmd\";\n                      ...\n          - pattern-inside: |\n              $TYPE $PB = new ProcessBuilder(...);\n              ...\n          - pattern-not-inside: |\n              $ARG = \"...\";\n              ...\n          - pattern-not: |\n              $PB.command(\"...\",\"...\",\"...\",...)\n          - pattern-not: |\n              $PB.command(new String[]{\"...\",\"...\",\"...\",...},...)\n          - pattern-not: |\n              $PB.command(Arrays.asList(\"...\",\"...\",\"...\",...),...)\n    message: >-\n      A formatted or concatenated string was detected as input to a ProcessBuilder call.\n      This is dangerous if a variable is controlled by user input and could result in\n      a\n      command injection. Ensure your variables are not controlled by users or sufficiently\n      sanitized.\n    metadata:\n      cwe: \"CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')\"\n      owasp: \"A1: Injection\"\n      category: security\n      technology:\n        - java\n    severity: ERROR\n    languages:\n      - java\n", "rule_path": "extend_dataset/4268dee5/before/command-injection-process-builder.yaml", "test_path": "extend_dataset/4268dee5/after/command-injection-process-builder.java", "category": "historical", "splited_testsuite_b": ["public class TestExecutor {\n\n    private Pair<Integer, String> test1(String command, Logger logAppender) throws IOException {\n      String[] cmd = new String[3];\n      String osName = System.getProperty(\"os.name\");\n      if (osName.startsWith(\"Windows\")) {\n          cmd[0] = \"cmd.exe\";\n          cmd[1] = \"/C\";\n      } else {\n          cmd[0] = \"/bin/bash\";\n          cmd[1] = \"-c\";\n      }\n      cmd[2] = command;\n\n      // ruleid: command-injection-process-builder\n      ProcessBuilder builder = new ProcessBuilder(cmd);\n      builder.redirectErrorStream(true);\n      Process proc = builder.start();\n      return Pair.newPair(1, \"Killed\");\n    }\n\n}", "public class TestExecutor {\n\n    public String test2(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(userInput);\n      return \"foo\";\n    }\n\n}", "public class TestExecutor {\n\n    public String test3(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"bash\", \"-c\", userInput);\n      return \"foo\";\n    }\n\n}", "public class TestExecutor {\n\n    public String okTest() {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ok: command-injection-process-builder\n      builder.command(\"bash\", \"/c\", \"ls\");\n      return \"foo\";\n    }\n\n}", "public class TestExecutor {\n\n    public String test4(String userInput) {\n      ProcessBuilder builder = new ProcessBuilder();\n      // ruleid: command-injection-process-builder\n      builder.command(\"cmd\", \"/c\", userInput);\n      return \"foo\";\n    }\n\n}"], "actual": [true, true, true, false, false], "expected": [true, true, true, false, true], "index": 216, "commit_message": "added cases for windows OS", "commit_date_str": "2022-03-21 14:28:22 +0100", "leaf_count": 38, "line_count": 149}
{"id": "formatted-sql-string", "rule": "rules:\n- id: formatted-sql-string\n  message: >-\n    Detected a formatted string in a SQL statement. This could lead to SQL\n    injection if variables in the SQL statement are not properly sanitized.\n    Use a prepared statements (java.sql.PreparedStatement) instead. You\n    can obtain a PreparedStatement using 'connection.prepareStatement'.\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          (HttpServletRequest $REQ)\n      - patterns:\n        - pattern-inside: |\n            $ANNOT $FUNC (..., $INPUT, ...) {\n              ...\n            }\n        - pattern-either:\n          - pattern: (String $INPUT)\n          - pattern: String.format(..., (String $INPUT), ...)\n  pattern-sinks:\n  - patterns:\n    - pattern-not: $S.$SQLFUNC(<... \"=~/.*TABLE *$/\" ...>)\n    - pattern-not: $S.$SQLFUNC(<... \"=~/.*TABLE %s$/\" ...>)\n    - pattern-either:\n      - pattern: (Statement $S).$SQLFUNC(...)\n      - pattern: (Connection $C).createStatement(...).$SQLFUNC(...)\n      - pattern: (EntityManager $EM).$SQLFUNC(...)\n    - metavariable-regex:\n        metavariable: $SQLFUNC\n        regex: execute|executeQuery|createQuery|query\n  pattern-sanitizers:\n  - patterns:\n    - focus-metavariable: $...X\n    - pattern-either:\n      - pattern: <... $...X != $...Y ...>\n      - pattern: <... $...Y != $...X ...>\n      - pattern: <... $...X == $...Y ...>\n      - pattern: <... $...Y == $...X ...>\n  severity: ERROR\n  languages:\n  - java\n", "failed_tests": ["```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class FalsePositiveCase {\n    public List<Student> addWhere(String name, CriteriaQuery Query)\n    {\n        EntityManager em = emfactory.createEntityManager();\n    \tCriteriaBuilder criteriaBuilder = em.getCriteriaBuilder();\n\t\t// ok: formatted-sql-string\n        List<Student> students = em.createQuery(Query.where(criteriaBuilder.equal(studentRoot.get(\"name\"), name ))).getResultList();\n        return students;\n    }\n}\n```"], "failed_type": "fp", "testsuite_a": "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\n\npublic class SqlExample {\n    public void staticQuery() throws SQLException {\n        Connection c = DB.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM happy_messages\");\n    }\n\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM \" + tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n\n    public void findAccountsById(String id, String field) throws SQLException {\n        String sql = \"SELECT \";\n        sql += field;\n        sql += \" FROM accounts WHERE id = '\";\n        sql += id;\n        sql += \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n}\n\npublic class SqlExample2 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(\"SELECT * FROM \" + tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = \"from Account where id = '\" + id + \"'\";\n        EntityManager em = emfactory.createEntityManager();\n        // ruleid:formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n}\n\npublic class SQLExample3 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(String.format(\"SELECT * FROM %s\", tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = String.format(\"from Account where id = '%s'\", id);\n        EntityManager em = emfactory.createEntityManager();\n        // ruleid: formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n\n    public void findAccountsByIdOk() throws SQLException {\n        String id = \"const\"\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n}\n\npublic class tableConcatStatements {\n    public void tableConcat() {\n        // ok:formatted-sql-string\n        stmt.execute(\"DROP TABLE \" + tableName);\n        stmt.execute(String.format(\"CREATE TABLE %s\", tableName));\n    }\n}\n\n// This whole operation has nothing to do with SQL\npublic class FalsePositiveCase {\n    private ApiClient apiClient; // imagine an ApiClient class that contains a method named execute\n\n    public void test(String parameter) throws ApiException {\n        com.squareup.okhttp.Call call = constructHttpCall(parameter); // Create OKHttp call using parameter from outside\n        // ok: formatted-sql-string\n        apiClient.execute(call);\n        // ok: formatted-sql-string\n        apiClient.execute(call);\n        apiClient.run(call); // proof that 'execute' name is causing the false-positive\n    }\n}\n\n", "testsuite_b": "// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SqlExample {\n    public void staticQuery() throws SQLException {\n        Connection c = DB.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM happy_messages\");\n    }\n\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM \" + tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n\n    public void findAccountsById(String id, String field) throws SQLException {\n        String sql = \"SELECT \";\n        sql += field;\n        sql += \" FROM accounts WHERE id = '\";\n        sql += id;\n        sql += \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n}\n\npublic class SqlExample2 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(\"SELECT * FROM \" + tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = \"from Account where id = '\" + id + \"'\";\n        EntityManager em = emfactory.createEntityManager();\n        // ruleid:formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n}\n\npublic class SQLExample3 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(String.format(\"SELECT * FROM %s\", tableName);\n    }\n\n    public void findAccountsById(String id) throws SQLException {\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = String.format(\"from Account where id = '%s'\", id);\n        EntityManager em = emfactory.createEntityManager();\n        // ruleid: formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n\n    public void findAccountsByIdOk() throws SQLException {\n        String id = \"const\"\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n\n}\n\npublic class tableConcatStatements {\n    public void tableConcat() {\n        // ok:formatted-sql-string\n        stmt.execute(\"DROP TABLE \" + tableName);\n        stmt.execute(String.format(\"CREATE TABLE %s\", tableName));\n    }\n}\n\n// This whole operation has nothing to do with SQL\npublic class FalsePositiveCase {\n    private ApiClient apiClient; // imagine an ApiClient class that contains a method named execute\n\n    public void test(String parameter) throws ApiException {\n        com.squareup.okhttp.Call call = constructHttpCall(parameter); // Create OKHttp call using parameter from outside\n        // ok: formatted-sql-string\n        apiClient.execute(call);\n        \n        apiClient.run(call); // proof that 'execute' name is causing the false-positive\n    }\n\n    public List<Student> addWhere(String name, CriteriaQuery Query)\n    {\n        EntityManager em = emfactory.createEntityManager();\n    \tCriteriaBuilder criteriaBuilder = em.getCriteriaBuilder();\n\t\t// ok: formatted-sql-string\n        List<Student> students = em.createQuery(Query.where(criteriaBuilder.equal(studentRoot.get(\"name\"), name ))).getResultList();\n        return students;\n    }\n}\n", "ground_truth": "rules:\n- id: formatted-sql-string\n  metadata:\n    cwe:\n    - \"CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')\"\n    owasp:\n    - A01:2017 - Injection\n    - A03:2021 - Injection\n    source-rule-url: https://find-sec-bugs.github.io/bugs.htm#SQL_INJECTION\n    asvs:\n      section: 'V5: Validation, Sanitization and Encoding Verification Requirements'\n      control_id: 5.3.5 Injection\n      control_url: https://github.com/OWASP/ASVS/blob/master/4.0/en/0x13-V5-Validation-Sanitization-Encoding.md#v53-output-encoding-and-injection-prevention-requirements\n      version: '4'\n    references:\n    - https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html\n    - https://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html#create_ps\n    - https://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-using-prepared-callable-statement\n    category: security\n    technology:\n    - java\n    cwe2022-top25: true\n    cwe2021-top25: true\n    subcategory:\n    - vuln\n    likelihood: HIGH\n    impact: MEDIUM\n    confidence: MEDIUM\n  message: >-\n    Detected a formatted string in a SQL statement. This could lead to SQL\n    injection if variables in the SQL statement are not properly sanitized.\n    Use a prepared statements (java.sql.PreparedStatement) instead. You\n    can obtain a PreparedStatement using 'connection.prepareStatement'.\n  mode: taint\n  pattern-sources:\n  - patterns:\n    - pattern-either:\n      - pattern: |\n          (HttpServletRequest $REQ)\n      - patterns:\n        - pattern-inside: |\n            $ANNOT $FUNC (..., $INPUT, ...) {\n              ...\n            }\n        - pattern-either:\n          - pattern: (String $INPUT)\n          - pattern: String.format(..., (String $INPUT), ...)\n  pattern-sinks:\n  - patterns:\n    - pattern-not: $S.$SQLFUNC(<... \"=~/.*TABLE *$/\" ...>)\n    - pattern-not: $S.$SQLFUNC(<... \"=~/.*TABLE %s$/\" ...>)\n    - pattern-either:\n      - pattern: (Statement $S).$SQLFUNC(...)\n      - pattern: (Connection $C).createStatement(...).$SQLFUNC(...)\n      - pattern: (EntityManager $EM).$SQLFUNC(...)\n    - metavariable-regex:\n        metavariable: $SQLFUNC\n        regex: execute|executeQuery|createQuery|query\n  pattern-sanitizers:\n  - patterns:\n    - pattern: (CriteriaBuilder $CB).$ANY(...)\n  - patterns:\n    - focus-metavariable: $...X\n    - pattern-either:\n      - pattern: <... $...X != $...Y ...>\n      - pattern: <... $...Y != $...X ...>\n      - pattern: <... $...X == $...Y ...>\n      - pattern: <... $...Y == $...X ...>\n  severity: ERROR\n  languages:\n  - java\n", "rule_path": "extend_dataset/9658b2f5/before/formatted-sql-string.yaml", "test_path": "extend_dataset/9658b2f5/after/formatted-sql-string.java", "category": "historical", "splited_testsuite_b": ["```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SqlExample {\n    public void staticQuery() throws SQLException {\n        Connection c = DB.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM happy_messages\");\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SqlExample {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(\"SELECT * FROM \" + tableName);\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SqlExample {\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SqlExample {\n    public void findAccountsById(String id, String field) throws SQLException {\n        String sql = \"SELECT \";\n        sql += field;\n        sql += \" FROM accounts WHERE id = '\";\n        sql += id;\n        sql += \"'\";\n        Connection c = DB.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().executeQuery(sql);\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SqlExample2 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(\"SELECT * FROM \" + tableName);\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SqlExample2 {\n    public void findAccountsById(String id) throws SQLException {\n        String sql = \"SELECT * \"\n            + \"FROM accounts WHERE id = '\"\n            + id\n            + \"'\";\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SqlExample2 {\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = \"from Account where id = '\" + id + \"'\";\n        EntityManager em = emfactory.createEntityManager();\n        // ruleid:formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SQLExample3 {\n    public void getAllFields(String tableName) throws SQLException {\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(String.format(\"SELECT * FROM %s\", tableName);\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SQLExample3 {\n    public void findAccountsById(String id) throws SQLException {\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ruleid:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SQLExample3 {\n    public List<AccountDTO> findAccountsById(String id) {\n        String jql = String.format(\"from Account where id = '%s'\", id);\n        EntityManager em = emfactory.createEntityManager();\n        // ruleid: formatted-sql-string\n        TypedQuery<Account> q = em.createQuery(jql, Account.class);\n        return q.getResultList()\n        .stream()\n        .map(this::toAccountDTO)\n        .collect(Collectors.toList());\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class SQLExample3 {\n    public void findAccountsByIdOk() throws SQLException {\n        String id = \"const\"\n        String sql = String.format(\"SELECT * FROM accounts WHERE id = '%s'\", id);\n        Connection c = db.getConnection();\n        // ok:formatted-sql-string\n        ResultSet rs = c.createStatement().execute(sql);\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class tableConcatStatements {\n    public void tableConcat() {\n        // ok:formatted-sql-string\n        stmt.execute(\"DROP TABLE \" + tableName);\n        stmt.execute(String.format(\"CREATE TABLE %s\", tableName));\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class FalsePositiveCase {\n    private ApiClient apiClient; // imagine an ApiClient class that contains a method named execute\n\n    public void test(String parameter) throws ApiException {\n        com.squareup.okhttp.Call call = constructHttpCall(parameter); // Create OKHttp call using parameter from outside\n        // ok: formatted-sql-string\n        apiClient.execute(call);\n        // ok: formatted-sql-string\n        apiClient.execute(call);\n        apiClient.run(call); // proof that 'execute' name is causing the false-positive\n    }\n}\n```", "```java\n// cf. https://www.baeldung.com/sql-injection\n\npackage sql.injection;\n\nimport com.biz.org.AccountDTO;\nimport com.biz.org.DB;\n\nimport java.sql.Connection;\nimport java.sql.SQLException;\nimport java.util.List;\nimport javax.persistence.EntityManager;\nimport javax.persistence.EntityManagerFactory;\nimport javax.persistence.Persistence;\nimport javax.persistence.Query;\nimport javax.persistence.criteria.CriteriaBuilder;\n\npublic class FalsePositiveCase {\n    public List<Student> addWhere(String name, CriteriaQuery Query)\n    {\n        EntityManager em = emfactory.createEntityManager();\n    \tCriteriaBuilder criteriaBuilder = em.getCriteriaBuilder();\n\t\t// ok: formatted-sql-string\n        List<Student> students = em.createQuery(Query.where(criteriaBuilder.equal(studentRoot.get(\"name\"), name ))).getResultList();\n        return students;\n    }\n}\n```"], "actual": [false, true, true, true, true, true, true, true, true, true, false, false, false, true], "expected": [false, true, true, true, true, true, true, true, true, true, false, false, false, false], "index": 217, "commit_message": "update formatted-sql-string rule (#2851)", "commit_date_str": "2023-04-11 11:25:24 +0900", "leaf_count": 16, "line_count": 30}
{"id": "jackson-unsafe-deserialization", "rule": "rules:\n- id: jackson-unsafe-deserialization\n  patterns:\n  - pattern-either:\n    - patterns:\n      - pattern-inside: |\n          ObjectMapper $OM = new ObjectMapper(...);\n          ...\n      - pattern-inside: |\n          $OM.enableDefaultTyping();\n          ...\n      - pattern: $OM.readValue($JSON, ...);\n    - patterns:\n      - pattern-inside: |\n          class $CLASS {\n            ...\n            @JsonTypeInfo(use = Id.CLASS,...)\n            $TYPE $VAR;\n            ...\n          }\n      - metavariable-regex:\n          metavariable: $TYPE\n          regex: (Object|Serializable|Comparable)\n      - pattern: $OM.readValue($JSON, $CLASS.class);\n  message: >-\n    When using Jackson to marshall/unmarshall JSON to Java objects,\n    enabling default typing is dangerous and can lead to RCE. If an attacker\n    can control `$JSON` it might be possible to provide a malicious JSON which\n    can be used to exploit unsecure deserialization. In order to prevent this\n    issue, avoid to enable default typing (globally or by using \"Per-class\"\n    annotations) and avoid using `Object` and other dangerous types for member\n    variable declaration which creating classes for Jackson based\n    deserialization.\n  languages:\n  - java\n  severity: WARNING\n", "failed_tests": ["// Additional class to test rule when ObjectMapper is created in a different\n// method\n@RestController\npublic class MyController {\n    private Test variable;\n    private ObjectMapper objectMapper;\n    private Test2 variable2;\n\n    @PostConstruct\n    public void initialize() {\n        this.variable = 123;\n        objectMapper = new ObjectMapper();\n        objectMapper.enableDefaultTyping();\n        this.variable2 = 456;\n    }\n\n    @RequestMapping(path = \"/\", method = RequestMethod.GET)\n    public void redirectToUserInfo(HttpServletResponse response) throws IOException {\n        response.sendRedirect(\"/somewhere\");\n    }\n\n    @RequestMapping(path = \"/vulnerable\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public GenericUser vulnerable(@CookieValue(name = \"token\", required = false) String token)\n            throws JsonParseException, JsonMappingException, IOException {\n        byte[] decoded = Base64.getDecoder().decode(token);\n        String decodedString = new String(decoded);\n        // ruleid: jackson-unsafe-deserialization\n        Car obj = objectMapper.readValue(\n                decodedString,\n                Car.class);\n        return obj;\n    }\n}"], "failed_type": "fn", "testsuite_a": "private class Car {\n    private Fake variable;\n\n    @JsonTypeInfo(use = Id.CLASS)\n    private Object color;\n    private String type;\n\n    public Car() {\n    }\n\n    public Car(Object color, String type) {\n        this.color = color;\n        this.type = type;\n    }\n\n    public String getColor() {\n        return (String) this.color;\n    }\n\n    public void setColor(Object color) {\n        this.color = color;\n    }\n\n    public String getType() {\n        return this.type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public static void main(String[] args) throws JsonGenerationException, JsonMappingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.enableDefaultTyping();\n\n        try {\n            // ruleid: jackson-unsafe-deserialization\n            Car car = objectMapper.readValue(Paths.get(\"target/payload.json\").toFile(), Car.class);\n            System.out.println((car.getColor()));\n        } catch (Exception e) {\n            System.out.println(\"Exception raised:\" + e.getMessage());\n        }\n\n    }\n\n    public static void anotherMain(String[] args) throws JsonGenerationException, JsonMappingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        // Disable default typing globally\n        //objectMapper.enableDefaultTyping();\n\n        try {\n            // ruleid: jackson-unsafe-deserialization\n            Car car = objectMapper.readValue(Paths.get(\"target/payload.json\").toFile(), Car.class);\n            System.out.println((car.getColor()));\n        } catch (Exception e) {\n            System.out.println(\"Exception raised:\" + e.getMessage());\n        }\n\n    }\n\n    public static void anotherMain2(String[] args) throws JsonGenerationException, JsonMappingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        try {\n            // ok: jackson-unsafe-deserialization\n            Car car = objectMapper.readValue(Paths.get(\"target/payload.json\").toFile(), Another.class);\n            System.out.println((car.getColor()));\n        } catch (Exception e) {\n            System.out.println(\"Exception raised:\" + e.getMessage());\n        }\n\n    }\n}", "testsuite_b": "private class Car {\n    private Fake variable;\n\n    @JsonTypeInfo(use = Id.CLASS)\n    private Object color;\n    private String type;\n\n    public Car() {\n    }\n\n    public Car(Object color, String type) {\n        this.color = color;\n        this.type = type;\n    }\n\n    public String getColor() {\n        return (String) this.color;\n    }\n\n    public void setColor(Object color) {\n        this.color = color;\n    }\n\n    public String getType() {\n        return this.type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public static void main(String[] args) throws JsonGenerationException, JsonMappingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.enableDefaultTyping();\n\n        try {\n            // ruleid: jackson-unsafe-deserialization\n            Car car = objectMapper.readValue(Paths.get(\"target/payload.json\").toFile(), Car.class);\n            System.out.println((car.getColor()));\n        } catch (Exception e) {\n            System.out.println(\"Exception raised:\" + e.getMessage());\n        }\n\n    }\n\n    public static void anotherMain(String[] args) throws JsonGenerationException, JsonMappingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        // Disable default typing globally\n        // objectMapper.enableDefaultTyping();\n\n        try {\n            // ruleid: jackson-unsafe-deserialization\n            Car car = objectMapper.readValue(Paths.get(\"target/payload.json\").toFile(), Car.class);\n            System.out.println((car.getColor()));\n        } catch (Exception e) {\n            System.out.println(\"Exception raised:\" + e.getMessage());\n        }\n\n    }\n\n    public static void anotherMain2(String[] args) throws JsonGenerationException, JsonMappingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        try {\n            // ok: jackson-unsafe-deserialization\n            Car car = objectMapper.readValue(Paths.get(\"target/payload.json\").toFile(), Another.class);\n            System.out.println((car.getColor()));\n        } catch (Exception e) {\n            System.out.println(\"Exception raised:\" + e.getMessage());\n        }\n\n    }\n}\n\n// Additional class to test rule when ObjectMapper is created in a different\n// method\n@RestController\npublic class MyController {\n    private Test variable;\n    private ObjectMapper objectMapper;\n    private Test2 variable2;\n\n    @PostConstruct\n    public void initialize() {\n        this.variable = 123;\n        objectMapper = new ObjectMapper();\n        objectMapper.enableDefaultTyping();\n        this.variable2 = 456;\n    }\n\n    @RequestMapping(path = \"/\", method = RequestMethod.GET)\n    public void redirectToUserInfo(HttpServletResponse response) throws IOException {\n        response.sendRedirect(\"/somewhere\");\n    }\n\n    @RequestMapping(path = \"/vulnerable\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public GenericUser vulnerable(@CookieValue(name = \"token\", required = false) String token)\n            throws JsonParseException, JsonMappingException, IOException {\n        byte[] decoded = Base64.getDecoder().decode(token);\n        String decodedString = new String(decoded);\n        // ruleid: jackson-unsafe-deserialization\n        Car obj = objectMapper.readValue(\n                decodedString,\n                Car.class);\n        return obj;\n    }\n}", "ground_truth": "rules:\n  - id: jackson-unsafe-deserialization\n    patterns:\n      - pattern-either:\n          - patterns:\n              - pattern-inside: |\n                  ObjectMapper $OM = new ObjectMapper(...);\n                  ...\n              - pattern-inside: |\n                  $OM.enableDefaultTyping();\n                  ...\n              - pattern: $OM.readValue($JSON, ...);\n          - patterns:\n              - pattern-inside: |\n                  class $CLASS {\n                    ...\n                    @JsonTypeInfo(use = Id.CLASS,...)\n                    $TYPE $VAR;\n                    ...\n                  }\n              - metavariable-regex:\n                  metavariable: $TYPE\n                  regex: (Object|Serializable|Comparable)\n              - pattern: $OM.readValue($JSON, $CLASS.class);\n          - patterns:\n              - pattern-inside: |\n                  class $CLASS {\n                    ...\n                    ObjectMapper $OM;\n                    ...\n                    $INITMETHODTYPE $INITMETHOD(...) {\n                      ...\n                      $OM = new ObjectMapper();\n                      ...\n                      $OM.enableDefaultTyping();\n                      ...\n                    }\n                    ...\n                  }\n              - pattern-inside: |\n                  $METHODTYPE $METHOD(...) {\n                    ...  \n                  }\n              - pattern: $OM.readValue($JSON, ...);\n    message: >-\n      When using Jackson to marshall/unmarshall JSON to Java objects,\n      enabling default typing is dangerous and can lead to RCE. If an attacker\n      can control `$JSON` it might be possible to provide a malicious JSON which\n      can be used to exploit unsecure deserialization. In order to prevent this\n      issue, avoid to enable default typing (globally or by using \"Per-class\"\n      annotations) and avoid using `Object` and other dangerous types for member\n      variable declaration which creating classes for Jackson based\n      deserialization.\n    languages:\n      - java\n    severity: WARNING\n    metadata:\n      category: security\n      subcategory:\n        - audit\n      cwe:\n        - \"CWE-502: Deserialization of Untrusted Data\"\n      confidence: MEDIUM\n      likelihood: LOW\n      impact: HIGH\n      owasp:\n        - A8:2017 Insecure Deserialization\n        - A8:2021 Software and Data Integrity Failures\n      references:\n        - https://swapneildash.medium.com/understanding-insecure-implementation-of-jackson-deserialization-7b3d409d2038\n        - https://cowtowncoder.medium.com/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062\n        - https://adamcaudill.com/2017/10/04/exploiting-jackson-rce-cve-2017-7525/\n      technology:\n        - jackson\n", "rule_path": "extend_dataset/fe553ed1/before/jackson-unsafe-deserialization.yaml", "test_path": "extend_dataset/fe553ed1/after/jackson-unsafe-deserialization.java", "category": "historical", "splited_testsuite_b": ["private class Car {\n    private Fake variable;\n\n    @JsonTypeInfo(use = Id.CLASS)\n    private Object color;\n    private String type;\n\n    public Car() {\n    }\n\n    public Car(Object color, String type) {\n        this.color = color;\n        this.type = type;\n    }\n\n    public String getColor() {\n        return (String) this.color;\n    }\n\n    public void setColor(Object color) {\n        this.color = color;\n    }\n\n    public String getType() {\n        return this.type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public static void main(String[] args) throws JsonGenerationException, JsonMappingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.enableDefaultTyping();\n\n        try {\n            // ruleid: jackson-unsafe-deserialization\n            Car car = objectMapper.readValue(Paths.get(\"target/payload.json\").toFile(), Car.class);\n            System.out.println((car.getColor()));\n        } catch (Exception e) {\n            System.out.println(\"Exception raised:\" + e.getMessage());\n        }\n\n    }\n}", "private class Car {\n    private Fake variable;\n\n    @JsonTypeInfo(use = Id.CLASS)\n    private Object color;\n    private String type;\n\n    public Car() {\n    }\n\n    public Car(Object color, String type) {\n        this.color = color;\n        this.type = type;\n    }\n\n    public String getColor() {\n        return (String) this.color;\n    }\n\n    public void setColor(Object color) {\n        this.color = color;\n    }\n\n    public String getType() {\n        return this.type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public static void anotherMain(String[] args) throws JsonGenerationException, JsonMappingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n        // Disable default typing globally\n        // objectMapper.enableDefaultTyping();\n\n        try {\n            // ruleid: jackson-unsafe-deserialization\n            Car car = objectMapper.readValue(Paths.get(\"target/payload.json\").toFile(), Car.class);\n            System.out.println((car.getColor()));\n        } catch (Exception e) {\n            System.out.println(\"Exception raised:\" + e.getMessage());\n        }\n\n    }\n}", "private class Car {\n    private Fake variable;\n\n    @JsonTypeInfo(use = Id.CLASS)\n    private Object color;\n    private String type;\n\n    public Car() {\n    }\n\n    public Car(Object color, String type) {\n        this.color = color;\n        this.type = type;\n    }\n\n    public String getColor() {\n        return (String) this.color;\n    }\n\n    public void setColor(Object color) {\n        this.color = color;\n    }\n\n    public String getType() {\n        return this.type;\n    }\n\n    public void setType(String type) {\n        this.type = type;\n    }\n\n    public static void anotherMain2(String[] args) throws JsonGenerationException, JsonMappingException, IOException {\n        ObjectMapper objectMapper = new ObjectMapper();\n\n        try {\n            // ok: jackson-unsafe-deserialization\n            Car car = objectMapper.readValue(Paths.get(\"target/payload.json\").toFile(), Another.class);\n            System.out.println((car.getColor()));\n        } catch (Exception e) {\n            System.out.println(\"Exception raised:\" + e.getMessage());\n        }\n\n    }\n}", "// Additional class to test rule when ObjectMapper is created in a different\n// method\n@RestController\npublic class MyController {\n    private Test variable;\n    private ObjectMapper objectMapper;\n    private Test2 variable2;\n\n    @PostConstruct\n    public void initialize() {\n        this.variable = 123;\n        objectMapper = new ObjectMapper();\n        objectMapper.enableDefaultTyping();\n        this.variable2 = 456;\n    }\n\n    @RequestMapping(path = \"/\", method = RequestMethod.GET)\n    public void redirectToUserInfo(HttpServletResponse response) throws IOException {\n        response.sendRedirect(\"/somewhere\");\n    }\n\n    @RequestMapping(path = \"/vulnerable\", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n    public GenericUser vulnerable(@CookieValue(name = \"token\", required = false) String token)\n            throws JsonParseException, JsonMappingException, IOException {\n        byte[] decoded = Base64.getDecoder().decode(token);\n        String decodedString = new String(decoded);\n        // ruleid: jackson-unsafe-deserialization\n        Car obj = objectMapper.readValue(\n                decodedString,\n                Car.class);\n        return obj;\n    }\n}"], "actual": [true, true, false, false], "expected": [true, true, false, true], "index": 218, "commit_message": "Merge pull request #2906 from lfama/develop", "commit_date_str": "2023-05-16 12:03:51 -0500", "leaf_count": 7, "line_count": 21}
